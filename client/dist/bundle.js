!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=151)}([function(e,t,n){"use strict";e.exports=n(318)},function(e,t,n){var r=n(3),o=n(13),i=n(19),a=n(15),u=n(27),l=function(e,t,n){var c,s,f,d,p=e&l.F,h=e&l.G,v=e&l.S,m=e&l.P,y=e&l.B,g=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(c in h&&(n=t),n)f=((s=!p&&g&&void 0!==g[c])?g:n)[c],d=y&&s?u(f,r):m&&"function"==typeof f?u(Function.call,f):f,g&&a(g,c,f,e&l.U),b[c]!=f&&i(b,c,d),m&&w[c]!=f&&(w[c]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(6);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=n(324)()},function(e,t,n){var r=n(59)("wks"),o=n(36),i=n(3).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(22),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){e.exports=!n(4)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(5),o=n(107),i=n(32),a=Object.defineProperty;t.f=n(10)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(30);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(3),o=n(19),i=n(18),a=n(36)("src"),u=n(155),l=(""+u).split("toString");n(13).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(c&&(i(n,a)||o(n,a,e[t]?""+e[t]:l.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||u.call(this)}))},function(e,t,n){var r=n(1),o=n(4),i=n(30),a=/"/g,u=function(e,t,n,r){var o=String(i(e)),u="<"+t;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(u),r(r.P+r.F*o((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},function(e,t,n){"use strict";var r=n(138),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(11),o=n(35);e.exports=n(10)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(53),o=n(30);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(54),o=n(35),i=n(20),a=n(32),u=n(18),l=n(107),c=Object.getOwnPropertyDescriptor;t.f=n(10)?c:function(e,t){if(e=i(e),t=a(t,!0),l)try{return c(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(1),o=n(13),i=n(4);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i((function(){n(1)})),"Object",a)}},function(e,t,n){var r=n(27),o=n(53),i=n(14),a=n(9),u=n(245);e.exports=function(e,t){var n=1==e,l=2==e,c=3==e,s=4==e,f=6==e,d=5==e||f,p=t||u;return function(t,u,h){for(var v,m,y=i(t),g=o(y),b=r(u,h,3),w=a(g.length),x=0,E=n?p(t,w):l?p(t,0):void 0;w>x;x++)if((d||x in g)&&(m=b(v=g[x],x,y),e))if(n)E[x]=m;else if(m)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:E.push(v)}else if(s)return!1;return f?-1:c||s?s:E}}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(28);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";if(n(10)){var r=n(37),o=n(3),i=n(4),a=n(1),u=n(70),l=n(100),c=n(27),s=n(49),f=n(35),d=n(19),p=n(50),h=n(22),v=n(9),m=n(133),y=n(39),g=n(32),b=n(18),w=n(55),x=n(6),E=n(14),k=n(92),S=n(40),O=n(42),_=n(41).f,C=n(94),P=n(36),A=n(8),N=n(25),T=n(60),j=n(56),M=n(96),I=n(46),R=n(63),L=n(48),F=n(95),U=n(124),D=n(11),B=n(23),z=D.f,V=B.f,W=o.RangeError,$=o.TypeError,q=o.Uint8Array,H=Array.prototype,G=l.ArrayBuffer,K=l.DataView,Y=N(0),Q=N(2),X=N(3),J=N(4),Z=N(5),ee=N(6),te=T(!0),ne=T(!1),re=M.values,oe=M.keys,ie=M.entries,ae=H.lastIndexOf,ue=H.reduce,le=H.reduceRight,ce=H.join,se=H.sort,fe=H.slice,de=H.toString,pe=H.toLocaleString,he=A("iterator"),ve=A("toStringTag"),me=P("typed_constructor"),ye=P("def_constructor"),ge=u.CONSTR,be=u.TYPED,we=u.VIEW,xe=N(1,(function(e,t){return _e(j(e,e[ye]),t)})),Ee=i((function(){return 1===new q(new Uint16Array([1]).buffer)[0]})),ke=!!q&&!!q.prototype.set&&i((function(){new q(1).set({})})),Se=function(e,t){var n=h(e);if(n<0||n%t)throw W("Wrong offset!");return n},Oe=function(e){if(x(e)&&be in e)return e;throw $(e+" is not a typed array!")},_e=function(e,t){if(!x(e)||!(me in e))throw $("It is not a typed array constructor!");return new e(t)},Ce=function(e,t){return Pe(j(e,e[ye]),t)},Pe=function(e,t){for(var n=0,r=t.length,o=_e(e,r);r>n;)o[n]=t[n++];return o},Ae=function(e,t,n){z(e,t,{get:function(){return this._d[n]}})},Ne=function(e){var t,n,r,o,i,a,u=E(e),l=arguments.length,s=l>1?arguments[1]:void 0,f=void 0!==s,d=C(u);if(null!=d&&!k(d)){for(a=d.call(u),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);u=r}for(f&&l>2&&(s=c(s,arguments[2],2)),t=0,n=v(u.length),o=_e(this,n);n>t;t++)o[t]=f?s(u[t],t):u[t];return o},Te=function(){for(var e=0,t=arguments.length,n=_e(this,t);t>e;)n[e]=arguments[e++];return n},je=!!q&&i((function(){pe.call(new q(1))})),Me=function(){return pe.apply(je?fe.call(Oe(this)):Oe(this),arguments)},Ie={copyWithin:function(e,t){return U.call(Oe(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(Oe(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return F.apply(Oe(this),arguments)},filter:function(e){return Ce(this,Q(Oe(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(Oe(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Oe(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Y(Oe(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Oe(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Oe(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return ce.apply(Oe(this),arguments)},lastIndexOf:function(e){return ae.apply(Oe(this),arguments)},map:function(e){return xe(Oe(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ue.apply(Oe(this),arguments)},reduceRight:function(e){return le.apply(Oe(this),arguments)},reverse:function(){for(var e,t=Oe(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return X(Oe(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return se.call(Oe(this),e)},subarray:function(e,t){var n=Oe(this),r=n.length,o=y(e,r);return new(j(n,n[ye]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===t?r:y(t,r))-o))}},Re=function(e,t){return Ce(this,fe.call(Oe(this),e,t))},Le=function(e){Oe(this);var t=Se(arguments[1],1),n=this.length,r=E(e),o=v(r.length),i=0;if(o+t>n)throw W("Wrong length!");for(;i<o;)this[t+i]=r[i++]},Fe={entries:function(){return ie.call(Oe(this))},keys:function(){return oe.call(Oe(this))},values:function(){return re.call(Oe(this))}},Ue=function(e,t){return x(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},De=function(e,t){return Ue(e,t=g(t,!0))?f(2,e[t]):V(e,t)},Be=function(e,t,n){return!(Ue(e,t=g(t,!0))&&x(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?z(e,t,n):(e[t]=n.value,e)};ge||(B.f=De,D.f=Be),a(a.S+a.F*!ge,"Object",{getOwnPropertyDescriptor:De,defineProperty:Be}),i((function(){de.call({})}))&&(de=pe=function(){return ce.call(this)});var ze=p({},Ie);p(ze,Fe),d(ze,he,Fe.values),p(ze,{slice:Re,set:Le,constructor:function(){},toString:de,toLocaleString:Me}),Ae(ze,"buffer","b"),Ae(ze,"byteOffset","o"),Ae(ze,"byteLength","l"),Ae(ze,"length","e"),z(ze,ve,{get:function(){return this[be]}}),e.exports=function(e,t,n,l){var c=e+((l=!!l)?"Clamped":"")+"Array",f="get"+e,p="set"+e,h=o[c],y=h||{},g=h&&O(h),b=!h||!u.ABV,E={},k=h&&h.prototype,C=function(e,n){z(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Ee)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](n*t+o.o,r,Ee)}(this,n,e)},enumerable:!0})};b?(h=n((function(e,n,r,o){s(e,h,c,"_d");var i,a,u,l,f=0,p=0;if(x(n)){if(!(n instanceof G||"ArrayBuffer"==(l=w(n))||"SharedArrayBuffer"==l))return be in n?Pe(h,n):Ne.call(h,n);i=n,p=Se(r,t);var y=n.byteLength;if(void 0===o){if(y%t)throw W("Wrong length!");if((a=y-p)<0)throw W("Wrong length!")}else if((a=v(o)*t)+p>y)throw W("Wrong length!");u=a/t}else u=m(n),i=new G(a=u*t);for(d(e,"_d",{b:i,o:p,l:a,e:u,v:new K(i)});f<u;)C(e,f++)})),k=h.prototype=S(ze),d(k,"constructor",h)):i((function(){h(1)}))&&i((function(){new h(-1)}))&&R((function(e){new h,new h(null),new h(1.5),new h(e)}),!0)||(h=n((function(e,n,r,o){var i;return s(e,h,c),x(n)?n instanceof G||"ArrayBuffer"==(i=w(n))||"SharedArrayBuffer"==i?void 0!==o?new y(n,Se(r,t),o):void 0!==r?new y(n,Se(r,t)):new y(n):be in n?Pe(h,n):Ne.call(h,n):new y(m(n))})),Y(g!==Function.prototype?_(y).concat(_(g)):_(y),(function(e){e in h||d(h,e,y[e])})),h.prototype=k,r||(k.constructor=h));var P=k[he],A=!!P&&("values"==P.name||null==P.name),N=Fe.values;d(h,me,!0),d(k,be,c),d(k,we,!0),d(k,ye,h),(l?new h(1)[ve]==c:ve in k)||z(k,ve,{get:function(){return c}}),E[c]=h,a(a.G+a.W+a.F*(h!=y),E),a(a.S,c,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i((function(){y.of.call(h,1)})),c,{from:Ne,of:Te}),"BYTES_PER_ELEMENT"in k||d(k,"BYTES_PER_ELEMENT",t),a(a.P,c,Ie),L(c),a(a.P+a.F*ke,c,{set:Le}),a(a.P+a.F*!A,c,Fe),r||k.toString==de||(k.toString=de),a(a.P+a.F*i((function(){new h(1).slice()})),c,{slice:Re}),a(a.P+a.F*(i((function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()}))||!i((function(){k.toLocaleString.call([1,2])}))),c,{toLocaleString:Me}),I[c]=A?P:N,r||A||d(k,he,N)}}else e.exports=function(){}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(36)("meta"),o=n(6),i=n(18),a=n(11).f,u=0,l=Object.isExtensible||function(){return!0},c=!n(4)((function(){return l(Object.preventExtensions({}))})),s=function(e){a(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!l(e))return"F";if(!t)return"E";s(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!l(e))return!0;if(!t)return!1;s(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&l(e)&&!i(e,r)&&s(e),e}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=!1},function(e,t,n){var r=n(109),o=n(78);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(22),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(5),o=n(110),i=n(78),a=n(77)("IE_PROTO"),u=function(){},l=function(){var e,t=n(75)("iframe"),r=i.length;for(t.style.display="none",n(80).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[i[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(109),o=n(78).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(18),o=n(14),i=n(77)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(11).f,o=n(18),i=n(8)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t){e.exports={}},function(e,t,n){var r=n(8)("unscopables"),o=Array.prototype;null==o[r]&&n(19)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){"use strict";var r=n(3),o=n(11),i=n(10),a=n(8)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(15);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){e.exports=n(330)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(29);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(29),o=n(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(5),o=n(28),i=n(8)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[i])?t:o(n)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(319)},function(e,t,n){"use strict";var r=n(72),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(i[y]||r&&r[y]||v&&v[y]||u&&u[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},function(e,t,n){var r=n(13),o=n(3),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(37)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(20),o=n(9),i=n(39);e.exports=function(e){return function(t,n,a){var u,l=r(t),c=o(l.length),s=i(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(1),o=n(30),i=n(4),a=n(82),u="["+a+"]",l=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),s=function(e,t,n){var o={},u=i((function(){return!!a[e]()||"​"!="​"[e]()})),l=o[e]=u?t(f):a[e];n&&(o[n]=l),r(r.P+r.F*u,"String",o)},f=s.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(l,"")),2&t&&(e=e.replace(c,"")),e};e.exports=s},function(e,t,n){var r=n(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(5);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";var r=n(55),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(126);var r=n(15),o=n(19),i=n(4),a=n(30),u=n(8),l=n(97),c=u("species"),s=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=u(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!s||"split"===e&&!f){var v=/./[d],m=n(a,d,""[e],(function(e,t,n,r,o){return t.exec===l?p&&!o?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),y=m[0],g=m[1];r(String.prototype,e,y),o(RegExp.prototype,d,2==t?function(e,t){return g.call(e,this,t)}:function(e){return g.call(e,this)})}}},function(e,t,n){var r=n(27),o=n(122),i=n(92),a=n(5),u=n(9),l=n(94),c={},s={};(t=e.exports=function(e,t,n,f,d){var p,h,v,m,y=d?function(){return e}:l(e),g=r(n,f,t?2:1),b=0;if("function"!=typeof y)throw TypeError(e+" is not iterable!");if(i(y)){for(p=u(e.length);p>b;b++)if((m=t?g(a(h=e[b])[0],h[1]):g(e[b]))===c||m===s)return m}else for(v=y.call(e);!(h=v.next()).done;)if((m=o(v,g,h.value,t))===c||m===s)return m}).BREAK=c,t.RETURN=s},function(e,t,n){var r=n(3).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(3),o=n(1),i=n(15),a=n(50),u=n(33),l=n(67),c=n(49),s=n(6),f=n(4),d=n(63),p=n(45),h=n(83);e.exports=function(e,t,n,v,m,y){var g=r[e],b=g,w=m?"set":"add",x=b&&b.prototype,E={},k=function(e){var t=x[e];i(x,e,"delete"==e||"has"==e?function(e){return!(y&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return y&&!s(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(y||x.forEach&&!f((function(){(new b).entries().next()})))){var S=new b,O=S[w](y?{}:-0,1)!=S,_=f((function(){S.has(1)})),C=d((function(e){new b(e)})),P=!y&&f((function(){for(var e=new b,t=5;t--;)e[w](t,t);return!e.has(-0)}));C||((b=t((function(t,n){c(t,b,e);var r=h(new g,t,b);return null!=n&&l(n,m,r[w],r),r}))).prototype=x,x.constructor=b),(_||P)&&(k("delete"),k("has"),m&&k("get")),(P||O)&&k(w),y&&x.clear&&delete x.clear}else b=v.getConstructor(t,e,m,w),a(b.prototype,n),u.NEED=!0;return p(b,e),E[e]=b,o(o.G+o.W+o.F*(b!=g),E),y||v.setStrong(b,e,m),b}},function(e,t,n){for(var r,o=n(3),i=n(19),a=n(36),u=a("typed_array"),l=a("view"),c=!(!o.ArrayBuffer||!o.DataView),s=c,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[d[f++]])?(i(r.prototype,u,!0),i(r.prototype,l,!0)):s=!1;e.exports={ABV:c,CONSTR:s,TYPED:u,VIEW:l}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],l=t.base?i[0]+t.base:i[0],c=n[l]||0,s="".concat(l," ").concat(c);n[l]=c+1;var f=u(s),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:m(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(e,t){var n,r,o;if(t.singleton){var i=v++;n=h||(h=c(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);a[o].references--}for(var i=l(e,t),c=0;c<n.length;c++){var s=u(n[c]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){"use strict";e.exports=n(326)},function(e,t,n){"use strict";var r=n(328);function o(e){this.message=e}o.prototype=new Error,o.prototype.name="InvalidTokenError",e.exports=function(e,t){if("string"!=typeof e)throw new o("Invalid token specified");var n=!0===(t=t||{}).header?0:1;try{return JSON.parse(r(e.split(".")[n]))}catch(e){throw new o("Invalid token specified: "+e.message)}},e.exports.InvalidTokenError=o},,function(e,t,n){var r=n(6),o=n(3).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){t.f=n(8)},function(e,t,n){var r=n(59)("keys"),o=n(36);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(29);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(3).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(6),o=n(5),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(27)(Function.call,n(23).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(6),o=n(81).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t,n){"use strict";var r=n(22),o=n(30);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){var r=n(22),o=n(30);e.exports=function(e){return function(t,n){var i,a,u=String(o(t)),l=r(n),c=u.length;return l<0||l>=c?e?"":void 0:(i=u.charCodeAt(l))<55296||i>56319||l+1===c||(a=u.charCodeAt(l+1))<56320||a>57343?e?u.charAt(l):i:e?u.slice(l,l+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(37),o=n(1),i=n(15),a=n(19),u=n(46),l=n(121),c=n(45),s=n(42),f=n(8)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,v,m,y){l(n,t,h);var g,b,w,x=function(e){if(!d&&e in O)return O[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},E=t+" Iterator",k="values"==v,S=!1,O=e.prototype,_=O[f]||O["@@iterator"]||v&&O[v],C=_||x(v),P=v?k?x("entries"):C:void 0,A="Array"==t&&O.entries||_;if(A&&(w=s(A.call(new e)))!==Object.prototype&&w.next&&(c(w,E,!0),r||"function"==typeof w[f]||a(w,f,p)),k&&_&&"values"!==_.name&&(S=!0,C=function(){return _.call(this)}),r&&!y||!d&&!S&&O[f]||a(O,f,C),u[t]=C,u[E]=p,v)if(g={values:k?C:x("values"),keys:m?C:x("keys"),entries:P},y)for(b in g)b in O||i(O,b,g[b]);else o(o.P+o.F*(d||S),t,g);return g}},function(e,t,n){var r=n(90),o=n(30);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(6),o=n(29),i=n(8)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(8)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(46),o=n(8)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){"use strict";var r=n(11),o=n(35);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(55),o=n(8)("iterator"),i=n(46);e.exports=n(13).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){"use strict";var r=n(14),o=n(39),i=n(9);e.exports=function(e){for(var t=r(this),n=i(t.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),l=a>2?arguments[2]:void 0,c=void 0===l?n:o(l,n);c>u;)t[u++]=e;return t}},function(e,t,n){"use strict";var r=n(47),o=n(125),i=n(46),a=n(20);e.exports=n(88)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,o,i=n(64),a=RegExp.prototype.exec,u=String.prototype.replace,l=a,c=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(c||s)&&(l=function(e){var t,n,r,o,l=this;return s&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),c&&(t=l.lastIndex),r=a.call(l,e),c&&r&&(l.lastIndex=l.global?r.index+r[0].length:t),s&&r&&r.length>1&&u.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=l},function(e,t,n){"use strict";var r=n(87)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,o,i,a=n(27),u=n(115),l=n(80),c=n(75),s=n(3),f=s.process,d=s.setImmediate,p=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,m=0,y={},g=function(){var e=+this;if(y.hasOwnProperty(e)){var t=y[e];delete y[e],t()}},b=function(e){g.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return y[++m]=function(){u("function"==typeof e?e:Function(e),t)},r(m),m},p=function(e){delete y[e]},"process"==n(29)(f)?r=function(e){f.nextTick(a(g,e,1))}:v&&v.now?r=function(e){v.now(a(g,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(e){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),g.call(e)}}:function(e){setTimeout(a(g,e,1),0)}),e.exports={set:d,clear:p}},function(e,t,n){"use strict";var r=n(3),o=n(10),i=n(37),a=n(70),u=n(19),l=n(50),c=n(4),s=n(49),f=n(22),d=n(9),p=n(133),h=n(41).f,v=n(11).f,m=n(95),y=n(45),g=r.ArrayBuffer,b=r.DataView,w=r.Math,x=r.RangeError,E=r.Infinity,k=g,S=w.abs,O=w.pow,_=w.floor,C=w.log,P=w.LN2,A=o?"_b":"buffer",N=o?"_l":"byteLength",T=o?"_o":"byteOffset";function j(e,t,n){var r,o,i,a=new Array(n),u=8*n-t-1,l=(1<<u)-1,c=l>>1,s=23===t?O(2,-24)-O(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=S(e))!=e||e===E?(o=e!=e?1:0,r=l):(r=_(C(e)/P),e*(i=O(2,-r))<1&&(r--,i*=2),(e+=r+c>=1?s/i:s*O(2,1-c))*i>=2&&(r++,i/=2),r+c>=l?(o=0,r=l):r+c>=1?(o=(e*i-1)*O(2,t),r+=c):(o=e*O(2,c-1)*O(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,u+=t;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*d,a}function M(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,a=i>>1,u=o-7,l=n-1,c=e[l--],s=127&c;for(c>>=7;u>0;s=256*s+e[l],l--,u-=8);for(r=s&(1<<-u)-1,s>>=-u,u+=t;u>0;r=256*r+e[l],l--,u-=8);if(0===s)s=1-a;else{if(s===i)return r?NaN:c?-E:E;r+=O(2,t),s-=a}return(c?-1:1)*r*O(2,s-t)}function I(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function R(e){return[255&e]}function L(e){return[255&e,e>>8&255]}function F(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function U(e){return j(e,52,8)}function D(e){return j(e,23,4)}function B(e,t,n){v(e.prototype,t,{get:function(){return this[n]}})}function z(e,t,n,r){var o=p(+n);if(o+t>e[N])throw x("Wrong index!");var i=e[A]._b,a=o+e[T],u=i.slice(a,a+t);return r?u:u.reverse()}function V(e,t,n,r,o,i){var a=p(+n);if(a+t>e[N])throw x("Wrong index!");for(var u=e[A]._b,l=a+e[T],c=r(+o),s=0;s<t;s++)u[l+s]=c[i?s:t-s-1]}if(a.ABV){if(!c((function(){g(1)}))||!c((function(){new g(-1)}))||c((function(){return new g,new g(1.5),new g(NaN),"ArrayBuffer"!=g.name}))){for(var W,$=(g=function(e){return s(this,g),new k(p(e))}).prototype=k.prototype,q=h(k),H=0;q.length>H;)(W=q[H++])in g||u(g,W,k[W]);i||($.constructor=g)}var G=new b(new g(2)),K=b.prototype.setInt8;G.setInt8(0,2147483648),G.setInt8(1,2147483649),!G.getInt8(0)&&G.getInt8(1)||l(b.prototype,{setInt8:function(e,t){K.call(this,e,t<<24>>24)},setUint8:function(e,t){K.call(this,e,t<<24>>24)}},!0)}else g=function(e){s(this,g,"ArrayBuffer");var t=p(e);this._b=m.call(new Array(t),0),this[N]=t},b=function(e,t,n){s(this,b,"DataView"),s(e,g,"DataView");var r=e[N],o=f(t);if(o<0||o>r)throw x("Wrong offset!");if(o+(n=void 0===n?r-o:d(n))>r)throw x("Wrong length!");this[A]=e,this[T]=o,this[N]=n},o&&(B(g,"byteLength","_l"),B(b,"buffer","_b"),B(b,"byteLength","_l"),B(b,"byteOffset","_o")),l(b.prototype,{getInt8:function(e){return z(this,1,e)[0]<<24>>24},getUint8:function(e){return z(this,1,e)[0]},getInt16:function(e){var t=z(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=z(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return I(z(this,4,e,arguments[1]))},getUint32:function(e){return I(z(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return M(z(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return M(z(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){V(this,1,e,R,t)},setUint8:function(e,t){V(this,1,e,R,t)},setInt16:function(e,t){V(this,2,e,L,t,arguments[2])},setUint16:function(e,t){V(this,2,e,L,t,arguments[2])},setInt32:function(e,t){V(this,4,e,F,t,arguments[2])},setUint32:function(e,t){V(this,4,e,F,t,arguments[2])},setFloat32:function(e,t){V(this,4,e,D,t,arguments[2])},setFloat64:function(e,t){V(this,8,e,U,t,arguments[2])}});y(g,"ArrayBuffer"),y(b,"DataView"),u(b.prototype,a.VIEW,!0),t.ArrayBuffer=g,t.DataView=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];function r(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=null;return t.forEach((function(e){if(null==o){var t=e.apply(void 0,n);null!=t&&(o=t)}})),o}return(0,i.default)(r)};var r,o=n(349),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";(function(e,r){var o,i=n(149);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(52),n(327)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(105),a=n(7),u=n.n(a),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,a,s="__create-react-context-"+((l[a="__global_unique_id__"]=(l[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=u.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=u.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(52))},function(e,t,n){var r=n(355);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],m=n[3],y=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=v&&null!=h&&h!==v,E="+"===b||"*"===b,k="?"===b||"*"===b,S=n[2]||s,O=y||g;r.push({name:m||i++,prefix:v||"",delimiter:S,optional:k,repeat:E,partial:x,asterisk:!!w,pattern:O?c(O):w?".*":"[^"+l(S)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,"a",(function(){return o}))},,function(e,t,n){e.exports=!n(10)&&!n(4)((function(){return 7!=Object.defineProperty(n(75)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),o=n(13),i=n(37),a=n(76),u=n(11).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(18),o=n(20),i=n(60)(!1),a=n(77)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),l=0,c=[];for(n in u)n!=a&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~i(c,n)||c.push(n));return c}},function(e,t,n){var r=n(11),o=n(5),i=n(38);e.exports=n(10)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,l=0;u>l;)r.f(e,n=a[l++],t[n]);return e}},function(e,t,n){var r=n(20),o=n(41).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){"use strict";var r=n(10),o=n(38),i=n(61),a=n(54),u=n(14),l=n(53),c=Object.assign;e.exports=!c||n(4)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r}))?function(e,t){for(var n=u(e),c=arguments.length,s=1,f=i.f,d=a.f;c>s;)for(var p,h=l(arguments[s++]),v=f?o(h).concat(f(h)):o(h),m=v.length,y=0;m>y;)p=v[y++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:c},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(28),o=n(6),i=n(115),a=[].slice,u={},l=function(e,t,n){if(!(t in u)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";u[t]=Function("F,a","return new F("+r.join(",")+")")}return u[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?l(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(u.prototype=t.prototype),u}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(3).parseInt,o=n(62).trim,i=n(82),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t,n){var r=n(3).parseFloat,o=n(62).trim;e.exports=1/r(n(82)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(29);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(6),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){"use strict";var r=n(40),o=n(35),i=n(45),a={};n(19)(a,n(8)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(5);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(28),o=n(14),i=n(53),a=n(9);e.exports=function(e,t,n,u,l){r(t);var c=o(e),s=i(c),f=a(c.length),d=l?f-1:0,p=l?-1:1;if(n<2)for(;;){if(d in s){u=s[d],d+=p;break}if(d+=p,l?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;l?d>=0:f>d;d+=p)d in s&&(u=t(u,s[d],d,c));return u}},function(e,t,n){"use strict";var r=n(14),o=n(39),i=n(9);e.exports=[].copyWithin||function(e,t){var n=r(this),a=i(n.length),u=o(e,a),l=o(t,a),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?a:o(c,a))-l,a-u),f=1;for(l<u&&u<l+s&&(f=-1,l+=s-1,u+=s-1);s-- >0;)l in n?n[u]=n[l]:delete n[u],u+=f,l+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(97);n(1)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(10)&&"g"!=/./g.flags&&n(11).f(RegExp.prototype,"flags",{configurable:!0,get:n(64)})},function(e,t,n){"use strict";var r,o,i,a,u=n(37),l=n(3),c=n(27),s=n(55),f=n(1),d=n(6),p=n(28),h=n(49),v=n(67),m=n(56),y=n(99).set,g=n(266)(),b=n(129),w=n(267),x=n(68),E=n(130),k=l.TypeError,S=l.process,O=S&&S.versions,_=O&&O.v8||"",C=l.Promise,P="process"==s(S),A=function(){},N=o=b.f,T=!!function(){try{var e=C.resolve(1),t=(e.constructor={})[n(8)("species")]=function(e){e(A,A)};return(P||"function"==typeof PromiseRejectionEvent)&&e.then(A)instanceof t&&0!==_.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),j=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},M=function(e,t){if(!e._n){e._n=!0;var n=e._c;g((function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,u=o?t.ok:t.fail,l=t.resolve,c=t.reject,s=t.domain;try{u?(o||(2==e._h&&L(e),e._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&(s.exit(),a=!0)),n===t.promise?c(k("Promise-chain cycle")):(i=j(n))?i.call(n,l,c):l(n)):c(r)}catch(e){s&&!a&&s.exit(),c(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&I(e)}))}},I=function(e){y.call(l,(function(){var t,n,r,o=e._v,i=R(e);if(i&&(t=w((function(){P?S.emit("unhandledRejection",o,e):(n=l.onunhandledrejection)?n({promise:e,reason:o}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",o)})),e._h=P||R(e)?2:1),e._a=void 0,i&&t.e)throw t.v}))},R=function(e){return 1!==e._h&&0===(e._a||e._c).length},L=function(e){y.call(l,(function(){var t;P?S.emit("rejectionHandled",e):(t=l.onrejectionhandled)&&t({promise:e,reason:e._v})}))},F=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),M(t,!0))},U=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw k("Promise can't be resolved itself");(t=j(e))?g((function(){var r={_w:n,_d:!1};try{t.call(e,c(U,r,1),c(F,r,1))}catch(e){F.call(r,e)}})):(n._v=e,n._s=1,M(n,!1))}catch(e){F.call({_w:n,_d:!1},e)}}};T||(C=function(e){h(this,C,"Promise","_h"),p(e),r.call(this);try{e(c(U,this,1),c(F,this,1))}catch(e){F.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(50)(C.prototype,{then:function(e,t){var n=N(m(this,C));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=P?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=c(U,e,1),this.reject=c(F,e,1)},b.f=N=function(e){return e===C||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!T,{Promise:C}),n(45)(C,"Promise"),n(48)("Promise"),a=n(13).Promise,f(f.S+f.F*!T,"Promise",{reject:function(e){var t=N(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!T),"Promise",{resolve:function(e){return E(u&&this===a?C:this,e)}}),f(f.S+f.F*!(T&&n(63)((function(e){C.all(e).catch(A)}))),"Promise",{all:function(e){var t=this,n=N(t),r=n.resolve,o=n.reject,i=w((function(){var n=[],i=0,a=1;v(e,!1,(function(e){var u=i++,l=!1;n.push(void 0),a++,t.resolve(e).then((function(e){l||(l=!0,n[u]=e,--a||r(n))}),o)})),--a||r(n)}));return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=N(t),r=n.reject,o=w((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return o.e&&r(o.v),n.promise}})},function(e,t,n){"use strict";var r=n(28);function o(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},function(e,t,n){var r=n(5),o=n(6),i=n(129);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(11).f,o=n(40),i=n(50),a=n(27),u=n(49),l=n(67),c=n(88),s=n(125),f=n(48),d=n(10),p=n(33).fastKey,h=n(43),v=d?"_s":"size",m=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var s=e((function(e,r){u(e,s,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&l(r,n,e[c],e)}));return i(s.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=h(this,t),r=m(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(e){h(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!m(h(this,t),e)}}),d&&r(s.prototype,"size",{get:function(){return h(this,t)[v]}}),s},def:function(e,t,n){var r,o,i=m(e,t);return i?i.v=n:(e._l=i={i:o=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[v]++,"F"!==o&&(e._i[o]=i)),e},getEntry:m,setStrong:function(e,t,n){c(e,t,(function(e,n){this._t=h(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?s(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,s(1))}),n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(50),o=n(33).getWeak,i=n(5),a=n(6),u=n(49),l=n(67),c=n(25),s=n(18),f=n(43),d=c(5),p=c(6),h=0,v=function(e){return e._l||(e._l=new m)},m=function(){this.a=[]},y=function(e,t){return d(e.a,(function(e){return e[0]===t}))};m.prototype={get:function(e){var t=y(this,e);if(t)return t[1]},has:function(e){return!!y(this,e)},set:function(e,t){var n=y(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var c=e((function(e,r){u(e,c,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&l(r,n,e[i],e)}));return r(c.prototype,{delete:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).delete(e):n&&s(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).has(e):n&&s(n,this._i)}}),c},def:function(e,t,n){var r=o(i(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(22),o=n(9);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(41),o=n(61),i=n(5),a=n(3).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(9),o=n(84),i=n(30);e.exports=function(e,t,n,a){var u=String(i(e)),l=u.length,c=void 0===n?" ":String(n),s=r(t);if(s<=l||""==c)return u;var f=s-l,d=o.call(c,Math.ceil(f/c.length));return d.length>f&&(d=d.slice(0,f)),a?d+u:u+d}},function(e,t,n){var r=n(10),o=n(38),i=n(20),a=n(54).f;e.exports=function(e){return function(t){for(var n,u=i(t),l=o(u),c=l.length,s=0,f=[];c>s;)n=l[s++],r&&!a.call(u,n)||f.push(e?[n,u[n]]:u[n]);return f}}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(17);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(17),o=n(335),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=n(143)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l}).call(this,n(142))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(17),o=n(336),i=n(338),a=n(139),u=n(339),l=n(342),c=n(343),s=n(144);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",v=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(h+":"+v)}var m=u(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(m,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,i),p=null}},p.onabort=function(){p&&(n(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(s(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=(e.withCredentials||c(m))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;y&&(d[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(337);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(17);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],u=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=l(void 0,t[e]))})),r.forEach(i,c),r.forEach(a,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(void 0,t[o])})),r.forEach(u,(function(r){r in t?n[r]=l(e[r],t[r]):r in e&&(n[r]=l(void 0,e[r]))}));var s=o.concat(i).concat(a).concat(u),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(f,c),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(352),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(52))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var o=r(n(0)),i=r(n(57)),a=n(350),u=r(a);const l=e=>{const t=document.createElement("div");return new Promise(n=>{i.render(e,t,()=>{const e=t.firstChild;return n(e)})})},c=(...e)=>u(e,{identifier:o.isValidElement,transformer:l});a.bindActions(c),e.exports=c},function(e,t,n){n(152),e.exports=n(359)},function(e,t,n){"use strict";(function(e){n(153),n(297),n(299),n(301),n(303),n(305),n(307),n(309),n(311),n(313),n(317),e._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),e._babelPolyfill=!0}).call(this,n(52))},function(e,t,n){n(154),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(235),n(236),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(96),n(260),n(126),n(261),n(127),n(262),n(263),n(264),n(265),n(128),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),e.exports=n(13)},function(e,t,n){"use strict";var r=n(3),o=n(18),i=n(10),a=n(1),u=n(15),l=n(33).KEY,c=n(4),s=n(59),f=n(45),d=n(36),p=n(8),h=n(76),v=n(108),m=n(156),y=n(79),g=n(5),b=n(6),w=n(14),x=n(20),E=n(32),k=n(35),S=n(40),O=n(111),_=n(23),C=n(61),P=n(11),A=n(38),N=_.f,T=P.f,j=O.f,M=r.Symbol,I=r.JSON,R=I&&I.stringify,L=p("_hidden"),F=p("toPrimitive"),U={}.propertyIsEnumerable,D=s("symbol-registry"),B=s("symbols"),z=s("op-symbols"),V=Object.prototype,W="function"==typeof M&&!!C.f,$=r.QObject,q=!$||!$.prototype||!$.prototype.findChild,H=i&&c((function(){return 7!=S(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=N(V,t);r&&delete V[t],T(e,t,n),r&&e!==V&&T(V,t,r)}:T,G=function(e){var t=B[e]=S(M.prototype);return t._k=e,t},K=W&&"symbol"==typeof M.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof M},Y=function(e,t,n){return e===V&&Y(z,t,n),g(e),t=E(t,!0),g(n),o(B,t)?(n.enumerable?(o(e,L)&&e[L][t]&&(e[L][t]=!1),n=S(n,{enumerable:k(0,!1)})):(o(e,L)||T(e,L,k(1,{})),e[L][t]=!0),H(e,t,n)):T(e,t,n)},Q=function(e,t){g(e);for(var n,r=m(t=x(t)),o=0,i=r.length;i>o;)Y(e,n=r[o++],t[n]);return e},X=function(e){var t=U.call(this,e=E(e,!0));return!(this===V&&o(B,e)&&!o(z,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,L)&&this[L][e])||t)},J=function(e,t){if(e=x(e),t=E(t,!0),e!==V||!o(B,t)||o(z,t)){var n=N(e,t);return!n||!o(B,t)||o(e,L)&&e[L][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=j(x(e)),r=[],i=0;n.length>i;)o(B,t=n[i++])||t==L||t==l||r.push(t);return r},ee=function(e){for(var t,n=e===V,r=j(n?z:x(e)),i=[],a=0;r.length>a;)!o(B,t=r[a++])||n&&!o(V,t)||i.push(B[t]);return i};W||(u((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===V&&t.call(z,n),o(this,L)&&o(this[L],e)&&(this[L][e]=!1),H(this,e,k(1,n))};return i&&q&&H(V,e,{configurable:!0,set:t}),G(e)}).prototype,"toString",(function(){return this._k})),_.f=J,P.f=Y,n(41).f=O.f=Z,n(54).f=X,C.f=ee,i&&!n(37)&&u(V,"propertyIsEnumerable",X,!0),h.f=function(e){return G(p(e))}),a(a.G+a.W+a.F*!W,{Symbol:M});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)p(te[ne++]);for(var re=A(p.store),oe=0;re.length>oe;)v(re[oe++]);a(a.S+a.F*!W,"Symbol",{for:function(e){return o(D,e+="")?D[e]:D[e]=M(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in D)if(D[t]===e)return t},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!W,"Object",{create:function(e,t){return void 0===t?S(e):Q(S(e),t)},defineProperty:Y,defineProperties:Q,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ie=c((function(){C.f(1)}));a(a.S+a.F*ie,"Object",{getOwnPropertySymbols:function(e){return C.f(w(e))}}),I&&a(a.S+a.F*(!W||c((function(){var e=M();return"[null]"!=R([e])||"{}"!=R({a:e})||"{}"!=R(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,R.apply(I,r)}}),M.prototype[F]||n(19)(M.prototype,F,M.prototype.valueOf),f(M,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(59)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(38),o=n(61),i=n(54);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,u=n(e),l=i.f,c=0;u.length>c;)l.call(e,a=u[c++])&&t.push(a);return t}},function(e,t,n){var r=n(1);r(r.S,"Object",{create:n(40)})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(10),"Object",{defineProperty:n(11).f})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(10),"Object",{defineProperties:n(110)})},function(e,t,n){var r=n(20),o=n(23).f;n(24)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(r(e),t)}}))},function(e,t,n){var r=n(14),o=n(42);n(24)("getPrototypeOf",(function(){return function(e){return o(r(e))}}))},function(e,t,n){var r=n(14),o=n(38);n(24)("keys",(function(){return function(e){return o(r(e))}}))},function(e,t,n){n(24)("getOwnPropertyNames",(function(){return n(111).f}))},function(e,t,n){var r=n(6),o=n(33).onFreeze;n(24)("freeze",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},function(e,t,n){var r=n(6),o=n(33).onFreeze;n(24)("seal",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},function(e,t,n){var r=n(6),o=n(33).onFreeze;n(24)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},function(e,t,n){var r=n(6);n(24)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(6);n(24)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(6);n(24)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},function(e,t,n){var r=n(1);r(r.S+r.F,"Object",{assign:n(112)})},function(e,t,n){var r=n(1);r(r.S,"Object",{is:n(113)})},function(e,t,n){var r=n(1);r(r.S,"Object",{setPrototypeOf:n(81).set})},function(e,t,n){"use strict";var r=n(55),o={};o[n(8)("toStringTag")]="z",o+""!="[object z]"&&n(15)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(e,t,n){var r=n(1);r(r.P,"Function",{bind:n(114)})},function(e,t,n){var r=n(11).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(10)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(6),o=n(42),i=n(8)("hasInstance"),a=Function.prototype;i in a||n(11).f(a,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(1),o=n(116);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){var r=n(1),o=n(117);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){"use strict";var r=n(3),o=n(18),i=n(29),a=n(83),u=n(32),l=n(4),c=n(41).f,s=n(23).f,f=n(11).f,d=n(62).trim,p=r.Number,h=p,v=p.prototype,m="Number"==i(n(40)(v)),y="trim"in String.prototype,g=function(e){var t=u(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=y?t.trim():d(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,l=t.slice(2),c=0,s=l.length;c<s;c++)if((a=l.charCodeAt(c))<48||a>o)return NaN;return parseInt(l,r)}}return+t};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof p&&(m?l((function(){v.valueOf.call(n)})):"Number"!=i(n))?a(new h(g(t)),n,p):g(t)};for(var b,w=n(10)?c(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)o(h,b=w[x])&&!o(p,b)&&f(p,b,s(h,b));p.prototype=v,v.constructor=p,n(15)(r,"Number",p)}},function(e,t,n){"use strict";var r=n(1),o=n(22),i=n(118),a=n(84),u=1..toFixed,l=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*c[n],c[n]=r%1e7,r=l(r/1e7)},d=function(e){for(var t=6,n=0;--t>=0;)n+=c[t],c[t]=l(n/e),n=n%e*1e7},p=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==c[e]){var n=String(c[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(4)((function(){u.call({})}))),"Number",{toFixed:function(e){var t,n,r,u,l=i(this,s),c=o(e),v="",m="0";if(c<0||c>20)throw RangeError(s);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(v="-",l=-l),l>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(l*h(2,69,1))-69)<0?l*h(2,-t,1):l/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)d(1<<23),r-=23;d(1<<r),f(1,1),d(2),m=p()}else f(0,n),f(1<<-t,0),m=p()+a.call("0",c);return m=c>0?v+((u=m.length)<=c?"0."+a.call("0",c-u)+m:m.slice(0,u-c)+"."+m.slice(u-c)):v+m}})},function(e,t,n){"use strict";var r=n(1),o=n(4),i=n(118),a=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==a.call(1,void 0)}))||!o((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(1),o=n(3).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isInteger:n(119)})},function(e,t,n){var r=n(1);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(1),o=n(119),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(1);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(1);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(1),o=n(117);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(1),o=n(116);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(1),o=n(120),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){var r=n(1),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(1),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(1),o=n(85);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(1),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(1),o=n(86);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(1);r(r.S,"Math",{fround:n(199)})},function(e,t,n){var r=n(85),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),l=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),c=r(e);return o<l?c*(o/l/a+1/i-1/i)*l*a:(n=(t=(1+a/i)*o)-(t-o))>u||n!=n?c*(1/0):c*n}},function(e,t,n){var r=n(1),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,u=arguments.length,l=0;a<u;)l<(n=o(arguments[a++]))?(i=i*(r=l/n)*r+1,l=n):i+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*Math.sqrt(i)}})},function(e,t,n){var r=n(1),o=Math.imul;r(r.S+r.F*n(4)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log1p:n(120)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{sign:n(85)})},function(e,t,n){var r=n(1),o=n(86),i=Math.exp;r(r.S+r.F*n(4)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(1),o=n(86),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(1);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(1),o=n(39),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(1),o=n(20),i=n(9);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(t[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(e,t,n){"use strict";n(62)("trim",(function(e){return function(){return e(this,3)}}))},function(e,t,n){"use strict";var r=n(87)(!0);n(88)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(1),o=n(87)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(1),o=n(9),i=n(89),a="".endsWith;r(r.P+r.F*n(91)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),l=String(e);return a?a.call(t,l,u):t.slice(u-l.length,u)===l}})},function(e,t,n){"use strict";var r=n(1),o=n(89);r(r.P+r.F*n(91)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(1);r(r.P,"String",{repeat:n(84)})},function(e,t,n){"use strict";var r=n(1),o=n(9),i=n(89),a="".startsWith;r(r.P+r.F*n(91)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(16)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},function(e,t,n){"use strict";n(16)("big",(function(e){return function(){return e(this,"big","","")}}))},function(e,t,n){"use strict";n(16)("blink",(function(e){return function(){return e(this,"blink","","")}}))},function(e,t,n){"use strict";n(16)("bold",(function(e){return function(){return e(this,"b","","")}}))},function(e,t,n){"use strict";n(16)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},function(e,t,n){"use strict";n(16)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},function(e,t,n){"use strict";n(16)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},function(e,t,n){"use strict";n(16)("italics",(function(e){return function(){return e(this,"i","","")}}))},function(e,t,n){"use strict";n(16)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},function(e,t,n){"use strict";n(16)("small",(function(e){return function(){return e(this,"small","","")}}))},function(e,t,n){"use strict";n(16)("strike",(function(e){return function(){return e(this,"strike","","")}}))},function(e,t,n){"use strict";n(16)("sub",(function(e){return function(){return e(this,"sub","","")}}))},function(e,t,n){"use strict";n(16)("sup",(function(e){return function(){return e(this,"sup","","")}}))},function(e,t,n){var r=n(1);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(1),o=n(14),i=n(32);r(r.P+r.F*n(4)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(1),o=n(234);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(4),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(e,t,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(15)(r,"toString",(function(){var e=i.call(this);return e==e?o.call(this):"Invalid Date"}))},function(e,t,n){var r=n(8)("toPrimitive"),o=Date.prototype;r in o||n(19)(o,r,n(237))},function(e,t,n){"use strict";var r=n(5),o=n(32);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(1);r(r.S,"Array",{isArray:n(79)})},function(e,t,n){"use strict";var r=n(27),o=n(1),i=n(14),a=n(122),u=n(92),l=n(9),c=n(93),s=n(94);o(o.S+o.F*!n(63)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,o,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,m=void 0!==v,y=0,g=s(d);if(m&&(v=r(v,h>2?arguments[2]:void 0,2)),null==g||p==Array&&u(g))for(n=new p(t=l(d.length));t>y;y++)c(n,y,m?v(d[y],y):d[y]);else for(f=g.call(d),n=new p;!(o=f.next()).done;y++)c(n,y,m?a(f,v,[o.value,y],!0):o.value);return n.length=y,n}})},function(e,t,n){"use strict";var r=n(1),o=n(93);r(r.S+r.F*n(4)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(1),o=n(20),i=[].join;r(r.P+r.F*(n(53)!=Object||!n(21)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(1),o=n(80),i=n(29),a=n(39),u=n(9),l=[].slice;r(r.P+r.F*n(4)((function(){o&&l.call(o)})),"Array",{slice:function(e,t){var n=u(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return l.call(this,e,t);for(var o=a(e,n),c=a(t,n),s=u(c-o),f=new Array(s),d=0;d<s;d++)f[d]="String"==r?this.charAt(o+d):this[o+d];return f}})},function(e,t,n){"use strict";var r=n(1),o=n(28),i=n(14),a=n(4),u=[].sort,l=[1,2,3];r(r.P+r.F*(a((function(){l.sort(void 0)}))||!a((function(){l.sort(null)}))||!n(21)(u)),"Array",{sort:function(e){return void 0===e?u.call(i(this)):u.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(1),o=n(25)(0),i=n(21)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(246);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(6),o=n(79),i=n(8)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(1),o=n(25)(1);r(r.P+r.F*!n(21)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(25)(2);r(r.P+r.F*!n(21)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(25)(3);r(r.P+r.F*!n(21)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(25)(4);r(r.P+r.F*!n(21)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(123);r(r.P+r.F*!n(21)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(1),o=n(123);r(r.P+r.F*!n(21)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(1),o=n(60)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(21)(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(20),i=n(22),a=n(9),u=[].lastIndexOf,l=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(l||!n(21)(u)),"Array",{lastIndexOf:function(e){if(l)return u.apply(this,arguments)||0;var t=o(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(1);r(r.P,"Array",{copyWithin:n(124)}),n(47)("copyWithin")},function(e,t,n){var r=n(1);r(r.P,"Array",{fill:n(95)}),n(47)("fill")},function(e,t,n){"use strict";var r=n(1),o=n(25)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(47)("find")},function(e,t,n){"use strict";var r=n(1),o=n(25)(6),i="findIndex",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(47)(i)},function(e,t,n){n(48)("Array")},function(e,t,n){var r=n(3),o=n(83),i=n(11).f,a=n(41).f,u=n(90),l=n(64),c=r.RegExp,s=c,f=c.prototype,d=/a/g,p=/a/g,h=new c(d)!==d;if(n(10)&&(!h||n(4)((function(){return p[n(8)("match")]=!1,c(d)!=d||c(p)==p||"/a/i"!=c(d,"i")})))){c=function(e,t){var n=this instanceof c,r=u(e),i=void 0===t;return!n&&r&&e.constructor===c&&i?e:o(h?new s(r&&!i?e.source:e,t):s((r=e instanceof c)?e.source:e,r&&i?l.call(e):t),n?this:f,c)};for(var v=function(e){e in c||i(c,e,{configurable:!0,get:function(){return s[e]},set:function(t){s[e]=t}})},m=a(s),y=0;m.length>y;)v(m[y++]);f.constructor=c,c.prototype=f,n(15)(r,"RegExp",c)}n(48)("RegExp")},function(e,t,n){"use strict";n(127);var r=n(5),o=n(64),i=n(10),a=/./.toString,u=function(e){n(15)(RegExp.prototype,"toString",e,!0)};n(4)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?u((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)})):"toString"!=a.name&&u((function(){return a.call(this)}))},function(e,t,n){"use strict";var r=n(5),o=n(9),i=n(98),a=n(65);n(66)("match",1,(function(e,t,n,u){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=u(n,e,this);if(t.done)return t.value;var l=r(e),c=String(this);if(!l.global)return a(l,c);var s=l.unicode;l.lastIndex=0;for(var f,d=[],p=0;null!==(f=a(l,c));){var h=String(f[0]);d[p]=h,""===h&&(l.lastIndex=i(c,o(l.lastIndex),s)),p++}return 0===p?null:d}]}))},function(e,t,n){"use strict";var r=n(5),o=n(14),i=n(9),a=n(22),u=n(98),l=n(65),c=Math.max,s=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(66)("replace",2,(function(e,t,n,h){return[function(r,o){var i=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),d=String(this),p="function"==typeof t;p||(t=String(t));var m=f.global;if(m){var y=f.unicode;f.lastIndex=0}for(var g=[];;){var b=l(f,d);if(null===b)break;if(g.push(b),!m)break;""===String(b[0])&&(f.lastIndex=u(d,i(f.lastIndex),y))}for(var w,x="",E=0,k=0;k<g.length;k++){b=g[k];for(var S=String(b[0]),O=c(s(a(b.index),d.length),0),_=[],C=1;C<b.length;C++)_.push(void 0===(w=b[C])?w:String(w));var P=b.groups;if(p){var A=[S].concat(_,O,d);void 0!==P&&A.push(P);var N=String(t.apply(void 0,A))}else N=v(S,d,O,_,P,t);O>=E&&(x+=d.slice(E,O)+N,E=O+S.length)}return x+d.slice(E)}];function v(e,t,r,i,a,u){var l=r+e.length,c=i.length,s=p;return void 0!==a&&(a=o(a),s=d),n.call(u,s,(function(n,o){var u;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(l);case"<":u=a[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>c){var d=f(s/10);return 0===d?n:d<=c?void 0===i[d-1]?o.charAt(1):i[d-1]+o.charAt(1):n}u=i[s-1]}return void 0===u?"":u}))}}))},function(e,t,n){"use strict";var r=n(5),o=n(113),i=n(65);n(66)("search",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var u=r(e),l=String(this),c=u.lastIndex;o(c,0)||(u.lastIndex=0);var s=i(u,l);return o(u.lastIndex,c)||(u.lastIndex=c),null===s?-1:s.index}]}))},function(e,t,n){"use strict";var r=n(90),o=n(5),i=n(56),a=n(98),u=n(9),l=n(65),c=n(97),s=n(4),f=Math.min,d=[].push,p="length",h=!s((function(){RegExp(4294967295,"y")}));n(66)("split",2,(function(e,t,n,s){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[p]||2!="ab".split(/(?:ab)*/)[p]||4!=".".split(/(.?)(.?)/)[p]||".".split(/()()/)[p]>1||"".split(/.?/)[p]?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,a,u,l=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,h=void 0===t?4294967295:t>>>0,v=new RegExp(e.source,s+"g");(i=c.call(v,o))&&!((a=v.lastIndex)>f&&(l.push(o.slice(f,i.index)),i[p]>1&&i.index<o[p]&&d.apply(l,i.slice(1)),u=i[0][p],f=a,l[p]>=h));)v.lastIndex===i.index&&v.lastIndex++;return f===o[p]?!u&&v.test("")||l.push(""):l.push(o.slice(f)),l[p]>h?l.slice(0,h):l}:"0".split(void 0,0)[p]?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):v.call(String(o),n,r)},function(e,t){var r=s(v,e,this,t,v!==n);if(r.done)return r.value;var c=o(e),d=String(this),p=i(c,RegExp),m=c.unicode,y=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(h?"y":"g"),g=new p(h?c:"^(?:"+c.source+")",y),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===d.length)return null===l(g,d)?[d]:[];for(var w=0,x=0,E=[];x<d.length;){g.lastIndex=h?x:0;var k,S=l(g,h?d:d.slice(x));if(null===S||(k=f(u(g.lastIndex+(h?0:x)),d.length))===w)x=a(d,x,m);else{if(E.push(d.slice(w,x)),E.length===b)return E;for(var O=1;O<=S.length-1;O++)if(E.push(S[O]),E.length===b)return E;x=w=k}}return E.push(d.slice(w)),E}]}))},function(e,t,n){var r=n(3),o=n(99).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,l="process"==n(29)(a);e.exports=function(){var e,t,n,c=function(){var r,o;for(l&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(l)n=function(){a.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve(void 0);n=function(){s.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,d=document.createTextNode("");new i(c).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){"use strict";var r=n(131),o=n(43);e.exports=n(69)("Map",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(131),o=n(43);e.exports=n(69)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,o=n(3),i=n(25)(0),a=n(15),u=n(33),l=n(112),c=n(132),s=n(6),f=n(43),d=n(43),p=!o.ActiveXObject&&"ActiveXObject"in o,h=u.getWeak,v=Object.isExtensible,m=c.ufstore,y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(e){if(s(e)){var t=h(e);return!0===t?m(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(69)("WeakMap",y,g,c,!0,!0);d&&p&&(l((r=c.getConstructor(y,"WeakMap")).prototype,g),u.NEED=!0,i(["delete","has","get","set"],(function(e){var t=b.prototype,n=t[e];a(t,e,(function(t,o){if(s(t)&&!v(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)}))})))},function(e,t,n){"use strict";var r=n(132),o=n(43);n(69)("WeakSet",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(1),o=n(70),i=n(100),a=n(5),u=n(39),l=n(9),c=n(6),s=n(3).ArrayBuffer,f=n(56),d=i.ArrayBuffer,p=i.DataView,h=o.ABV&&s.isView,v=d.prototype.slice,m=o.VIEW;r(r.G+r.W+r.F*(s!==d),{ArrayBuffer:d}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||c(e)&&m in e}}),r(r.P+r.U+r.F*n(4)((function(){return!new d(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(a(this),e);for(var n=a(this).byteLength,r=u(e,n),o=u(void 0===t?n:t,n),i=new(f(this,d))(l(o-r)),c=new p(this),s=new p(i),h=0;r<o;)s.setUint8(h++,c.getUint8(r++));return i}}),n(48)("ArrayBuffer")},function(e,t,n){var r=n(1);r(r.G+r.W+r.F*!n(70).ABV,{DataView:n(100).DataView})},function(e,t,n){n(31)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},function(e,t,n){n(31)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(31)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){var r=n(1),o=n(28),i=n(5),a=(n(3).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(4)((function(){a((function(){}))})),"Reflect",{apply:function(e,t,n){var r=o(e),l=i(n);return a?a(r,t,l):u.call(r,t,l)}})},function(e,t,n){var r=n(1),o=n(40),i=n(28),a=n(5),u=n(6),l=n(4),c=n(114),s=(n(3).Reflect||{}).construct,f=l((function(){function e(){}return!(s((function(){}),[],e)instanceof e)})),d=!l((function(){s((function(){}))}));r(r.S+r.F*(f||d),"Reflect",{construct:function(e,t){i(e),a(t);var n=arguments.length<3?e:i(arguments[2]);if(d&&!f)return s(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var l=n.prototype,p=o(u(l)?l:Object.prototype),h=Function.apply.call(e,p,t);return u(h)?h:p}})},function(e,t,n){var r=n(11),o=n(1),i=n(5),a=n(32);o(o.S+o.F*n(4)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){i(e),t=a(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1),o=n(23).f,i=n(5);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(1),o=n(5),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(121)(i,"Object",(function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},function(e,t,n){var r=n(23),o=n(42),i=n(18),a=n(1),u=n(6),l=n(5);a(a.S,"Reflect",{get:function e(t,n){var a,c,s=arguments.length<3?t:arguments[2];return l(t)===s?t[n]:(a=r.f(t,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:u(c=o(t))?e(c,n,s):void 0}})},function(e,t,n){var r=n(23),o=n(1),i=n(5);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},function(e,t,n){var r=n(1),o=n(42),i=n(5);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(1),o=n(5),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{ownKeys:n(134)})},function(e,t,n){var r=n(1),o=n(5),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(11),o=n(23),i=n(42),a=n(18),u=n(1),l=n(35),c=n(5),s=n(6);u(u.S,"Reflect",{set:function e(t,n,u){var f,d,p=arguments.length<4?t:arguments[3],h=o.f(c(t),n);if(!h){if(s(d=i(t)))return e(d,n,u,p);h=l(0)}if(a(h,"value")){if(!1===h.writable||!s(p))return!1;if(f=o.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(p,n,f)}else r.f(p,n,l(0,u));return!0}return void 0!==h.set&&(h.set.call(p,u),!0)}})},function(e,t,n){var r=n(1),o=n(81);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){n(298),e.exports=n(13).Array.includes},function(e,t,n){"use strict";var r=n(1),o=n(60)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(47)("includes")},function(e,t,n){n(300),e.exports=n(13).String.padStart},function(e,t,n){"use strict";var r=n(1),o=n(135),i=n(68),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){n(302),e.exports=n(13).String.padEnd},function(e,t,n){"use strict";var r=n(1),o=n(135),i=n(68),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){n(304),e.exports=n(76).f("asyncIterator")},function(e,t,n){n(108)("asyncIterator")},function(e,t,n){n(306),e.exports=n(13).Object.getOwnPropertyDescriptors},function(e,t,n){var r=n(1),o=n(134),i=n(20),a=n(23),u=n(93);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),l=a.f,c=o(r),s={},f=0;c.length>f;)void 0!==(n=l(r,t=c[f++]))&&u(s,t,n);return s}})},function(e,t,n){n(308),e.exports=n(13).Object.values},function(e,t,n){var r=n(1),o=n(136)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){n(310),e.exports=n(13).Object.entries},function(e,t,n){var r=n(1),o=n(136)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){"use strict";n(128),n(312),e.exports=n(13).Promise.finally},function(e,t,n){"use strict";var r=n(1),o=n(13),i=n(3),a=n(56),u=n(130);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return u(t,e()).then((function(){return n}))}:e,n?function(n){return u(t,e()).then((function(){throw n}))}:e)}})},function(e,t,n){n(314),n(315),n(316),e.exports=n(13)},function(e,t,n){var r=n(3),o=n(1),i=n(68),a=[].slice,u=/MSIE .\./.test(i),l=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*u,{setTimeout:l(r.setTimeout),setInterval:l(r.setInterval)})},function(e,t,n){var r=n(1),o=n(99);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){for(var r=n(96),o=n(38),i=n(15),a=n(3),u=n(19),l=n(46),c=n(8),s=c("iterator"),f=c("toStringTag"),d=l.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),v=0;v<h.length;v++){var m,y=h[v],g=p[y],b=a[y],w=b&&b.prototype;if(w&&(w[s]||u(w,s,d),w[f]||u(w,f,y),l[y]=d,g))for(m in r)w[m]||i(w,m,r[m],!0)}},function(e,t){!function(t){"use strict";var n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",l="object"==typeof e,c=t.regeneratorRuntime;if(c)l&&(e.exports=c);else{(c=t.regeneratorRuntime=l?e.exports:{}).wrap=v;var s={},f={};f[i]=function(){return this};var d=Object.getPrototypeOf,p=d&&d(d(_([])));p&&p!==n&&r.call(p,i)&&(f=p);var h=b.prototype=y.prototype=Object.create(f);g.prototype=h.constructor=b,b.constructor=g,b[u]=g.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u in e||(e[u]="GeneratorFunction")),e.prototype=Object.create(h),e},c.awrap=function(e){return{__await:e}},w(x.prototype),x.prototype[a]=function(){return this},c.AsyncIterator=x,c.async=function(e,t,n,r){var o=new x(v(e,t,n,r));return c.isGeneratorFunction(t)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},w(h),h[u]="Generator",h[i]=function(){return this},h.toString=function(){return"[object Generator]"},c.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=_,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(u&&l){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),s},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),S(n),s}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:_(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}}}function v(e,t,n,r){var o=t&&t.prototype instanceof y?t:y,i=Object.create(o.prototype),a=new O(r||[]);return i._invoke=function(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return C()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=E(a,n);if(u){if(u===s)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=m(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===s)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function m(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function y(){}function g(){}function b(){}function w(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function x(e){var t;this._invoke=function(n,o){function i(){return new Promise((function(t,i){!function t(n,o,i,a){var u=m(e[n],e,o);if("throw"!==u.type){var l=u.arg,c=l.value;return c&&"object"==typeof c&&r.call(c,"__await")?Promise.resolve(c.__await).then((function(e){t("next",e,i,a)}),(function(e){t("throw",e,i,a)})):Promise.resolve(c).then((function(e){l.value=e,i(l)}),a)}a(u.arg)}(n,o,t,i)}))}return t=t?t.then(i,i):i()}}function E(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method))return s;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=m(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,s;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,s):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,s)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function _(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(137),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,l=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=m.prototype;var b=g.prototype=new y;b.constructor=g,r(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!E.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+_(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(O,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+_(u=e[c],c);l+=C(u,t,n,s,a)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(u=e.next()).done;)l+=C(u=u.value,t,n,s=r+_(u,c++),a);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function A(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function T(){var e=N.current;if(null===e)throw Error(p(321));return e}var j={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)x.call(t,s)&&!E.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(137),i=n(320);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=new Set,l={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,k=60106,S=60107,O=60108,_=60114,C=60109,P=60110,A=60112,N=60113,T=60120,j=60115,M=60116,I=60121,R=60128,L=60129,F=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;E=D("react.element"),k=D("react.portal"),S=D("react.fragment"),O=D("react.strict_mode"),_=D("react.profiler"),C=D("react.provider"),P=D("react.context"),A=D("react.forward_ref"),N=D("react.suspense"),T=D("react.suspense_list"),j=D("react.memo"),M=D("react.lazy"),I=D("react.block"),D("react.scope"),R=D("react.opaque.id"),L=D("react.debug_trace_mode"),F=D("react.offscreen"),U=D("react.legacy_hidden")}var B,z="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}function W(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var $=!1;function q(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=u);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function H(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=q(e.type,!1);case 11:return e=q(e.type.render,!1);case 22:return e=q(e.type._render,!1);case 1:return e=q(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case _:return"Profiler";case O:return"StrictMode";case N:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return G(e.type);case I:return G(e._render);case M:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ce(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ve,me=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ve=ve||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ve.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Ce=null,Pe=null;function Ae(e){if(e=Jr(e)){if("function"!=typeof _e)throw Error(a(280));var t=e.stateNode;t&&(t=eo(t),_e(e.stateNode,e.type,t))}}function Ne(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function Te(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function je(e,t){return e(t)}function Me(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var Re=je,Le=!1,Fe=!1;function Ue(){null===Ce&&null===Pe||(Ie(),Te())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(f)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Be=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(e){Be=!1}function Ve(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var We=!1,$e=null,qe=!1,He=null,Ge={onError:function(e){We=!0,$e=e}};function Ke(e,t,n,r,o,i,a,u,l){We=!1,$e=null,Ve.apply(Ge,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Xe(e){if(Ye(e)!==e)throw Error(a(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Xe(o),e;if(i===r)return Xe(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,ut=null,lt=null,ct=new Map,st=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&(null!==(t=Jr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Xr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==ut&&yt(ut)&&(ut=null),null!==lt&&yt(lt)&&(lt=null),ct.forEach(gt),st.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function xt(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),ct.forEach(t),st.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)mt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},St={},Ot={};function _t(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ot)return St[e]=n[t];return e}f&&(Ot=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=_t("animationend"),Pt=_t("animationiteration"),At=_t("animationstart"),Nt=_t("transitionend"),Tt=new Map,jt=new Map,Mt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),jt.set(r,t),Tt.set(r,o),c(o,[r])}}(0,i.unstable_now)();var Rt=8;function Lt(e){if(0!=(1&e))return Rt=15,1;if(0!=(2&e))return Rt=14,2;if(0!=(4&e))return Rt=13,4;var t=24&e;return 0!==t?(Rt=12,t):0!=(32&e)?(Rt=11,32):0!==(t=192&e)?(Rt=10,t):0!=(256&e)?(Rt=9,256):0!==(t=3584&e)?(Rt=8,t):0!=(4096&e)?(Rt=7,4096):0!==(t=4186112&e)?(Rt=6,t):0!==(t=62914560&e)?(Rt=5,t):67108864&e?(Rt=4,67108864):0!=(134217728&e)?(Rt=3,134217728):0!==(t=805306368&e)?(Rt=2,t):0!=(1073741824&e)?(Rt=1,1073741824):(Rt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return Rt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,u=e.pingedLanes;if(0!==i)r=i,o=Rt=15;else if(0!==(i=134217727&n)){var l=i&~a;0!==l?(r=Lt(l),o=Rt):0!==(u&=i)&&(r=Lt(u),o=Rt)}else 0!==(i=n&~a)?(r=Lt(i),o=Rt):0!==u&&(r=Lt(u),o=Rt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Lt(t),o<=Rt)return t;Rt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Ut(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Dt(10,t):e;case 10:return 0===(e=Bt(192&~t))?Dt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&(0===(e=Bt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/qt|0)|0},$t=Math.log,qt=Math.LN2;var Ht=i.unstable_UserBlockingPriority,Gt=i.unstable_runWithPriority,Kt=!0;function Yt(e,t,n,r){Le||Ie();var o=Xt,i=Le;Le=!0;try{Me(o,e,t,n,r)}finally{(Le=i)||Ue()}}function Qt(e,t,n,r){Gt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=vt(at,e,t,n,r,o),!0;case"dragenter":return ut=vt(ut,e,t,n,r,o),!0;case"mouseover":return lt=vt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ct.set(i,vt(ct.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,st.set(i,vt(st.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Oe(r);if(null!==(o=Xr(o))){var i=Ye(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,cn,sn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),vn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(ln=e.screenX-sn.screenX,cn=e.screenY-sn.screenY):cn=ln=0,sn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),mn=un(vn),yn=un(o({},vn,{dataTransfer:0})),gn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xn=un(o({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function _n(){return On}var Cn=un(o({},pn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=un(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Nn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=un(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),jn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Rn=f&&"TextEvent"in window&&!In,Ln=f&&(!Mn||In&&8<In&&11>=In),Fn=String.fromCharCode(32),Un=!1;function Dn(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1;var Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function $n(e,t,n,r){Ne(r),0<(t=jr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Hn=null;function Gn(e){Sr(e,0)}function Kn(e){if(X(Zr(e)))return e}function Yn(e,t){if("change"===e)return t}var Qn=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;Qn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){qn&&(qn.detachEvent("onpropertychange",tr),Hn=qn=null)}function tr(e){if("value"===e.propertyName&&Kn(Hn)){var t=[];if($n(t,Hn,e,Oe(e)),e=Gn,Le)e(t);else{Le=!0;try{je(e,t)}finally{Le=!1,Ue()}}}}function nr(e,t,n){"focusin"===e?(er(),Hn=n,(qn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Hn)}function or(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,vr=null,mr=null,yr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==hr||hr!==J(r)||("selectionStart"in(r=hr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},mr&&lr(mr,r)||(mr=r,0<(r=jr(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Mt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)jt.set(br[wr],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function kr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,c){if(Ke.apply(this,arguments),We){if(!We)throw Error(a(198));var s=$e;We=!1,$e=null,qe||(qe=!0,He=s)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;kr(o,u,c),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,c=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;kr(o,u,c),i=l}}}if(qe)throw e=He,qe=!1,He=null,e}function Or(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Ar(t,e,2,!1),n.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Cr(e){e[_r]||(e[_r]=!0,u.forEach((function(t){Er.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=to(i),u=e+"__"+(t?"capture":"bubble");a.has(u)||(t&&(o|=4),Ar(i,e,o,t),a.add(u))}function Ar(e,t,n,r){var o=jt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Qt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=Xr(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e(t,n);Fe=!0;try{Re(e,t,n)}finally{Fe=!1,Ue()}}((function(){var r=i,o=Oe(n),a=[];e:{var u=Tt.get(e);if(void 0!==u){var l=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":c="focus",l=gn;break;case"focusout":c="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=An;break;case Ct:case Pt:case At:l=bn;break;case Nt:l=Nn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&(null!=(v=De(h,d))&&s.push(Tr(h,v,p)))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),a.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Xr(c)&&!c[Yr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?Xr(c):null)&&(c!==(f=Ye(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=mn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Pn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:Zr(l),p=null==c?u:Zr(c),(u=new s(v,h+"leave",l,n,o)).target=f,u.relatedTarget=p,v=null,Xr(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,v=s),f=v,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Mr(p))h++;for(p=0,v=d;v;v=Mr(v))p++;for(;0<h-p;)s=Mr(s),h--;for(;0<p-h;)d=Mr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Mr(s),d=Mr(d)}s=null}else s=null;null!==l&&Ir(a,u,l,s,!1),null!==c&&null!==f&&Ir(a,f,c,s,!0)}if("select"===(l=(u=r?Zr(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var m=Yn;else if(Wn(u))if(Qn)m=ir;else{m=rr;var y=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(m=or);switch(m&&(m=m(e,r))?$n(a,m,n,o):(y&&y(e,u,r),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&oe(u,"number",u.value)),y=r?Zr(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(hr=y,vr=r,mr=null);break;case"focusout":mr=vr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,gr(a,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":gr(a,n,o)}var g;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(g=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,zn=!0)),0<(y=jr(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:y}),g?b.data=g:null!==(g=Bn(n))&&(b.data=g))),(g=Rn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Un=!0,Fn);case"textInput":return(e=t.data)===Fn&&Un?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!Mn&&Dn(e,t)?(e=nn(),tn=en=Zt=null,zn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=jr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g))}Sr(a,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=De(e,n))&&r.unshift(Tr(e,i,o)),null!=(i=De(e,t))&&r.push(Tr(e,i,o))),e=e.return}return r}function Mr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ir(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=De(n,i))&&a.unshift(Tr(n,l,u)):o||null!=(l=De(n,i))&&a.push(Tr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Rr(){}var Lr=null,Fr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Dr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,zr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $r(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0;var Hr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Hr,Kr="__reactProps$"+Hr,Yr="__reactContainer$"+Hr,Qr="__reactEvents$"+Hr;function Xr(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=$r(e);null!==e;){if(n=e[Gr])return n;e=$r(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Gr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Qr];return void 0===t&&(t=e[Qr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function io(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function ao(e,t){ro++,no[ro]=e.current,e.current=t}var uo={},lo=oo(uo),co=oo(!1),so=uo;function fo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function po(e){return null!=(e=e.childContextTypes)}function ho(){io(co),io(lo)}function vo(e,t,n){if(lo.current!==uo)throw Error(a(168));ao(lo,t),ao(co,n)}function mo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,G(t)||"Unknown",i));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,so=lo.current,ao(lo,e),ao(co,co.current),!0}function go(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=mo(e,t,so),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(lo),ao(lo,e)):io(co),ao(co,n)}var bo=null,wo=null,xo=i.unstable_runWithPriority,Eo=i.unstable_scheduleCallback,ko=i.unstable_cancelCallback,So=i.unstable_shouldYield,Oo=i.unstable_requestPaint,_o=i.unstable_now,Co=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,Ao=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,To=i.unstable_LowPriority,jo=i.unstable_IdlePriority,Mo={},Io=void 0!==Oo?Oo:function(){},Ro=null,Lo=null,Fo=!1,Uo=_o(),Do=1e4>Uo?_o:function(){return _o()-Uo};function Bo(){switch(Co()){case Po:return 99;case Ao:return 98;case No:return 97;case To:return 96;case jo:return 95;default:throw Error(a(332))}}function zo(e){switch(e){case 99:return Po;case 98:return Ao;case 97:return No;case 96:return To;case 95:return jo;default:throw Error(a(332))}}function Vo(e,t){return e=zo(e),xo(e,t)}function Wo(e,t,n){return e=zo(e),Eo(e,t,n)}function $o(){if(null!==Lo){var e=Lo;Lo=null,ko(e)}qo()}function qo(){if(!Fo&&null!==Ro){Fo=!0;var e=0;try{var t=Ro;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ro=null}catch(t){throw null!==Ro&&(Ro=Ro.slice(e+1)),Eo(Po,$o),t}finally{Fo=!1}}}var Ho=x.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Qo=null,Xo=null;function Jo(){Xo=Qo=Yo=null}function Zo(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ei(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ti(e,t){Yo=e,Xo=Qo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ja=!0),e.firstContext=null)}function ni(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qo){if(null===Yo)throw Error(a(308));Qo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Qo=Qo.next=t;return e._currentValue}var ri=!1;function oi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ai(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;ri=!1;var a=i.firstBaseUpdate,u=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var c=l,s=c.next;c.next=null,null===u?a=s:u.next=s,u=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==a){for(d=i.baseState,u=0,f=s=c=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,v=a;switch(l=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:ri=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,u|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===f&&(c=d),i.baseState=c,i.firstBaseUpdate=s,i.lastBaseUpdate=f,Iu|=u,e.lanes=u,e.memoizedState=d}}function si(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var fi=(new r.Component).refs;function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=il(),o=al(e),i=ai(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),ul(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=il(),o=al(e),i=ai(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),ul(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=il(),r=al(e),o=ai(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),ul(e,r,n)}};function hi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!lr(n,r)||!lr(o,i))}function vi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=ni(i):(o=po(t)?so:lo.current,i=(r=null!=(r=t.contextTypes))?fo(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function mi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function yi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fi,oi(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ni(i):(i=po(t)?so:lo.current,o.context=fo(e,i)),ci(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(di(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pi.enqueueReplaceState(o,o.state,null),ci(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var gi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Dl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Bl(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$l(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=zl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Bl(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case k:return(t=$l(t,e.mode,n)).return=e,t}if(gi(t)||V(t))return(t=zl(t,e.mode,n,null)).return=e,t;wi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case k:return n.key===o?s(e,t,n,r):null}if(gi(n)||V(n))return null!==o?null:f(e,t,n,r,null);wi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(gi(r)||V(r))return f(t,e=e.get(n)||null,r,o,null);wi(t,r)}return null}function v(o,a,u,l){for(var c=null,s=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var y=p(o,f,u[v],l);if(null===y){null===f&&(f=m);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,v),null===s?c=y:s.sibling=y,s=y,f=m}if(v===u.length)return n(o,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],l))&&(a=i(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<u.length;v++)null!==(m=h(f,o,v,u[v],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=i(m,a,v),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(o,e)})),c}function m(o,u,l,c){var s=V(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,v=u,m=u=0,y=null,g=l.next();null!==v&&!g.done;m++,g=l.next()){v.index>m?(y=v,v=null):y=v.sibling;var b=p(o,v,g.value,c);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,m),null===f?s=b:f.sibling=b,f=b,v=y}if(g.done)return n(o,v),s;if(null===v){for(;!g.done;m++,g=l.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,m),null===f?s=g:f.sibling=g,f=g);return s}for(v=r(o,v);!g.done;m++,g=l.next())null!==(g=h(v,o,m,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?m:g.key),u=i(g,u,m),null===f?s=g:f.sibling=g,f=g);return e&&v.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===S&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case E:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===S){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=bi(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===S?((r=zl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Bl(i.type,i.key,i.props,null,e.mode,l)).ref=bi(e,r,i),l.return=e,e=l)}return u(e);case k:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$l(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Wl(i,e.mode,l)).return=e,e=r),u(e);if(gi(i))return v(e,r,i,l);if(V(i))return m(e,r,i,l);if(s&&wi(e,i),void 0===i&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,G(e.type)||"Component"))}return n(e,r)}}var Ei=xi(!0),ki=xi(!1),Si={},Oi=oo(Si),_i=oo(Si),Ci=oo(Si);function Pi(e){if(e===Si)throw Error(a(174));return e}function Ai(e,t){switch(ao(Ci,t),ao(_i,e),ao(Oi,Si),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Oi),ao(Oi,t)}function Ni(){io(Oi),io(_i),io(Ci)}function Ti(e){Pi(Ci.current);var t=Pi(Oi.current),n=he(t,e.type);t!==n&&(ao(_i,e),ao(Oi,n))}function ji(e){_i.current===e&&(io(Oi),io(_i))}var Mi=oo(0);function Ii(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ri=null,Li=null,Fi=!1;function Ui(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Di(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Bi(e){if(Fi){var t=Li;if(t){var n=t;if(!Di(e,t)){if(!(t=Wr(n.nextSibling))||!Di(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(Ri=e);Ui(Ri,n)}Ri=e,Li=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,Ri=e}}function zi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ri=e}function Vi(e){if(e!==Ri)return!1;if(!Fi)return zi(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Dr(t,e.memoizedProps))for(t=Li;t;)Ui(e,t),t=Wr(t.nextSibling);if(zi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Li=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Li=null}}else Li=Ri?Wr(e.stateNode.nextSibling):null;return!0}function Wi(){Li=Ri=null,Fi=!1}var $i=[];function qi(){for(var e=0;e<$i.length;e++)$i[e]._workInProgressVersionPrimary=null;$i.length=0}var Hi=x.ReactCurrentDispatcher,Gi=x.ReactCurrentBatchConfig,Ki=0,Yi=null,Qi=null,Xi=null,Ji=!1,Zi=!1;function ea(){throw Error(a(321))}function ta(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function na(e,t,n,r,o,i){if(Ki=i,Yi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Hi.current=null===e||null===e.memoizedState?Pa:Aa,e=n(r,o),Zi){i=0;do{if(Zi=!1,!(25>i))throw Error(a(301));i+=1,Xi=Qi=null,t.updateQueue=null,Hi.current=Na,e=n(r,o)}while(Zi)}if(Hi.current=Ca,t=null!==Qi&&null!==Qi.next,Ki=0,Xi=Qi=Yi=null,Ji=!1,t)throw Error(a(300));return e}function ra(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xi?Yi.memoizedState=Xi=e:Xi=Xi.next=e,Xi}function oa(){if(null===Qi){var e=Yi.alternate;e=null!==e?e.memoizedState:null}else e=Qi.next;var t=null===Xi?Yi.memoizedState:Xi.next;if(null!==t)Xi=t,Qi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Qi=e).memoizedState,baseState:Qi.baseState,baseQueue:Qi.baseQueue,queue:Qi.queue,next:null},null===Xi?Yi.memoizedState=Xi=e:Xi=Xi.next=e}return Xi}function ia(e,t){return"function"==typeof t?t(e):t}function aa(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Qi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,c=o;do{var s=c.lane;if((Ki&s)===s)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,Yi.lanes|=s,Iu|=s}c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=u,ar(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);ar(i,t.memoizedState)||(ja=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function la(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ki&e)===e)&&(t._workInProgressVersionPrimary=r,$i.push(t))),e)return n(t._source);throw $i.push(t),Error(a(350))}function ca(e,t,n,r){var o=_u;if(null===o)throw Error(a(349));var i=t._getVersion,u=i(t._source),l=Hi.current,c=l.useState((function(){return la(o,t,n)})),s=c[1],f=c[0];c=Xi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var m=Yi;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=i(t._source);if(!ar(u,e)){e=n(t._source),ar(f,e)||(s(e),e=al(m),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Wt(a),c=1<<l;r[l]|=e,a&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=al(m);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(v,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ia,lastRenderedState:f}).dispatch=s=_a.bind(null,Yi,e),c.queue=e,c.baseQueue=null,f=la(o,t,n),c.memoizedState=c.baseState=f),f}function sa(e,t,n){return ca(oa(),e,t,n)}function fa(e){var t=ra();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ia,lastRenderedState:e}).dispatch=_a.bind(null,Yi,e),[t.memoizedState,e]}function da(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Yi.updateQueue)?(t={lastEffect:null},Yi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},ra().memoizedState=e}function ha(){return oa().memoizedState}function va(e,t,n,r){var o=ra();Yi.flags|=e,o.memoizedState=da(1|t,n,void 0,void 0===r?null:r)}function ma(e,t,n,r){var o=oa();r=void 0===r?null:r;var i=void 0;if(null!==Qi){var a=Qi.memoizedState;if(i=a.destroy,null!==r&&ta(r,a.deps))return void da(t,n,i,r)}Yi.flags|=e,o.memoizedState=da(1|t,n,i,r)}function ya(e,t){return va(516,4,e,t)}function ga(e,t){return ma(516,4,e,t)}function ba(e,t){return ma(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xa(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,wa.bind(null,t,e),n)}function Ea(){}function ka(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Sa(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=Bo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Gi.transition;Gi.transition=1;try{e(!1),t()}finally{Gi.transition=n}}))}function _a(e,t,n){var r=il(),o=al(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Yi||null!==a&&a===Yi)Zi=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=a(u,n);if(i.eagerReducer=a,i.eagerState=l,ar(l,u))return}catch(e){}ul(e,o,r)}}var Ca={readContext:ni,useCallback:ea,useContext:ea,useEffect:ea,useImperativeHandle:ea,useLayoutEffect:ea,useMemo:ea,useReducer:ea,useRef:ea,useState:ea,useDebugValue:ea,useDeferredValue:ea,useTransition:ea,useMutableSource:ea,useOpaqueIdentifier:ea,unstable_isNewReconciler:!1},Pa={readContext:ni,useCallback:function(e,t){return ra().memoizedState=[e,void 0===t?null:t],e},useContext:ni,useEffect:ya,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return va(4,2,e,t)},useMemo:function(e,t){var n=ra();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ra();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_a.bind(null,Yi,e),[r.memoizedState,e]},useRef:pa,useState:fa,useDebugValue:Ea,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return ya((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return pa(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ra();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:R,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&Yi.mode)&&(Yi.flags|=516,da(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return fa(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Aa={readContext:ni,useCallback:ka,useContext:ni,useEffect:ga,useImperativeHandle:xa,useLayoutEffect:ba,useMemo:Sa,useReducer:aa,useRef:ha,useState:function(){return aa(ia)},useDebugValue:Ea,useDeferredValue:function(e){var t=aa(ia),n=t[0],r=t[1];return ga((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=aa(ia)[0];return[ha().current,e]},useMutableSource:sa,useOpaqueIdentifier:function(){return aa(ia)[0]},unstable_isNewReconciler:!1},Na={readContext:ni,useCallback:ka,useContext:ni,useEffect:ga,useImperativeHandle:xa,useLayoutEffect:ba,useMemo:Sa,useReducer:ua,useRef:ha,useState:function(){return ua(ia)},useDebugValue:Ea,useDeferredValue:function(e){var t=ua(ia),n=t[0],r=t[1];return ga((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ua(ia)[0];return[ha().current,e]},useMutableSource:sa,useOpaqueIdentifier:function(){return ua(ia)[0]},unstable_isNewReconciler:!1},Ta=x.ReactCurrentOwner,ja=!1;function Ma(e,t,n,r){t.child=null===e?ki(t,null,n,r):Ei(t,e.child,n,r)}function Ia(e,t,n,r,o){n=n.render;var i=t.ref;return ti(t,o),r=na(e,t,n,r,i,o),null===e||ja?(t.flags|=1,Ma(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Ra(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Ul(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bl(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,La(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?eu(e,t,i):(t.flags|=1,(e=Dl(a,r)).ref=t.ref,e.return=t,t.child=e)}function La(e,t,n,r,o,i){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(ja=!1,0==(i&o))return t.lanes=e.lanes,eu(e,t,i);0!=(16384&e.flags)&&(ja=!0)}return Da(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vl(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vl(t,e),null;t.memoizedState={baseLanes:0},vl(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,vl(t,r);return Ma(e,t,o,n),t.child}function Ua(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Da(e,t,n,r,o){var i=po(n)?so:lo.current;return i=fo(t,i),ti(t,o),n=na(e,t,n,r,i,o),null===e||ja?(t.flags|=1,Ma(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Ba(e,t,n,r,o){if(po(n)){var i=!0;yo(t)}else i=!1;if(ti(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vi(t,n,r),yi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=ni(c):c=fo(t,c=po(n)?so:lo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&mi(t,a,r,c),ri=!1;var d=t.memoizedState;a.state=d,ci(t,r,a,o),l=t.memoizedState,u!==r||d!==l||co.current||ri?("function"==typeof s&&(di(t,n,s,r),l=t.memoizedState),(u=ri||hi(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ii(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:Go(t.type,u),a.props=c,f=t.pendingProps,d=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=ni(l):l=fo(t,l=po(n)?so:lo.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&mi(t,a,r,l),ri=!1,d=t.memoizedState,a.state=d,ci(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||co.current||ri?("function"==typeof p&&(di(t,n,p,r),h=t.memoizedState),(c=ri||hi(t,n,c,r,d,h,l))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return za(e,t,n,r,i,o)}function za(e,t,n,r,o,i){Ua(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&go(t,n,!1),eu(e,t,i);r=t.stateNode,Ta.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ei(t,e.child,null,i),t.child=Ei(t,null,u,i)):Ma(e,t,u,i),t.memoizedState=r.state,o&&go(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),Ai(e,t.containerInfo)}var Wa,$a,qa,Ha={dehydrated:null,retryLane:0};function Ga(e,t,n){var r,o=t.pendingProps,i=Mi.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),ao(Mi,1&i),null===e?(void 0!==o.fallback&&Bi(t),e=o.children,i=o.fallback,a?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ha,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ha,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=Qa(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ha,o):(n=Ya(e,t,o.children,n),t.memoizedState=null,n))}function Ka(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,o,0,null),n=zl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ya(e,t,n,r){var o=e.child;return e=o.sibling,n=Dl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Qa(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var u={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=u,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Dl(a,u),null!==e?r=Dl(e,r):(r=zl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Xa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ei(e.return,t)}function Ja(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Za(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ma(e,t,r.children,n),0!=(2&(r=Mi.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Xa(e,n);else if(19===e.tag)Xa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ao(Mi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ii(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ja(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ii(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ja(t,!0,n,null,i,t.lastEffect);break;case"together":Ja(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Iu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Dl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Dl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function tu(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Ni(),io(co),io(lo),qi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:ji(t);var i=Pi(Ci.current);if(n=t.type,null!==e&&null!=t.stateNode)$a(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Pi(Oi.current),Vi(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Gr]=t,r[Kr]=u,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Or(xr[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,u),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Or("invalid",r);break;case"textarea":le(r,u),Or("invalid",r)}for(var c in ke(n,u),e=null,u)u.hasOwnProperty(c)&&(i=u[c],"children"===c?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(c)&&null!=i&&"onScroll"===c&&Or("scroll",r));switch(n){case"input":Q(r),re(r,u,!0);break;case"textarea":Q(r),se(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Rr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Gr]=t,e[Kr]=r,Wa(e,t),t.stateNode=e,c=Se(n,r),n){case"dialog":Or("cancel",e),Or("close",e),i=r;break;case"iframe":case"object":case"embed":Or("load",e),i=r;break;case"video":case"audio":for(i=0;i<xr.length;i++)Or(xr[i],e);i=r;break;case"source":Or("error",e),i=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),i=r;break;case"details":Or("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Or("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":le(e,r),i=ue(e,r),Or("invalid",e);break;default:i=r}ke(n,i);var s=i;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?xe(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Or("scroll",e):null!=f&&w(e,u,f,c))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ae(e,!!r.multiple,u,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Rr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Pi(Ci.current),Pi(Oi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return io(Mi),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Mi.current)?0===Tu&&(Tu=3):(0!==Tu&&3!==Tu||(Tu=4),null===_u||0==(134217727&Iu)&&0==(134217727&Ru)||fl(_u,Pu))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Cr(t.stateNode.containerInfo),null;case 10:return Zo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(io(Mi),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(c=r.rendering))if(u)tu(r,!1);else{if(0!==Tu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ii(e))){for(t.flags|=64,tu(r,!1),null!==(u=c.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(c=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=c.childLanes,u.lanes=c.lanes,u.child=c.child,u.memoizedProps=c.memoizedProps,u.memoizedState=c.memoizedState,u.updateQueue=c.updateQueue,u.type=c.type,e=c.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ao(Mi,1&Mi.current|2),t.child}e=e.sibling}null!==r.tail&&Do()>Du&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Ii(c))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),tu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Do()-r.renderingStartTime>Du&&1073741824!==n&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Do(),n.sibling=null,t=Mi.current,ao(Mi,u?1&t|2:1&t),n):null;case 23:case 24:return ml(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ru(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),io(co),io(lo),qi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return ji(e),null;case 13:return io(Mi),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(Mi),null;case 4:return Ni(),null;case 10:return Zo(e),null;case 23:case 24:return ml(),null;default:return null}}function ou(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function iu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Pi(Oi.current);var a,u=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),u=[];break;case"option":i=ie(e,i),r=ie(e,r),u=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":i=ue(e,i),r=ue(e,r),u=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Rr)}for(f in ke(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var c=i[f];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(a in c)!c.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&c[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(u||(u=[]),u.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(u=u||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(u=u||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Or("scroll",e),u||c===s||(u=[])):"object"==typeof s&&null!==s&&s.$$typeof===R?s.toString():(u=u||[]).push(f,s))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},qa=function(e,t,n,r){n!==r&&(t.flags|=4)};var au="function"==typeof WeakMap?WeakMap:Map;function uu(e,t,n){(n=ai(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,$u=r),iu(0,t)},n}function lu(e,t,n){(n=ai(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return iu(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this),iu(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var cu="function"==typeof WeakSet?WeakSet:Set;function su(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ml(e,t)}else t.current=null}function fu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function du(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nl(n,e),Al(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&si(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}si(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function pu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nl(t,n);else{r=t;try{o()}catch(e){Ml(r,e)}}n=n.next}while(n!==e)}break;case 1:if(su(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ml(t,e)}break;case 5:su(t);break;case 4:gu(e,t)}}function vu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function mu(e){return 5===e.tag||3===e.tag||4===e.tag}function yu(e){e:{for(var t=e.return;null!==t;){if(mu(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||mu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=Rr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function gu(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,c=l;;)if(hu(u,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?xe(n,l):"dangerouslySetInnerHTML"===u?me(n,l):"children"===u?ye(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Uu=Do(),pu(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void pu(t,null!==t.memoizedState)}throw Error(a(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cu),t.forEach((function(t){var r=Rl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function xu(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Eu=Math.ceil,ku=x.ReactCurrentDispatcher,Su=x.ReactCurrentOwner,Ou=0,_u=null,Cu=null,Pu=0,Au=0,Nu=oo(0),Tu=0,ju=null,Mu=0,Iu=0,Ru=0,Lu=0,Fu=null,Uu=0,Du=1/0;function Bu(){Du=Do()+500}var zu,Vu=null,Wu=!1,$u=null,qu=null,Hu=!1,Gu=null,Ku=90,Yu=[],Qu=[],Xu=null,Ju=0,Zu=null,el=-1,tl=0,nl=0,rl=null,ol=!1;function il(){return 0!=(48&Ou)?Do():-1!==el?el:el=Do()}function al(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bo()?1:2;if(0===tl&&(tl=Mu),0!==Ho.transition){0!==nl&&(nl=null!==Fu?Fu.pendingLanes:0),e=tl;var t=4186112&~nl;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!=(4&Ou)&&98===e?e=Dt(12,tl):e=Dt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tl),e}function ul(e,t,n){if(50<Ju)throw Ju=0,Zu=null,Error(a(185));if(null===(e=ll(e,t)))return null;Vt(e,t,n),e===_u&&(Ru|=t,4===Tu&&fl(e,Pu));var r=Bo();1===t?0!=(8&Ou)&&0==(48&Ou)?dl(e):(cl(e,n),0===Ou&&(Bu(),$o())):(0==(4&Ou)||98!==r&&99!==r||(null===Xu?Xu=new Set([e]):Xu.add(e)),cl(e,n)),Fu=e}function ll(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Wt(u),c=1<<l,s=i[l];if(-1===s){if(0==(c&r)||0!=(c&o)){s=t,Lt(c);var f=Rt;i[l]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);u&=~c}if(r=Ft(e,e===_u?Pu:0),t=Rt,0===r)null!==n&&(n!==Mo&&ko(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Mo&&ko(n)}15===t?(n=dl.bind(null,e),null===Ro?(Ro=[n],Lo=Eo(Po,qo)):Ro.push(n),n=Mo):14===t?n=Wo(99,dl.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),sl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function sl(e){if(el=-1,nl=tl=0,0!=(48&Ou))throw Error(a(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=Ft(e,e===_u?Pu:0);if(0===n)return null;var r=n,o=Ou;Ou|=16;var i=bl();for(_u===e&&Pu===r||(Bu(),yl(e,r));;)try{El();break}catch(t){gl(e,t)}if(Jo(),ku.current=i,Ou=o,null!==Cu?r=0:(_u=null,Pu=0,r=Tu),0!=(Mu&Ru))yl(e,0);else if(0!==r){if(2===r&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Ut(e))&&(r=wl(e,n))),1===r)throw t=ju,yl(e,0),fl(e,n),cl(e,Do()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ol(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=Uu+500-Do())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){il(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Br(Ol.bind(null,e),r);break}Ol(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Wt(n);i=1<<u,(u=r[u])>o&&(o=u),n&=~i}if(n=o,10<(n=(120>(n=Do()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Eu(n/1960))-n)){e.timeoutHandle=Br(Ol.bind(null,e),n);break}Ol(e);break;case 5:Ol(e);break;default:throw Error(a(329))}}return cl(e,Do()),e.callbackNode===t?sl.bind(null,e):null}function fl(e,t){for(t&=~Lu,t&=~Ru,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function dl(e){if(0!=(48&Ou))throw Error(a(327));if(Pl(),e===_u&&0!=(e.expiredLanes&Pu)){var t=Pu,n=wl(e,t);0!=(Mu&Ru)&&(n=wl(e,t=Ft(e,t)))}else n=wl(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Ut(e))&&(n=wl(e,t))),1===n)throw n=ju,yl(e,0),fl(e,t),cl(e,Do()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ol(e),cl(e,Do()),null}function pl(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Bu(),$o())}}function hl(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&(Bu(),$o())}}function vl(e,t){ao(Nu,Au),Au|=t,Mu|=t}function ml(){Au=Nu.current,io(Nu)}function yl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,zr(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Ni(),io(co),io(lo),qi();break;case 5:ji(r);break;case 4:Ni();break;case 13:case 19:io(Mi);break;case 10:Zo(r);break;case 23:case 24:ml()}n=n.return}_u=e,Cu=Dl(e.current,null),Pu=Au=Mu=t,Tu=0,ju=null,Lu=Ru=Iu=0}function gl(e,t){for(;;){var n=Cu;try{if(Jo(),Hi.current=Ca,Ji){for(var r=Yi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(Ki=0,Xi=Qi=Yi=null,Zi=!1,Su.current=null,null===n||null===n.return){Tu=1,ju=t,Cu=null;break}e:{var i=e,a=n.return,u=n,l=t;if(t=Pu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&u.mode)){var s=u.alternate;s?(u.updateQueue=s.updateQueue,u.memoizedState=s.memoizedState,u.lanes=s.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Mi.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var y=new Set;y.add(c),d.updateQueue=y}else m.add(c);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var g=ai(-1,1);g.tag=2,ui(u,g)}u.lanes|=1;break e}l=void 0,u=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new au,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(u)){l.add(u);var w=Il.bind(null,i,c,u);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((G(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tu&&(Tu=2),l=ou(l,u),d=a;do{switch(d.tag){case 3:i=l,d.flags|=4096,t&=-t,d.lanes|=t,li(d,uu(0,i,t));break e;case 1:i=l;var x=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof x.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===qu||!qu.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,li(d,lu(d,i,t));break e}}d=d.return}while(null!==d)}Sl(n)}catch(e){t=e,Cu===n&&null!==n&&(Cu=n=n.return);continue}break}}function bl(){var e=ku.current;return ku.current=Ca,null===e?Ca:e}function wl(e,t){var n=Ou;Ou|=16;var r=bl();for(_u===e&&Pu===t||yl(e,t);;)try{xl();break}catch(t){gl(e,t)}if(Jo(),Ou=n,ku.current=r,null!==Cu)throw Error(a(261));return _u=null,Pu=0,Tu}function xl(){for(;null!==Cu;)kl(Cu)}function El(){for(;null!==Cu&&!So();)kl(Cu)}function kl(e){var t=zu(e.alternate,e,Au);e.memoizedProps=e.pendingProps,null===t?Sl(e):Cu=t,Su.current=null}function Sl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=nu(n,t,Au)))return void(Cu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Au)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ru(t)))return n.flags&=2047,void(Cu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Cu=t);Cu=t=e}while(null!==t);0===Tu&&(Tu=5)}function Ol(e){var t=Bo();return Vo(99,_l.bind(null,e,t)),null}function _l(e,t){do{Pl()}while(null!==Gu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<i;){var c=31-Wt(i),s=1<<c;o[c]=0,u[c]=-1,l[c]=-1,i&=~s}if(null!==Xu&&0==(24&r)&&Xu.has(e)&&Xu.delete(e),e===_u&&(Cu=_u=null,Pu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ou,Ou|=32,Su.current=null,Lr=Kt,dr(u=fr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(s=l.getSelection&&l.getSelection())&&0!==s.rangeCount){l=s.anchorNode,i=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,v=0,m=u,y=null;t:for(;;){for(var g;m!==l||0!==i&&3!==m.nodeType||(d=f+i),m!==c||0!==s&&3!==m.nodeType||(p=f+s),3===m.nodeType&&(f+=m.nodeValue.length),null!==(g=m.firstChild);)y=m,m=g;for(;;){if(m===u)break t;if(y===l&&++h===i&&(d=f),y===c&&++v===s&&(p=f),null!==(g=m.nextSibling))break;y=(m=y).parentNode}m=g}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:u,selectionRange:l},Kt=!1,rl=null,ol=!1,Vu=r;do{try{Cl()}catch(e){if(null===Vu)throw Error(a(330));Ml(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);rl=null,Vu=r;do{try{for(u=e;null!==Vu;){var b=Vu.flags;if(16&b&&ye(Vu.stateNode,""),128&b){var w=Vu.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:yu(Vu),Vu.flags&=-3;break;case 6:yu(Vu),Vu.flags&=-3,bu(Vu.alternate,Vu);break;case 1024:Vu.flags&=-1025;break;case 1028:Vu.flags&=-1025,bu(Vu.alternate,Vu);break;case 4:bu(Vu.alternate,Vu);break;case 8:gu(u,l=Vu);var E=l.alternate;vu(l),null!==E&&vu(E)}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Ml(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);if(x=Fr,w=fr(),b=x.focusedElem,u=x.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dr(b)&&(w=u.start,void 0===(x=u.end)&&(x=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(x,b.value.length)):(x=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),l=b.textContent.length,E=Math.min(u.start,l),u=void 0===u.end?E:Math.min(u.end,l),!x.extend&&E>u&&(l=u,u=E,E=l),l=sr(b,E),i=sr(b,u),l&&i&&(1!==x.rangeCount||x.anchorNode!==l.node||x.anchorOffset!==l.offset||x.focusNode!==i.node||x.focusOffset!==i.offset)&&((w=w.createRange()).setStart(l.node,l.offset),x.removeAllRanges(),E>u?(x.addRange(w),x.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),x.addRange(w))))),w=[];for(x=b;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(x=w[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Kt=!!Lr,Fr=Lr=null,e.current=n,Vu=r;do{try{for(b=e;null!==Vu;){var k=Vu.flags;if(36&k&&du(b,Vu.alternate,Vu),128&k){w=void 0;var S=Vu.ref;if(null!==S){var O=Vu.stateNode;switch(Vu.tag){case 5:w=O;break;default:w=O}"function"==typeof S?S(w):S.current=w}}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Ml(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);Vu=null,Io(),Ou=o}else e.current=n;if(Hu)Hu=!1,Gu=e,Ku=t;else for(Vu=r;null!==Vu;)t=Vu.nextEffect,Vu.nextEffect=null,8&Vu.flags&&((k=Vu).sibling=null,k.stateNode=null),Vu=t;if(0===(r=e.pendingLanes)&&(qu=null),1===r?e===Zu?Ju++:(Ju=0,Zu=e):Ju=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cl(e,Do()),Wu)throw Wu=!1,e=$u,$u=null,e;return 0!=(8&Ou)||$o(),null}function Cl(){for(;null!==Vu;){var e=Vu.alternate;ol||null===rl||(0!=(8&Vu.flags)?Ze(Vu,rl)&&(ol=!0):13===Vu.tag&&xu(e,Vu)&&Ze(Vu,rl)&&(ol=!0));var t=Vu.flags;0!=(256&t)&&fu(e,Vu),0==(512&t)||Hu||(Hu=!0,Wo(97,(function(){return Pl(),null}))),Vu=Vu.nextEffect}}function Pl(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Vo(e,Tl)}return!1}function Al(e,t){Yu.push(t,e),Hu||(Hu=!0,Wo(97,(function(){return Pl(),null})))}function Nl(e,t){Qu.push(t,e),Hu||(Hu=!0,Wo(97,(function(){return Pl(),null})))}function Tl(){if(null===Gu)return!1;var e=Gu;if(Gu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;Ou|=32;var n=Qu;Qu=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===i)throw Error(a(330));Ml(i,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Ml(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ou=t,$o(),!0}function jl(e,t,n){ui(e,t=uu(0,t=ou(n,t),1)),t=il(),null!==(e=ll(e,1))&&(Vt(e,1,t),cl(e,t))}function Ml(e,t){if(3===e.tag)jl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){jl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){var o=lu(n,e=ou(t,e),1);if(ui(n,o),o=il(),null!==(n=ll(n,1)))Vt(n,1,o),cl(n,o);else if("function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Il(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=il(),e.pingedLanes|=e.suspendedLanes&n,_u===e&&(Pu&n)===n&&(4===Tu||3===Tu&&(62914560&Pu)===Pu&&500>Do()-Uu?yl(e,0):Lu|=n),cl(e,t)}function Rl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bo()?1:2:(0===tl&&(tl=Mu),0===(t=Bt(62914560&~tl))&&(t=4194304))),n=il(),null!==(e=ll(e,t))&&(Vt(e,t,n),cl(e,n))}function Ll(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new Ll(e,t,n,r)}function Ul(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bl(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Ul(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case S:return zl(n.children,o,i,t);case L:u=8,o|=16;break;case O:u=8,o|=1;break;case _:return(e=Fl(12,n,t,8|o)).elementType=_,e.type=_,e.lanes=i,e;case N:return(e=Fl(13,n,t,o)).type=N,e.elementType=N,e.lanes=i,e;case T:return(e=Fl(19,n,t,o)).elementType=T,e.lanes=i,e;case F:return Vl(n,o,i,t);case U:return(e=Fl(24,n,t,o)).elementType=U,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case P:u=9;break e;case A:u=11;break e;case j:u=14;break e;case M:u=16,r=null;break e;case I:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function zl(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=F,e.lanes=n,e}function Wl(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function $l(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ql(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Hl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gl(e,t,n,r){var o=t.current,i=il(),u=al(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(po(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(po(c)){n=mo(n,c,l);break e}}n=l}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ai(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),ul(o,u,i),u}function Kl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ql(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Xl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new ql(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oi(t),e[Yr]=n.current,Cr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Kl(a);u.call(e)}}Gl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(a);l.call(e)}}hl((function(){Gl(t,a,e,o)}))}return Kl(a)}function ec(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return Hl(e,t,null,n)}zu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)ja=!0;else{if(0==(n&r)){switch(ja=!1,t.tag){case 3:Va(t),Wi();break;case 5:Ti(t);break;case 1:po(t.type)&&yo(t);break;case 4:Ai(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;ao(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ga(e,t,n):(ao(Mi,1&Mi.current),null!==(t=eu(e,t,n))?t.sibling:null);ao(Mi,1&Mi.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Za(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),ao(Mi,Mi.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return eu(e,t,n)}ja=0!=(16384&e.flags)}else ja=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,lo.current),ti(t,n),o=na(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var i=!0;yo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oi(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&di(t,r,u,e),o.updater=pi,t.stateNode=o,o._reactInternals=t,yi(t,r,e,n),t=za(null,t,r,!0,i,n)}else t.tag=0,Ma(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Ul(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===j)return 14}return 2}(o),e=Go(o,e),i){case 0:t=Da(null,t,o,e,n);break e;case 1:t=Ba(null,t,o,e,n);break e;case 11:t=Ia(null,t,o,e,n);break e;case 14:t=Ra(null,t,o,Go(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ii(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===o)Wi(),t=eu(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Li=Wr(t.stateNode.containerInfo.firstChild),Ri=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],$i.push(i);for(n=ki(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ma(e,t,r,n),Wi();t=t.child}return t;case 5:return Ti(t),null===e&&Bi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Dr(r,o)?u=null:null!==i&&Dr(r,i)&&(t.flags|=16),Ua(e,t),Ma(e,t,u,n),t.child;case 6:return null===e&&Bi(t),null;case 13:return Ga(e,t,n);case 4:return Ai(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ei(t,null,r,n):Ma(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ia(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Ma(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ma(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(ao(Ko,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0===(i=ar(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!co.current){t=eu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=ai(-1,n&-n)).tag=2,ui(l,s)),l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),ei(l.return,n),c.lanes|=n;break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ma(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ti(t,n),r=r(o=ni(o,i.unstable_observedBits)),t.flags|=1,Ma(e,t,r,n),t.child;case 14:return i=Go(o=t.type,t.pendingProps),Ra(e,t,o,i=Go(o.type,i),r,n);case 15:return La(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,yo(t)):e=!1,ti(t,n),vi(t,r,o),yi(t,r,o,n),za(null,t,r,!0,e,n);case 19:return Za(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Xl.prototype.render=function(e){Gl(e,this._internalRoot,null,null)},Xl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gl(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ul(e,4,il()),Ql(e,4))},tt=function(e){13===e.tag&&(ul(e,67108864,il()),Ql(e,67108864))},nt=function(e){if(13===e.tag){var t=il(),n=al(e);ul(e,n,t),Ql(e,n)}},rt=function(e,t){return t()},_e=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(a(90));X(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},je=pl,Me=function(e,t,n,r,o){var i=Ou;Ou|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ou=i)&&(Bu(),$o())}},Ie=function(){0==(49&Ou)&&(function(){if(null!==Xu){var e=Xu;Xu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cl(e,Do())}))}$o()}(),Pl())},Re=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&(Bu(),$o())}};var tc={Events:[Jr,Zr,eo,Ne,Te,Pl,{current:!1}]},nc={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{bo=oc.inject(rc),wo=oc}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=ec,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ou;if(0!=(48&n))return e(t);Ou|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ou=n,$o()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return Zl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return Zl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(hl((function(){Zl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return ec(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Zl(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(321)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a;if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var l=Date,c=l.now();t.unstable_now=function(){return l.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,f=null,d=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},i=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,y=null,g=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,E=x.port2;x.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();w=e+b;try{y(!0,e)?E.postMessage(null):(m=!1,y=null)}catch(e){throw E.postMessage(null),e}}else m=!1},r=function(e){y=e,m||(m=!0,E.postMessage(null))},o=function(e,n){g=p((function(){e(t.unstable_now())}),n)},i=function(){h(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>_(a,n))void 0!==l&&0>_(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>_(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],A=1,N=null,T=3,j=!1,M=!1,I=!1;function R(e){for(var t=S(P);null!==t;){if(null===t.callback)O(P);else{if(!(t.startTime<=e))break;O(P),t.sortIndex=t.expirationTime,k(C,t)}t=S(P)}}function L(e){if(I=!1,R(e),!M)if(null!==S(C))M=!0,r(F);else{var t=S(P);null!==t&&o(L,t.startTime-e)}}function F(e,n){M=!1,I&&(I=!1,i()),j=!0;var r=T;try{for(R(n),N=S(C);null!==N&&(!(N.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=N.callback;if("function"==typeof a){N.callback=null,T=N.priorityLevel;var u=a(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?N.callback=u:N===S(C)&&O(C),R(n)}else O(C);N=S(C)}if(null!==N)var l=!0;else{var c=S(P);null!==c&&o(L,c.startTime-n),l=!1}return l}finally{N=null,T=r,j=!1}}var U=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||j||(M=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?u+a:u:a=u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:A++,callback:n,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>u?(e.sortIndex=a,k(P,e),null===S(C)&&e===S(P)&&(I?i():I=!0,o(L,a-u))):(e.sortIndex=l,k(C,e),M||j||(M=!0,r(F))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},function(e,t,n){var r=n(71),o=n(323);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(34),o=n.n(r)()(!0);o.push([e.i,"@import url(https://fonts.googleapis.com/css?family=DM+Sans:regular,medium,bold);"]),o.push([e.i,'body {\n  margin: 0;\n  padding: 0;\n  font-family: "DM Sans", "Roboto", "Oxygen", "Ubuntu", "Droid Sans",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n',"",{version:3,sources:["webpack://src/index.css"],names:[],mappings:"AAGA;EACE,SAAS;EACT,UAAU;EACV;cACY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:['@import url(https://fonts.googleapis.com/css?family=DM+Sans:regular,medium,bold);\n\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "DM Sans", "Roboto", "Oxygen", "Ubuntu", "Droid Sans",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n'],sourceRoot:""}]),t.default=o},function(e,t,n){"use strict";var r=n(325);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case m:case c:return e;default:return t}}case i:return t}}}function k(e){return E(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return k(e)||E(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===m},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===l},t.isStrictMode=function(e){return E(e)===u},t.isSuspense=function(e){return E(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===g)},t.typeOf=E},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(329);e.exports=function(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,t){var n=t.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n})))}(t)}catch(e){return r(t)}}},function(e,t){function n(e){this.message=e}n.prototype=new Error,n.prototype.name="InvalidCharacterError",e.exports="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new n("'atob' failed: The string to be decoded is not correctly encoded.");for(var r,o,i=0,a=0,u="";o=t.charAt(a++);~o&&(r=i%4?64*r+o:o,i++%4)?u+=String.fromCharCode(255&r>>(-2*i&6)):0)o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o);return u}},function(e,t,n){"use strict";var r=n(17),o=n(138),i=n(331),a=n(145);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(n(141));l.Axios=i,l.create=function(e){return u(a(l.defaults,e))},l.Cancel=n(146),l.CancelToken=n(344),l.isCancel=n(140),l.all=function(e){return Promise.all(e)},l.spread=n(345),l.isAxiosError=n(346),e.exports=l,e.exports.default=l},function(e,t,n){"use strict";var r=n(17),o=n(139),i=n(332),a=n(333),u=n(145);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,r){return this.request(u(r||{},{method:e,url:t,data:n}))}})),e.exports=l},function(e,t,n){"use strict";var r=n(17);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(17),o=n(334),i=n(140),a=n(141);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(17);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(17);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(144);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(17);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(340),o=n(341);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(17),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(17);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(146);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},function(e,t,n){var r=n(71),o=n(348);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(34),o=n.n(r)()(!0);o.push([e.i,".jumbotron {\n\tborder-radius: 10px;\n}\n\n.full-height {\n\theight: 100vh !important;\n}","",{version:3,sources:["webpack://src/components/auth/Login/Login.css"],names:[],mappings:"AAAA;CACC,mBAAmB;AACpB;;AAEA;CACC,wBAAwB;AACzB",sourcesContent:[".jumbotron {\n\tborder-radius: 10px;\n}\n\n.full-height {\n\theight: 100vh !important;\n}"],sourceRoot:""}]),t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,n,r,o,i,a){var u=o||"<<anonymous>>",l=a||r;if(null==n[r])return t?new Error("Required "+i+" `"+l+"` was not specified in `"+u+"`."):null;for(var c=arguments.length,s=Array(c>6?c-6:0),f=6;f<c;f++)s[f-6]=arguments[f];return e.apply(void 0,[n,r,u,i,l].concat(s))}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r=n(351))&&"object"==typeof r&&"default"in r?r.default:r;const i=async(e,{identifier:t,transformer:n})=>{let r=await l(e,t,n);r=Object.assign({},a(e),r);const o=e[e.length-1];return u(o,t)&&(r=Object.assign({},o,r)),r},a=e=>{const t={},n=e=>"string"==typeof e;return n(e[0])&&!n(e[1])&&(t.text=e[0]),n(e[1])&&(t.title=e[0],t.text=e[1]),n(e[2])&&(t.icon=e[2]),t},u=(e,t)=>e.constructor===Object&&!t(e),l=async(e,t,n)=>{const r=n()instanceof Promise,o=await Promise.all([(async()=>{const o=e[0];if(!t(o))return;return{content:await c(o,n,r)}})(),(async()=>{const o=e.length-1,i=e[o];if(!i||!i.content)return;let{content:a,button:u}=i;return t(a)&&(a=await c(a,n,r)),{content:a}})()]);return Object.assign({},...o)},c=async(e,t,n)=>n?await t(e):t(e);t.default=async(...e)=>{const t=await i(...e);return o(t)},t.bindActions=e=>{for(const t in o)e[t]=o[t]}},function(e,t,n){(function(t,n){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=8)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="swal-button";t.CLASS_NAMES={MODAL:"swal-modal",OVERLAY:"swal-overlay",SHOW_MODAL:"swal-overlay--show-modal",MODAL_TITLE:"swal-title",MODAL_TEXT:"swal-text",ICON:"swal-icon",ICON_CUSTOM:"swal-icon--custom",CONTENT:"swal-content",FOOTER:"swal-footer",BUTTON_CONTAINER:"swal-button-container",BUTTON:r,CONFIRM_BUTTON:r+"--confirm",CANCEL_BUTTON:r+"--cancel",DANGER_BUTTON:r+"--danger",BUTTON_LOADING:r+"--loading",BUTTON_LOADER:r+"__loader"},t.default=t.CLASS_NAMES},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getNode=function(e){var t="."+e;return document.querySelector(t)},t.stringToNode=function(e){var t=document.createElement("div");return t.innerHTML=e.trim(),t.firstChild},t.insertAfter=function(e,t){var n=t.nextSibling;t.parentNode.insertBefore(e,n)},t.removeNode=function(e){e.parentElement.removeChild(e)},t.throwErr=function(e){throw"SweetAlert: "+(e=e.replace(/ +(?= )/g,"")).trim()},t.isPlainObject=function(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype},t.ordinalSuffixOf=function(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(25));var o=n(26);t.overlayMarkup=o.default,r(n(27)),r(n(28)),r(n(29));var i=n(0),a=i.default.MODAL_TITLE,u=i.default.MODAL_TEXT,l=i.default.ICON,c=i.default.FOOTER;t.iconMarkup='\n  <div class="'+l+'"></div>',t.titleMarkup='\n  <div class="'+a+'"></div>\n',t.textMarkup='\n  <div class="'+u+'"></div>',t.footerMarkup='\n  <div class="'+c+'"></div>\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.CONFIRM_KEY="confirm",t.CANCEL_KEY="cancel";var o={visible:!0,text:null,value:null,className:"",closeModal:!0},i=Object.assign({},o,{visible:!1,text:"Cancel",value:null}),a=Object.assign({},o,{text:"OK",value:!0});t.defaultButtonList={cancel:i,confirm:a};var u=function(e){switch(e){case t.CONFIRM_KEY:return a;case t.CANCEL_KEY:return i;default:var n=e.charAt(0).toUpperCase()+e.slice(1);return Object.assign({},o,{text:n,value:e})}},l=function(e,t){var n=u(e);return!0===t?Object.assign({},n,{visible:!0}):"string"==typeof t?Object.assign({},n,{visible:!0,text:t}):r.isPlainObject(t)?Object.assign({visible:!0},n,t):Object.assign({},n,{visible:!1})},c=function(e){var n={};switch(e.length){case 1:n[t.CANCEL_KEY]=Object.assign({},i,{visible:!1});break;case 2:n[t.CANCEL_KEY]=l(t.CANCEL_KEY,e[0]),n[t.CONFIRM_KEY]=l(t.CONFIRM_KEY,e[1]);break;default:r.throwErr("Invalid number of 'buttons' in array ("+e.length+").\n      If you want more than 2 buttons, you need to use an object!")}return n};t.getButtonListOpts=function(e){var n=t.defaultButtonList;return"string"==typeof e?n[t.CONFIRM_KEY]=l(t.CONFIRM_KEY,e):Array.isArray(e)?n=c(e):r.isPlainObject(e)?n=function(e){for(var t={},n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],a=e[o],u=l(o,a);t[o]=u}return t.cancel||(t.cancel=i),t}(e):!0===e?n=c([!0,!0]):!1===e?n=c([!1,!1]):void 0===e&&(n=t.defaultButtonList),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(2),i=n(0),a=i.default.MODAL,u=i.default.OVERLAY,l=n(30),c=n(31),s=n(32),f=n(33);t.injectElIntoModal=function(e){var t=r.getNode(a),n=r.stringToNode(e);return t.appendChild(n),n};var d=function(e,t){!function(e){e.className=a,e.textContent=""}(e);var n=t.className;n&&e.classList.add(n)};t.initModalContent=function(e){var t=r.getNode(a);d(t,e),l.default(e.icon),c.initTitle(e.title),c.initText(e.text),f.default(e.content),s.default(e.buttons,e.dangerMode)},t.default=function(){var e=r.getNode(u),t=r.stringToNode(o.modalMarkup);e.appendChild(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o={isOpen:!1,promise:null,actions:{},timer:null},i=Object.assign({},o);t.resetState=function(){i=Object.assign({},o)},t.setActionValue=function(e){if("string"==typeof e)return a(r.CONFIRM_KEY,e);for(var t in e)a(t,e[t])};var a=function(e,t){i.actions[e]||(i.actions[e]={}),Object.assign(i.actions[e],{value:t})};t.setActionOptionsFor=function(e,t){var n=(void 0===t?{}:t).closeModal,r=void 0===n||n;Object.assign(i.actions[e],{closeModal:r})},t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(3),i=n(0),a=i.default.OVERLAY,u=i.default.SHOW_MODAL,l=i.default.BUTTON,c=i.default.BUTTON_LOADING,s=n(5);t.openModal=function(){r.getNode(a).classList.add(u),s.default.isOpen=!0},t.onAction=function(e){void 0===e&&(e=o.CANCEL_KEY);var t=s.default.actions[e],n=t.value;if(!1===t.closeModal){var i=l+"--"+e;r.getNode(i).classList.add(c)}else r.getNode(a).classList.remove(u),s.default.isOpen=!1;s.default.promise.resolve(n)},t.getState=function(){var e=Object.assign({},s.default);return delete e.promise,delete e.timer,e},t.stopLoading=function(){for(var e=document.querySelectorAll("."+l),t=0;t<e.length;t++)e[t].classList.remove(c)}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){e.exports=t.sweetAlert=n(9)}).call(t,n(7))},function(e,t,n){(function(t){e.exports=t.swal=n(10)}).call(t,n(7))},function(e,t,n){"undefined"!=typeof window&&n(11),n(16);var r=n(23).default;e.exports=r},function(e,t,n){var r=n(12);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insertAt:"top",transform:void 0};n(14)(r,o),r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(13)(void 0)).push([e.i,'.swal-icon--error{border-color:#f27474;-webkit-animation:animateErrorIcon .5s;animation:animateErrorIcon .5s}.swal-icon--error__x-mark{position:relative;display:block;-webkit-animation:animateXMark .5s;animation:animateXMark .5s}.swal-icon--error__line{position:absolute;height:5px;width:47px;background-color:#f27474;display:block;top:37px;border-radius:2px}.swal-icon--error__line--left{-webkit-transform:rotate(45deg);transform:rotate(45deg);left:17px}.swal-icon--error__line--right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg);right:16px}@-webkit-keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}@keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}.swal-icon--warning{border-color:#f8bb86;-webkit-animation:pulseWarning .75s infinite alternate;animation:pulseWarning .75s infinite alternate}.swal-icon--warning__body{width:5px;height:47px;top:10px;border-radius:2px;margin-left:-2px}.swal-icon--warning__body,.swal-icon--warning__dot{position:absolute;left:50%;background-color:#f8bb86}.swal-icon--warning__dot{width:7px;height:7px;border-radius:50%;margin-left:-4px;bottom:-11px}@-webkit-keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}@keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}.swal-icon--success{border-color:#a5dc86}.swal-icon--success:after,.swal-icon--success:before{content:"";border-radius:50%;position:absolute;width:60px;height:120px;background:#fff;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal-icon--success:before{border-radius:120px 0 0 120px;top:-7px;left:-33px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:60px 60px;transform-origin:60px 60px}.swal-icon--success:after{border-radius:0 120px 120px 0;top:-11px;left:30px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 60px;transform-origin:0 60px;-webkit-animation:rotatePlaceholder 4.25s ease-in;animation:rotatePlaceholder 4.25s ease-in}.swal-icon--success__ring{width:80px;height:80px;border:4px solid hsla(98,55%,69%,.2);border-radius:50%;box-sizing:content-box;position:absolute;left:-4px;top:-4px;z-index:2}.swal-icon--success__hide-corners{width:5px;height:90px;background-color:#fff;padding:1px;position:absolute;left:28px;top:8px;z-index:1;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal-icon--success__line{height:5px;background-color:#a5dc86;display:block;border-radius:2px;position:absolute;z-index:2}.swal-icon--success__line--tip{width:25px;left:14px;top:46px;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-animation:animateSuccessTip .75s;animation:animateSuccessTip .75s}.swal-icon--success__line--long{width:47px;right:8px;top:38px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-animation:animateSuccessLong .75s;animation:animateSuccessLong .75s}@-webkit-keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}.swal-icon--info{border-color:#c9dae1}.swal-icon--info:before{width:5px;height:29px;bottom:17px;border-radius:2px;margin-left:-2px}.swal-icon--info:after,.swal-icon--info:before{content:"";position:absolute;left:50%;background-color:#c9dae1}.swal-icon--info:after{width:7px;height:7px;border-radius:50%;margin-left:-3px;top:19px}.swal-icon{width:80px;height:80px;border-width:4px;border-style:solid;border-radius:50%;padding:0;position:relative;box-sizing:content-box;margin:20px auto}.swal-icon:first-child{margin-top:32px}.swal-icon--custom{width:auto;height:auto;max-width:100%;border:none;border-radius:0}.swal-icon img{max-width:100%;max-height:100%}.swal-title{color:rgba(0,0,0,.65);font-weight:600;text-transform:none;position:relative;display:block;padding:13px 16px;font-size:27px;line-height:normal;text-align:center;margin-bottom:0}.swal-title:first-child{margin-top:26px}.swal-title:not(:first-child){padding-bottom:0}.swal-title:not(:last-child){margin-bottom:13px}.swal-text{font-size:16px;position:relative;float:none;line-height:normal;vertical-align:top;text-align:left;display:inline-block;margin:0;padding:0 10px;font-weight:400;color:rgba(0,0,0,.64);max-width:calc(100% - 20px);overflow-wrap:break-word;box-sizing:border-box}.swal-text:first-child{margin-top:45px}.swal-text:last-child{margin-bottom:45px}.swal-footer{text-align:right;padding-top:13px;margin-top:13px;padding:13px 16px;border-radius:inherit;border-top-left-radius:0;border-top-right-radius:0}.swal-button-container{margin:5px;display:inline-block;position:relative}.swal-button{background-color:#7cd1f9;color:#fff;border:none;box-shadow:none;border-radius:5px;font-weight:600;font-size:14px;padding:10px 24px;margin:0;cursor:pointer}.swal-button:not([disabled]):hover{background-color:#78cbf2}.swal-button:active{background-color:#70bce0}.swal-button:focus{outline:none;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(43,114,165,.29)}.swal-button[disabled]{opacity:.5;cursor:default}.swal-button::-moz-focus-inner{border:0}.swal-button--cancel{color:#555;background-color:#efefef}.swal-button--cancel:not([disabled]):hover{background-color:#e8e8e8}.swal-button--cancel:active{background-color:#d7d7d7}.swal-button--cancel:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(116,136,150,.29)}.swal-button--danger{background-color:#e64942}.swal-button--danger:not([disabled]):hover{background-color:#df4740}.swal-button--danger:active{background-color:#cf423b}.swal-button--danger:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(165,43,43,.29)}.swal-content{padding:0 20px;margin-top:20px;font-size:medium}.swal-content:last-child{margin-bottom:20px}.swal-content__input,.swal-content__textarea{-webkit-appearance:none;background-color:#fff;border:none;font-size:14px;display:block;box-sizing:border-box;width:100%;border:1px solid rgba(0,0,0,.14);padding:10px 13px;border-radius:2px;transition:border-color .2s}.swal-content__input:focus,.swal-content__textarea:focus{outline:none;border-color:#6db8ff}.swal-content__textarea{resize:vertical}.swal-button--loading{color:transparent}.swal-button--loading~.swal-button__loader{opacity:1}.swal-button__loader{position:absolute;height:auto;width:43px;z-index:2;left:50%;top:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);text-align:center;pointer-events:none;opacity:0}.swal-button__loader div{display:inline-block;float:none;vertical-align:baseline;width:9px;height:9px;padding:0;border:none;margin:2px;opacity:.4;border-radius:7px;background-color:hsla(0,0%,100%,.9);transition:background .2s;-webkit-animation:swal-loading-anim 1s infinite;animation:swal-loading-anim 1s infinite}.swal-button__loader div:nth-child(3n+2){-webkit-animation-delay:.15s;animation-delay:.15s}.swal-button__loader div:nth-child(3n+3){-webkit-animation-delay:.3s;animation-delay:.3s}@-webkit-keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}@keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}.swal-overlay{position:fixed;top:0;bottom:0;left:0;right:0;text-align:center;font-size:0;overflow-y:auto;background-color:rgba(0,0,0,.4);z-index:10000;pointer-events:none;opacity:0;transition:opacity .3s}.swal-overlay:before{content:" ";display:inline-block;vertical-align:middle;height:100%}.swal-overlay--show-modal{opacity:1;pointer-events:auto}.swal-overlay--show-modal .swal-modal{opacity:1;pointer-events:auto;box-sizing:border-box;-webkit-animation:showSweetAlert .3s;animation:showSweetAlert .3s;will-change:transform}.swal-modal{width:478px;opacity:0;pointer-events:none;background-color:#fff;text-align:center;border-radius:5px;position:static;margin:20px auto;display:inline-block;vertical-align:middle;-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;z-index:10001;transition:opacity .2s,-webkit-transform .3s;transition:transform .3s,opacity .2s;transition:transform .3s,opacity .2s,-webkit-transform .3s}@media (max-width:500px){.swal-modal{width:calc(100% - 20px)}}@-webkit-keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}',""])},function(e,t){function n(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r);return[n].concat(r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}))).concat([o]).join("\n")}return[n].join("\n")}e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=n(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=h[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(s(r.parts[i],t))}else{var a=[];for(i=0;i<r.parts.length;i++)a.push(s(r.parts[i],t));h[r.id]={id:r.id,refs:1,parts:a}}}}function o(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function i(e,t){var n=m(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=b[b.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),b.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=b.indexOf(e);t>=0&&b.splice(t,1)}function u(e){var t=document.createElement("style");return e.attrs.type="text/css",c(t,e.attrs),i(e,t),t}function l(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",c(t,e.attrs),i(e,t),t}function c(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function s(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var c=g++;n=y||(y=u(t)),r=f.bind(null,n,c,!1),o=f.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=l(t),r=p.bind(null,n,t),o=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=u(t),r=d.bind(null,n),o=function(){a(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}function f(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function p(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=w(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}var h={},v=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}((function(){return window&&document&&document.all&&!window.atob})),m=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}((function(e){return document.querySelector(e)})),y=null,g=0,b=[],w=n(15);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=v()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=o(e,t);return r(n,t),function(e){for(var i=[],a=0;a<n.length;a++){var u=n[a];(l=h[u.id]).refs--,i.push(l)}for(e&&r(o(e,t),t),a=0;a<i.length;a++){var l;if(0===(l=i[a]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var x=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(e,t,n){var r=n(17);"undefined"==typeof window||window.Promise||(window.Promise=r),n(21),String.prototype.includes||(String.prototype.includes=function(e,t){"use strict";return"number"!=typeof t&&(t=0),!(t+e.length>this.length)&&-1!==this.indexOf(e,t)}),Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e,t){if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),r=n.length>>>0;if(0===r)return!1;for(var o=0|t,i=Math.max(o>=0?o:r-Math.abs(o),0);i<r;){if(function(e,t){return e===t||"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}(n[i],e))return!0;i++}return!1}}),"undefined"!=typeof window&&[Element.prototype,CharacterData.prototype,DocumentType.prototype].forEach((function(e){e.hasOwnProperty("remove")||Object.defineProperty(e,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){this.parentNode.removeChild(this)}})}))},function(e,t,n){(function(t){!function(n){function r(){}function o(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],s(e,this)}function i(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,o._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void u(t.promise,e)}a(t.promise,r)}else(1===e._state?a:u)(t.promise,e._value)}))):e._deferreds.push(t)}function a(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof o)return e._state=3,e._value=t,void l(e);if("function"==typeof n)return void s(function(e,t){return function(){e.apply(t,arguments)}}(n,t),e)}e._state=1,e._value=t,l(e)}catch(t){u(e,t)}}function u(e,t){e._state=2,e._value=t,l(e)}function l(e){2===e._state&&0===e._deferreds.length&&o._immediateFn((function(){e._handled||o._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)i(e,e._deferreds[t]);e._deferreds=null}function c(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function s(e,t){var n=!1;try{e((function(e){n||(n=!0,a(t,e))}),(function(e){n||(n=!0,u(t,e))}))}catch(e){if(n)return;n=!0,u(t,e)}}var f=setTimeout;o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){var n=new this.constructor(r);return i(this,new c(e,t,n)),n},o.all=function(e){var t=Array.prototype.slice.call(e);return new o((function(e,n){function r(i,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var u=a.then;if("function"==typeof u)return void u.call(a,(function(e){r(i,e)}),n)}t[i]=a,0==--o&&e(t)}catch(e){n(e)}}if(0===t.length)return e([]);for(var o=t.length,i=0;i<t.length;i++)r(i,t[i])}))},o.resolve=function(e){return e&&"object"==typeof e&&e.constructor===o?e:new o((function(t){t(e)}))},o.reject=function(e){return new o((function(t,n){n(e)}))},o.race=function(e){return new o((function(t,n){for(var r=0,o=e.length;r<o;r++)e[r].then(t,n)}))},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){f(e,0)},o._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},o._setImmediateFn=function(e){o._immediateFn=e},o._setUnhandledRejectionFn=function(e){o._unhandledRejectionFn=e},void 0!==e&&e.exports?e.exports=o:n.Promise||(n.Promise=o)}(this)}).call(t,n(18).setImmediate)},function(e,r,o){function i(e,t){this._id=e,this._clearFn=t}var a=Function.prototype.apply;r.setTimeout=function(){return new i(a.call(setTimeout,window,arguments),clearTimeout)},r.setInterval=function(){return new i(a.call(setInterval,window,arguments),clearInterval)},r.clearTimeout=r.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},r.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},r.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},r._unrefActive=r.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},o(19),r.setImmediate=t,r.clearImmediate=n},function(e,t,n){(function(e,t){!function(e,n){"use strict";function r(e){delete u[e]}function o(e){if(l)setTimeout(o,0,e);else{var t=u[e];if(t){l=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{r(e),l=!1}}}}if(!e.setImmediate){var i,a=1,u={},l=!1,c=e.document,s=Object.getPrototypeOf&&Object.getPrototypeOf(e);s=s&&s.setTimeout?s:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){o(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&o(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),i=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){o(e.data)},i=function(t){e.port2.postMessage(t)}}():c&&"onreadystatechange"in c.createElement("script")?function(){var e=c.documentElement;i=function(t){var n=c.createElement("script");n.onreadystatechange=function(){o(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():i=function(e){setTimeout(o,0,e)},s.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return u[a]=r,i(a),a++},s.clearImmediate=r}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,n(7),n(20))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(c===setTimeout)return setTimeout(e,0);if((c===n||!c)&&setTimeout)return c=setTimeout,setTimeout(e,0);try{return c(e,0)}catch(t){try{return c.call(null,e,0)}catch(t){return c.call(this,e,0)}}}function i(){h&&d&&(h=!1,d.length?p=d.concat(p):v=-1,p.length&&a())}function a(){if(!h){var e=o(i);h=!0;for(var t=p.length;t;){for(d=p,p=[];++v<t;)d&&d[v].run();v=-1,t=p.length}d=null,h=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===r||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function u(e,t){this.fun=e,this.array=t}function l(){}var c,s,f=e.exports={};!function(){try{c="function"==typeof setTimeout?setTimeout:n}catch(e){c=n}try{s="function"==typeof clearTimeout?clearTimeout:r}catch(e){s=r}}();var d,p=[],h=!1,v=-1;f.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new u(e,t)),1!==p.length||h||o(a)},u.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=l,f.addListener=l,f.once=l,f.off=l,f.removeListener=l,f.removeAllListeners=l,f.emit=l,f.prependListener=l,f.prependOnceListener=l,f.listeners=function(e){return[]},f.binding=function(e){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(e){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(e,t,n){"use strict";n(22).polyfill()},function(e,t,n){"use strict";function r(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var n=Object(e),r=1;r<arguments.length;r++){var o=arguments[r];if(null!=o)for(var i=Object.keys(Object(o)),a=0,u=i.length;a<u;a++){var l=i[a],c=Object.getOwnPropertyDescriptor(o,l);void 0!==c&&c.enumerable&&(n[l]=o[l])}}return n}e.exports={assign:r,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:r})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(24),o=n(6),i=n(5),a=n(36),u=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if("undefined"!=typeof window){var n=a.getOpts.apply(void 0,e);return new Promise((function(e,t){i.default.promise={resolve:e,reject:t},r.default(n),setTimeout((function(){o.openModal()}))}))}};u.close=o.onAction,u.getState=o.getState,u.setActionValue=i.setActionValue,u.stopLoading=o.stopLoading,u.setDefaults=a.setDefaults,t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(0).default.MODAL,i=n(4),a=n(34),u=n(35),l=n(1);t.init=function(e){r.getNode(o)||(document.body||l.throwErr("You can only use SweetAlert AFTER the DOM has loaded!"),a.default(),i.default()),i.initModalContent(e),u.default(e)},t.default=t.init},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).default.MODAL;t.modalMarkup='\n  <div class="'+r+'" role="dialog" aria-modal="true"></div>',t.default=t.modalMarkup},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r='<div \n    class="'+n(0).default.OVERLAY+'"\n    tabIndex="-1">\n  </div>';t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).default.ICON;t.errorIconMarkup=function(){var e=r+"--error",t=e+"__line";return'\n    <div class="'+e+'__x-mark">\n      <span class="'+t+" "+t+'--left"></span>\n      <span class="'+t+" "+t+'--right"></span>\n    </div>\n  '},t.warningIconMarkup=function(){var e=r+"--warning";return'\n    <span class="'+e+'__body">\n      <span class="'+e+'__dot"></span>\n    </span>\n  '},t.successIconMarkup=function(){var e=r+"--success";return'\n    <span class="'+e+"__line "+e+'__line--long"></span>\n    <span class="'+e+"__line "+e+'__line--tip"></span>\n\n    <div class="'+e+'__ring"></div>\n    <div class="'+e+'__hide-corners"></div>\n  '}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0).default.CONTENT;t.contentMarkup='\n  <div class="'+r+'">\n\n  </div>\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=r.default.BUTTON_CONTAINER,i=r.default.BUTTON,a=r.default.BUTTON_LOADER;t.buttonMarkup='\n  <div class="'+o+'">\n\n    <button\n      class="'+i+'"\n    ></button>\n\n    <div class="'+a+'">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n\n  </div>\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(2),i=n(0),a=i.default.ICON,u=i.default.ICON_CUSTOM,l=["error","warning","success","info"],c={error:o.errorIconMarkup(),warning:o.warningIconMarkup(),success:o.successIconMarkup()};t.default=function(e){if(e){var t=r.injectElIntoModal(o.iconMarkup);l.includes(e)?function(e,t){var n=a+"--"+e;t.classList.add(n);var r=c[e];r&&(t.innerHTML=r)}(e,t):function(e,t){t.classList.add(u);var n=document.createElement("img");n.src=e,t.appendChild(n)}(e,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),o=n(4),i=function(e){navigator.userAgent.includes("AppleWebKit")&&(e.style.display="none",e.offsetHeight,e.style.display="")};t.initTitle=function(e){if(e){var t=o.injectElIntoModal(r.titleMarkup);t.textContent=e,i(t)}},t.initText=function(e){if(e){var t=document.createDocumentFragment();e.split("\n").forEach((function(e,n,r){t.appendChild(document.createTextNode(e)),n<r.length-1&&t.appendChild(document.createElement("br"))}));var n=o.injectElIntoModal(r.textMarkup);n.appendChild(t),i(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(4),i=n(0),a=i.default.BUTTON,u=i.default.DANGER_BUTTON,l=n(3),c=n(2),s=n(6),f=n(5),d=function(e,t,n){var o=t.text,i=t.value,d=t.className,p=t.closeModal,h=r.stringToNode(c.buttonMarkup),v=h.querySelector("."+a),m=a+"--"+e;v.classList.add(m),d&&(Array.isArray(d)?d:d.split(" ")).filter((function(e){return e.length>0})).forEach((function(e){v.classList.add(e)})),n&&e===l.CONFIRM_KEY&&v.classList.add(u),v.textContent=o;var y={};return y[e]=i,f.setActionValue(y),f.setActionOptionsFor(e,{closeModal:p}),v.addEventListener("click",(function(){return s.onAction(e)})),h};t.default=function(e,t){var n=o.injectElIntoModal(c.footerMarkup);for(var r in e){var i=e[r],a=d(r,i,t);i.visible&&n.appendChild(a)}0===n.children.length&&n.remove()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(4),i=n(2),a=n(5),u=n(6),l=n(0).default.CONTENT,c=function(e){e.addEventListener("input",(function(e){var t=e.target.value;a.setActionValue(t)})),e.addEventListener("keyup",(function(e){if("Enter"===e.key)return u.onAction(r.CONFIRM_KEY)})),setTimeout((function(){e.focus(),a.setActionValue("")}),0)};t.default=function(e){if(e){var t=o.injectElIntoModal(i.contentMarkup),n=e.element,r=e.attributes;"string"==typeof n?function(e,t,n){var r=document.createElement(t),o=l+"__"+t;for(var i in r.classList.add(o),n){var a=n[i];r[i]=a}"input"===t&&c(r),e.appendChild(r)}(t,n,r):t.appendChild(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(2);t.default=function(){var e=r.stringToNode(o.overlayMarkup);document.body.appendChild(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(6),i=n(1),a=n(3),u=n(0),l=u.default.MODAL,c=u.default.BUTTON,s=u.default.OVERLAY,f=function(e){if(r.default.isOpen)switch(e.key){case"Escape":return o.onAction(a.CANCEL_KEY)}},d=function(e){if(r.default.isOpen)switch(e.key){case"Tab":return function(e){e.preventDefault(),h()}(e)}},p=function(e){if(r.default.isOpen)return"Tab"===e.key&&e.shiftKey?function(e){e.preventDefault(),v()}(e):void 0},h=function(){var e=i.getNode(c);e&&(e.tabIndex=0,e.focus())},v=function(){var e=i.getNode(l).querySelectorAll("."+c),t=e[e.length-1];t&&t.focus()},m=function(){var e=i.getNode(l).querySelectorAll("."+c);e.length&&(function(e){e[e.length-1].addEventListener("keydown",d)}(e),function(e){e[0].addEventListener("keydown",p)}(e))},y=function(e){if(i.getNode(s)===e.target)return o.onAction(a.CANCEL_KEY)};t.default=function(e){e.closeOnEsc?document.addEventListener("keyup",f):document.removeEventListener("keyup",f),e.dangerMode?h():v(),m(),function(e){var t=i.getNode(s);t.removeEventListener("click",y),e&&t.addEventListener("click",y)}(e.closeOnClickOutside),function(e){r.default.timer&&clearTimeout(r.default.timer),e&&(r.default.timer=window.setTimeout((function(){return o.onAction(a.CANCEL_KEY)}),e))}(e.timer)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(3),i=n(37),a=n(38),u={title:null,text:null,icon:null,buttons:o.defaultButtonList,content:null,className:null,closeOnClickOutside:!0,closeOnEsc:!0,dangerMode:!1,timer:null},l=Object.assign({},u);t.setDefaults=function(e){l=Object.assign({},u,e)};var c=function(e){var t=e&&e.button,n=e&&e.buttons;return void 0!==t&&void 0!==n&&r.throwErr("Cannot set both 'button' and 'buttons' options!"),void 0!==t?{confirm:t}:n},s=function(e){return r.ordinalSuffixOf(e+1)},f=function(e,t){r.throwErr(s(t)+" argument ('"+e+"') is invalid")},d=function(e,t){var n=e+1,o=t[n];r.isPlainObject(o)||void 0===o||r.throwErr("Expected "+s(n)+" argument ('"+o+"') to be a plain object")},p=function(e,t,n,o){var i=t instanceof Element;if("string"==typeof t){if(0===n)return{text:t};if(1===n)return{text:t,title:o[0]};if(2===n)return d(n,o),{icon:t};f(t,n)}else{if(i&&0===n)return d(n,o),{content:t};if(r.isPlainObject(t))return function(e,t){var n=e+1,o=t[n];void 0!==o&&r.throwErr("Unexpected "+s(n)+" argument ("+o+")")}(n,o),t;f(t,n)}};t.getOpts=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n={};e.forEach((function(t,r){var o=p(0,t,r,e);Object.assign(n,o)}));var r=c(n);n.buttons=o.getButtonListOpts(r),delete n.button,n.content=i.getContentOpts(n.content);var s=Object.assign({},u,l,n);return Object.keys(s).forEach((function(e){a.DEPRECATED_OPTS[e]&&a.logDeprecation(e)})),s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o={element:"input",attributes:{placeholder:""}};t.getContentOpts=function(e){return r.isPlainObject(e)?Object.assign({},e):e instanceof Element?{element:e}:"input"===e?o:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logDeprecation=function(e){var n=t.DEPRECATED_OPTS[e],r=n.onlyRename,o=n.replacement,i=n.subOption,a=n.link,u='SweetAlert warning: "'+e+'" option has been '+(r?"renamed":"deprecated")+".";o&&(u+=" Please use"+(i?' "'+i+'" in ':" ")+'"'+o+'" instead.');var l="https://sweetalert.js.org";u+=a?" More details: "+l+a:" More details: "+l+"/guides/#upgrading-from-1x",console.warn(u)},t.DEPRECATED_OPTS={type:{replacement:"icon",link:"/docs/#icon"},imageUrl:{replacement:"icon",link:"/docs/#icon"},customClass:{replacement:"className",onlyRename:!0,link:"/docs/#classname"},imageSize:{},showCancelButton:{replacement:"buttons",link:"/docs/#buttons"},showConfirmButton:{replacement:"button",link:"/docs/#button"},confirmButtonText:{replacement:"button",link:"/docs/#button"},confirmButtonColor:{},cancelButtonText:{replacement:"buttons",link:"/docs/#buttons"},closeOnConfirm:{replacement:"button",subOption:"closeModal",link:"/docs/#button"},closeOnCancel:{replacement:"buttons",subOption:"closeModal",link:"/docs/#buttons"},showLoaderOnConfirm:{replacement:"buttons"},animation:{},inputType:{replacement:"content",link:"/docs/#content"},inputValue:{replacement:"content",link:"/docs/#content"},inputPlaceholder:{replacement:"content",link:"/docs/#content"},html:{replacement:"content",link:"/docs/#content"},allowEscapeKey:{replacement:"closeOnEsc",onlyRename:!0,link:"/docs/#closeonesc"},allowClickOutside:{replacement:"closeOnClickOutside",onlyRename:!0,link:"/docs/#closeonclickoutside"}}}])}).call(this,n(148).setImmediate,n(148).clearImmediate)},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,u,l=1,c={},s=!1,f=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){i.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",u=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",u,!1):e.attachEvent("onmessage",u),r=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return c[l]=o,r(l),l++},d.clearImmediate=p}function p(e){delete c[e]}function h(e){if(s)setTimeout(h,0,e);else{var t=c[e];if(t){s=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{p(e),s=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(52),n(142))},function(e,t,n){var r=n(71),o=n(354);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(34),o=n.n(r)()(!0);o.push([e.i,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]),t.default=o},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t){var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString;e.exports=function(e){if(null==e)return!0;if("boolean"==typeof e)return!1;if("number"==typeof e)return 0===e;if("string"==typeof e)return 0===e.length;if("function"==typeof e)return 0===e.length;if(Array.isArray(e))return 0===e.length;if(e instanceof Error)return""===e.message;if(e.toString==r)switch(e.toString()){case"[object File]":case"[object Map]":case"[object Set]":return 0===e.size;case"[object Object]":for(var t in e)if(n.call(e,t))return!1;return!0}return!1}},function(e,t,n){var r=n(71),o=n(358);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(34),o=n.n(r)()(!0);o.push([e.i,'\na, p, label, button, .rt-td, .sc-AykKF, .sc-AykKG {\n    font-family: Montserrat, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !important;\n}\n\na.btn-primary{\n    display:inline-block;\n    padding:0.7em 1.4em;\n    margin:0 0.3em 0.3em 0;\n    border-radius:0.15em;\n    box-sizing: border-box;\n    text-decoration:none;\n    font-family:\'Roboto\',sans-serif;\n    text-transform:uppercase;\n    font-weight:400;\n    color:#FFFFFF !important;\n    background-color:#668fff;\n    box-shadow:inset 0 -0.6em 0 -0.35em rgba(0,0,0,0.17);\n    text-align:center;\n    position:relative;\n    cursor: pointer; \n}\n\n\na.btn-primary:active{\ntop:0.1em;\n}\n\n.width-800pt {\n    width: 800pt;\n}\n\n.width-800pt-100h {\n    width: 800pt;\n}\n\n\n/* Color palette */\n.primary {\n    color: #000 !important;\n}\n\n.primary-disabled {\n    color: #a5a5a5 !important;\n}\n\n.secondary {\n    color: #4970D9 !important;\n}\n\n\n.success {\n    color: #6CBE27 !important;\n}\n\n.info {\n    color: #26C6DA;\n    font-size: 12px;\n    letter-spacing: 0.18em;\n}\n\n.warning {\n    color: #FFBF00 !important;\n}\n\n.danger {\n    color: #FF6A6E !important;\n}\n\n',"",{version:3,sources:["webpack://src/App.css"],names:[],mappings:";AACA;IACI,yNAAyN;AAC7N;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,sBAAsB;IACtB,oBAAoB;IACpB,sBAAsB;IACtB,oBAAoB;IACpB,+BAA+B;IAC/B,wBAAwB;IACxB,eAAe;IACf,wBAAwB;IACxB,wBAAwB;IACxB,oDAAoD;IACpD,iBAAiB;IACjB,iBAAiB;IACjB,eAAe;AACnB;;;AAGA;AACA,SAAS;AACT;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;;AAGA,kBAAkB;AAClB;IACI,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;;AAGA;IACI,yBAAyB;AAC7B;;AAEA;IACI,cAAc;IACd,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:['\na, p, label, button, .rt-td, .sc-AykKF, .sc-AykKG {\n    font-family: Montserrat, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !important;\n}\n\na.btn-primary{\n    display:inline-block;\n    padding:0.7em 1.4em;\n    margin:0 0.3em 0.3em 0;\n    border-radius:0.15em;\n    box-sizing: border-box;\n    text-decoration:none;\n    font-family:\'Roboto\',sans-serif;\n    text-transform:uppercase;\n    font-weight:400;\n    color:#FFFFFF !important;\n    background-color:#668fff;\n    box-shadow:inset 0 -0.6em 0 -0.35em rgba(0,0,0,0.17);\n    text-align:center;\n    position:relative;\n    cursor: pointer; \n}\n\n\na.btn-primary:active{\ntop:0.1em;\n}\n\n.width-800pt {\n    width: 800pt;\n}\n\n.width-800pt-100h {\n    width: 800pt;\n}\n\n\n/* Color palette */\n.primary {\n    color: #000 !important;\n}\n\n.primary-disabled {\n    color: #a5a5a5 !important;\n}\n\n.secondary {\n    color: #4970D9 !important;\n}\n\n\n.success {\n    color: #6CBE27 !important;\n}\n\n.info {\n    color: #26C6DA;\n    font-size: 12px;\n    letter-spacing: 0.18em;\n}\n\n.warning {\n    color: #FFBF00 !important;\n}\n\n.danger {\n    color: #FF6A6E !important;\n}\n\n'],sourceRoot:""}]),t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(57),a=n.n(i),u=n(26),l=n(7),c=n.n(l),s=n(12);function f(e){return"/"===e.charAt(0)}function d(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var p=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&f(e),a=t&&f(t),u=i||a;if(e&&f(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var c=0,s=o.length;s>=0;s--){var p=o[s];"."===p?d(o,s):".."===p?(d(o,s),c++):c&&(d(o,s),c--)}if(!u)for(;c--;c)o.unshift("..");!u||""===o[0]||o[0]&&f(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function h(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var v=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=h(t),o=h(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var m=function(e,t){if(!e)throw new Error("Invariant failed")};function y(e){return"/"===e.charAt(0)?e:"/"+e}function g(e){return"/"===e.charAt(0)?e.substr(1):e}function b(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function w(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function x(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function E(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Object(s.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=p(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function k(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var S=!("undefined"==typeof window||!window.document||!window.document.createElement);function O(e,t){t(window.confirm(e))}function _(){try{return window.history.state||{}}catch(e){return{}}}function C(e){void 0===e&&(e={}),S||m(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,u=void 0!==a&&a,l=i.getUserConfirmation,c=void 0===l?O:l,f=i.keyLength,d=void 0===f?6:f,p=e.basename?w(y(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=b(i,p)),E(i,r,n)}function v(){return Math.random().toString(36).substr(2,d)}var g=k();function C(e){Object(s.a)(D,e),D.length=n.length,g.notifyListeners(D.location,D.action)}function P(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||T(h(e.state))}function A(){T(h(_()))}var N=!1;function T(e){if(N)N=!1,C();else{g.confirmTransitionTo(e,"POP",c,(function(t){t?C({action:"POP",location:e}):function(e){var t=D.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(N=!0,R(o))}(e)}))}}var j=h(_()),M=[j.key];function I(e){return p+x(e)}function R(e){n.go(e)}var L=0;function F(e){1===(L+=e)&&1===e?(window.addEventListener("popstate",P),o&&window.addEventListener("hashchange",A)):0===L&&(window.removeEventListener("popstate",P),o&&window.removeEventListener("hashchange",A))}var U=!1;var D={length:n.length,action:"POP",location:j,createHref:I,push:function(e,t){var o=E(e,t,v(),D.location);g.confirmTransitionTo(o,"PUSH",c,(function(e){if(e){var t=I(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),u)window.location.href=t;else{var l=M.indexOf(D.location.key),c=M.slice(0,l+1);c.push(o.key),M=c,C({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=E(e,t,v(),D.location);g.confirmTransitionTo(o,"REPLACE",c,(function(e){if(e){var t=I(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),u)window.location.replace(t);else{var l=M.indexOf(D.location.key);-1!==l&&(M[l]=o.key),C({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:R,goBack:function(){R(-1)},goForward:function(){R(1)},block:function(e){void 0===e&&(e=!1);var t=g.setPrompt(e);return U||(F(1),U=!0),function(){return U&&(U=!1,F(-1)),t()}},listen:function(e){var t=g.appendListener(e);return F(1),function(){F(-1),t()}}};return D}var P={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+g(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:g,decodePath:y},slash:{encodePath:y,decodePath:y}};function A(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function N(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function T(e){window.location.replace(A(window.location.href)+"#"+e)}function j(e){void 0===e&&(e={}),S||m(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?O:r,i=n.hashType,a=void 0===i?"slash":i,u=e.basename?w(y(e.basename)):"",l=P[a],c=l.encodePath,f=l.decodePath;function d(){var e=f(N());return u&&(e=b(e,u)),E(e)}var p=k();function h(e){Object(s.a)(D,e),D.length=t.length,p.notifyListeners(D.location,D.action)}var v=!1,g=null;function _(){var e,t,n=N(),r=c(n);if(n!==r)T(r);else{var i=d(),a=D.location;if(!v&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(g===x(i))return;g=null,function(e){if(v)v=!1,h();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?h({action:"POP",location:e}):function(e){var t=D.location,n=I.lastIndexOf(x(t));-1===n&&(n=0);var r=I.lastIndexOf(x(e));-1===r&&(r=0);var o=n-r;o&&(v=!0,R(o))}(e)}))}}(i)}}var C=N(),j=c(C);C!==j&&T(j);var M=d(),I=[x(M)];function R(e){t.go(e)}var L=0;function F(e){1===(L+=e)&&1===e?window.addEventListener("hashchange",_):0===L&&window.removeEventListener("hashchange",_)}var U=!1;var D={length:t.length,action:"POP",location:M,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=A(window.location.href)),n+"#"+c(u+x(e))},push:function(e,t){var n=E(e,void 0,void 0,D.location);p.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=x(n),r=c(u+t);if(N()!==r){g=t,function(e){window.location.hash=e}(r);var o=I.lastIndexOf(x(D.location)),i=I.slice(0,o+1);i.push(t),I=i,h({action:"PUSH",location:n})}else h()}}))},replace:function(e,t){var n=E(e,void 0,void 0,D.location);p.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=x(n),r=c(u+t);N()!==r&&(g=t,T(r));var o=I.indexOf(x(D.location));-1!==o&&(I[o]=t),h({action:"REPLACE",location:n})}}))},go:R,goBack:function(){R(-1)},goForward:function(){R(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return U||(F(1),U=!0),function(){return U&&(U=!1,F(-1)),t()}},listen:function(e){var t=p.appendListener(e);return F(1),function(){F(-1),t()}}};return D}function M(e,t,n){return Math.min(Math.max(e,t),n)}function I(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,a=void 0===i?0:i,u=t.keyLength,l=void 0===u?6:u,c=k();function f(e){Object(s.a)(y,e),y.length=y.entries.length,c.notifyListeners(y.location,y.action)}function d(){return Math.random().toString(36).substr(2,l)}var p=M(a,0,o.length-1),h=o.map((function(e){return E(e,void 0,"string"==typeof e?d():e.key||d())})),v=x;function m(e){var t=M(y.index+e,0,y.entries.length-1),r=y.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var y={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:v,push:function(e,t){var r=E(e,t,d(),y.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=E(e,t,d(),y.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(y.entries[y.index]=r,f({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return y}var R=n(103),L=n(104),F=n.n(L),U=n(72),D=n(44),B=n(58),z=n.n(B),V=function(e){var t=Object(R.a)();return t.displayName=e,t}("Router-History"),W=function(e){var t=Object(R.a)();return t.displayName=e,t}("Router"),$=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(u.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(W.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.a.createElement(V.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.a.Component);o.a.Component;var q=function(e){function t(){return e.apply(this,arguments)||this}Object(u.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(o.a.Component);var H={},G=0;function K(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(H[e])return H[e];var t=F.a.compile(e);return G<1e4&&(H[e]=t,G++),t}(e)(t,{pretty:!0})}function Y(e){var t=e.computedMatch,n=e.to,r=e.push,i=void 0!==r&&r;return o.a.createElement(W.Consumer,null,(function(e){e||m(!1);var r=e.history,a=e.staticContext,u=i?r.push:r.replace,l=E(t?"string"==typeof n?K(n,t.params):Object(s.a)({},n,{pathname:K(n.pathname,t.params)}):n);return a?(u(l),null):o.a.createElement(q,{onMount:function(){u(l)},onUpdate:function(e,t){var n,r,o=E(t.to);n=o,r=Object(s.a)({},l,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&v(n.state,r.state)||u(l)},to:n})}))}var Q={},X=0;function J(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Q[n]||(Q[n]={});if(r[e])return r[e];var o=[],i={regexp:F()(e,o,t),keys:o};return X<1e4&&(r[e]=i,X++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Z=function(e){function t(){return e.apply(this,arguments)||this}return Object(u.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(W.Consumer,null,(function(t){t||m(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?J(n.pathname,e.props):t.match,i=Object(s.a)({},t,{location:n,match:r}),a=e.props,u=a.children,l=a.component,c=a.render;return Array.isArray(u)&&0===u.length&&(u=null),o.a.createElement(W.Provider,{value:i},i.match?u?"function"==typeof u?u(i):u:l?o.a.createElement(l,i):c?c(i):null:"function"==typeof u?u(i):null)}))},t}(o.a.Component);function ee(e){return"/"===e.charAt(0)?e:"/"+e}function te(e,t){if(!e)return t;var n=ee(e);return 0!==t.pathname.indexOf(n)?t:Object(s.a)({},t,{pathname:t.pathname.substr(n.length)})}function ne(e){return"string"==typeof e?e:x(e)}function re(e){return function(){m(!1)}}function oe(){}o.a.Component;var ie=function(e){function t(){return e.apply(this,arguments)||this}return Object(u.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(W.Consumer,null,(function(t){t||m(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?J(i.pathname,Object(s.a)({},e.props,{path:a})):t.match}})),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.a.Component);o.a.useContext;var ae=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=C(t.props),t}return Object(u.a)(t,e),t.prototype.render=function(){return o.a.createElement($,{history:this.history,children:this.props.children})},t}(o.a.Component);o.a.Component;var ue=function(e,t){return"function"==typeof e?e(t):e},le=function(e,t){return"string"==typeof e?E(e,null,null,t):e},ce=function(e){return e},se=o.a.forwardRef;void 0===se&&(se=ce);var fe=se((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=Object(D.a)(e,["innerRef","navigate","onClick"]),u=a.target,l=Object(s.a)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=ce!==se&&t||n,o.a.createElement("a",l)}));var de=se((function(e,t){var n=e.component,r=void 0===n?fe:n,i=e.replace,a=e.to,u=e.innerRef,l=Object(D.a)(e,["component","replace","to","innerRef"]);return o.a.createElement(W.Consumer,null,(function(e){e||m(!1);var n=e.history,c=le(ue(a,e.location),e.location),f=c?n.createHref(c):"",d=Object(s.a)({},l,{href:f,navigate:function(){var t=ue(a,e.location);(i?n.replace:n.push)(t)}});return ce!==se?d.ref=t||u:d.innerRef=u,o.a.createElement(r,d)}))})),pe=function(e){return e},he=o.a.forwardRef;void 0===he&&(he=pe);he((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,u=e.activeStyle,l=e.className,c=e.exact,f=e.isActive,d=e.location,p=e.sensitive,h=e.strict,v=e.style,y=e.to,g=e.innerRef,b=Object(D.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.a.createElement(W.Consumer,null,(function(e){e||m(!1);var n=d||e.location,i=le(ue(y,n),n),w=i.pathname,x=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=x?J(n.pathname,{path:x,exact:c,sensitive:p,strict:h}):null,k=!!(f?f(E,n):E),S=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,a):l,O=k?Object(s.a)({},v,{},u):v,_=Object(s.a)({"aria-current":k&&r||null,className:S,style:O,to:i},b);return pe!==he?_.ref=t||g:_.innerRef=g,o.a.createElement(de,_)}))})),n(322);var ve=o.a.createContext(null);var me=function(e){e()},ye={notify:function(){}};function ge(){var e=me,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var be=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=ye,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=ge())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=ye)},e}();var we=function(e){var t=e.store,n=e.context,i=e.children,a=Object(r.useMemo)((function(){var e=new be(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),u=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),u!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,u]);var l=n||ve;return o.a.createElement(l.Provider,{value:a},i)};function xe(){return(xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ee(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var ke="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,Se=[],Oe=[null,null];function _e(e,t){var n=e[1];return[t.payload,n+1]}function Ce(e,t,n){ke((function(){return e.apply(void 0,t)}),n)}function Pe(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function Ae(e,t,n,r,o,i,a,u,l,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,u.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var Ne=function(){return[null,0]};function Te(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,u=n.methodName,l=void 0===u?"connectAdvanced":u,c=n.renderCountProp,s=void 0===c?void 0:c,f=n.shouldHandleStateChanges,d=void 0===f||f,p=n.storeKey,h=void 0===p?"store":p,v=(n.withRef,n.forwardRef),m=void 0!==v&&v,y=n.context,g=void 0===y?ve:y,b=Ee(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),w=g;return function(t){var n=t.displayName||t.name||"Component",i=a(n),u=xe({},b,{getDisplayName:a,methodName:l,renderCountProp:s,shouldHandleStateChanges:d,storeKey:h,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=b.pure;var f=c?r.useMemo:function(e){return e()};function p(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Ee(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),a=i[0],l=i[1],c=i[2],s=Object(r.useMemo)((function(){return a&&a.Consumer&&Object(U.isContextConsumer)(o.a.createElement(a.Consumer,null))?a:w}),[a,w]),p=Object(r.useContext)(s),h=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(p)&&Boolean(p.store);var v=h?n.store:p.store,m=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,u)}(v)}),[v]),y=Object(r.useMemo)((function(){if(!d)return Oe;var e=new be(v,h?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[v,h,p]),g=y[0],b=y[1],x=Object(r.useMemo)((function(){return h?p:xe({},p,{subscription:g})}),[h,p,g]),E=Object(r.useReducer)(_e,Se,Ne),k=E[0][0],S=E[1];if(k&&k.error)throw k.error;var O=Object(r.useRef)(),_=Object(r.useRef)(c),C=Object(r.useRef)(),P=Object(r.useRef)(!1),A=f((function(){return C.current&&c===_.current?C.current:m(v.getState(),c)}),[v,k,c]);Ce(Pe,[_,O,P,c,A,C,b]),Ce(Ae,[d,v,g,m,_,O,P,C,b,S],[v,g,m]);var N=Object(r.useMemo)((function(){return o.a.createElement(t,xe({},A,{ref:l}))}),[l,t,A]);return Object(r.useMemo)((function(){return d?o.a.createElement(s.Provider,{value:x},N):N}),[s,N,x])}var v=c?o.a.memo(p):p;if(v.WrappedComponent=t,v.displayName=i,m){var y=o.a.forwardRef((function(e,t){return o.a.createElement(v,xe({},e,{reactReduxForwardedRef:t}))}));return y.displayName=i,y.WrappedComponent=t,z()(y,t)}return z()(v,t)}}function je(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function Me(e,t){if(je(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!je(e[n[o]],t[n[o]]))return!1;return!0}var Ie=n(102),Re=function(){return Math.random().toString(36).substring(7).split("").join(".")},Le={INIT:"@@redux/INIT"+Re(),REPLACE:"@@redux/REPLACE"+Re(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Re()}};function Fe(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ue(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function De(e,t){return function(){return t(e.apply(this,arguments))}}function Be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ze(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function Ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ze(n,!0).forEach((function(t){Be(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ze(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function We(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function $e(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function qe(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function He(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=qe(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=qe(o),o=r(t,n)),o},r}}var Ge=[function(e){return"function"==typeof e?He(e):void 0},function(e){return e?void 0:$e((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?$e((function(t){return function(e,t){if("function"==typeof e)return De(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=De(o,t))}return n}(e,t)})):void 0}];var Ke=[function(e){return"function"==typeof e?He(e):void 0},function(e){return e?void 0:$e((function(){return{}}))}];function Ye(e,t,n){return xe({},n,e,t)}var Qe=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Ye}}];function Xe(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function Je(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,v,m=!f(p,a),y=!s(o,i);return i=o,a=p,m&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):m?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(h=e(i,a),v=!d(h,u),u=h,v&&(c=n(u,l,a)),c):c}return function(o,s){return p?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),p=!0,c)}}function Ze(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Ee(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?Je:Xe)(a,u,l,e,i)}function et(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function tt(e,t){return e===t}function nt(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?Te:n,o=t.mapStateToPropsFactories,i=void 0===o?Ke:o,a=t.mapDispatchToPropsFactories,u=void 0===a?Ge:a,l=t.mergePropsFactories,c=void 0===l?Qe:l,s=t.selectorFactory,f=void 0===s?Ze:s;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,s=void 0===l||l,d=a.areStatesEqual,p=void 0===d?tt:d,h=a.areOwnPropsEqual,v=void 0===h?Me:h,m=a.areStatePropsEqual,y=void 0===m?Me:m,g=a.areMergedPropsEqual,b=void 0===g?Me:g,w=Ee(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=et(e,i,"mapStateToProps"),E=et(t,u,"mapDispatchToProps"),k=et(n,c,"mergeProps");return r(f,xe({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:E,initMergeProps:k,pure:s,areStatesEqual:p,areOwnPropsEqual:v,areStatePropsEqual:y,areMergedPropsEqual:b},w))}}var rt=nt();var ot;ot=i.unstable_batchedUpdates,me=ot;var it=n(73),at=n.n(it),ut=n(51),lt=n.n(ut),ct=function(e){e?lt.a.defaults.headers.common.Authorization=e:delete lt.a.defaults.headers.common.Authorization},st=function(e){return{type:"SET_CURRENT_USER",payload:e}},ft=function(e){return function(t){console.log(e),localStorage.removeItem("jwtToken"),ct(!1),t(st({})),e.push("/login")}};function dt(){return(dt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function pt(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var ht=n(2),vt=n.n(ht),mt=o.a.createContext({});mt.Consumer,mt.Provider;function yt(e,t){var n=Object(r.useContext)(mt);return e||n[t]||t}var gt=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.fluid,i=e.as,a=void 0===i?"div":i,u=e.className,l=pt(e,["bsPrefix","fluid","as","className"]),c=yt(n,"container"),s="string"==typeof r?"-"+r:"-fluid";return o.a.createElement(a,dt({ref:t},l,{className:vt()(u,r?""+c+s:c)}))}));gt.displayName="Container",gt.defaultProps={fluid:!1};var bt=gt,wt=(n(101),{type:c.a.string,tooltip:c.a.bool,as:c.a.elementType}),xt=o.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"div":n,i=e.className,a=e.type,u=void 0===a?"valid":a,l=e.tooltip,c=void 0!==l&&l,s=pt(e,["as","className","type","tooltip"]);return o.a.createElement(r,dt({},s,{ref:t,className:vt()(i,u+"-"+(c?"tooltip":"feedback"))}))}));xt.displayName="Feedback",xt.propTypes=wt;var Et=xt,kt=o.a.createContext({controlId:void 0}),St=o.a.forwardRef((function(e,t){var n=e.id,i=e.bsPrefix,a=e.bsCustomPrefix,u=e.className,l=e.type,c=void 0===l?"checkbox":l,s=e.isValid,f=void 0!==s&&s,d=e.isInvalid,p=void 0!==d&&d,h=e.isStatic,v=e.as,m=void 0===v?"input":v,y=pt(e,["id","bsPrefix","bsCustomPrefix","className","type","isValid","isInvalid","isStatic","as"]),g=Object(r.useContext)(kt),b=g.controlId,w=g.custom?[a,"custom-control-input"]:[i,"form-check-input"];return i=yt(w[0],w[1]),o.a.createElement(m,dt({},y,{ref:t,type:c,id:n||b,className:vt()(u,i,f&&"is-valid",p&&"is-invalid",h&&"position-static")}))}));St.displayName="FormCheckInput";var Ot=St,_t=o.a.forwardRef((function(e,t){var n=e.bsPrefix,i=e.bsCustomPrefix,a=e.className,u=e.htmlFor,l=pt(e,["bsPrefix","bsCustomPrefix","className","htmlFor"]),c=Object(r.useContext)(kt),s=c.controlId,f=c.custom?[i,"custom-control-label"]:[n,"form-check-label"];return n=yt(f[0],f[1]),o.a.createElement("label",dt({},l,{ref:t,htmlFor:u||s,className:vt()(a,n)}))}));_t.displayName="FormCheckLabel";var Ct=_t,Pt=o.a.forwardRef((function(e,t){var n=e.id,i=e.bsPrefix,a=e.bsCustomPrefix,u=e.inline,l=void 0!==u&&u,c=e.disabled,s=void 0!==c&&c,f=e.isValid,d=void 0!==f&&f,p=e.isInvalid,h=void 0!==p&&p,v=e.feedbackTooltip,m=void 0!==v&&v,y=e.feedback,g=e.className,b=e.style,w=e.title,x=void 0===w?"":w,E=e.type,k=void 0===E?"checkbox":E,S=e.label,O=e.children,_=e.custom,C=e.as,P=void 0===C?"input":C,A=pt(e,["id","bsPrefix","bsCustomPrefix","inline","disabled","isValid","isInvalid","feedbackTooltip","feedback","className","style","title","type","label","children","custom","as"]),N="switch"===k||_,T=N?[a,"custom-control"]:[i,"form-check"];i=yt(T[0],T[1]);var j=Object(r.useContext)(kt).controlId,M=Object(r.useMemo)((function(){return{controlId:n||j,custom:N}}),[j,N,n]),I=N||null!=S&&!1!==S&&!O,R=o.a.createElement(Ot,dt({},A,{type:"switch"===k?"checkbox":k,ref:t,isValid:d,isInvalid:h,isStatic:!I,disabled:s,as:P}));return o.a.createElement(kt.Provider,{value:M},o.a.createElement("div",{style:b,className:vt()(g,i,N&&"custom-"+k,l&&i+"-inline")},O||o.a.createElement(o.a.Fragment,null,R,I&&o.a.createElement(Ct,{title:x},S),(d||h)&&o.a.createElement(Et,{type:d?"valid":"invalid",tooltip:m},y))))}));Pt.displayName="FormCheck",Pt.Input=Ot,Pt.Label=Ct;var At=Pt,Nt=o.a.forwardRef((function(e,t){var n=e.id,i=e.bsPrefix,a=e.bsCustomPrefix,u=e.className,l=e.isValid,c=e.isInvalid,s=e.lang,f=e.as,d=void 0===f?"input":f,p=pt(e,["id","bsPrefix","bsCustomPrefix","className","isValid","isInvalid","lang","as"]),h=Object(r.useContext)(kt),v=h.controlId,m=h.custom?[a,"custom-file-input"]:[i,"form-control-file"];return i=yt(m[0],m[1]),o.a.createElement(d,dt({},p,{ref:t,id:n||v,type:"file",lang:s,className:vt()(u,i,l&&"is-valid",c&&"is-invalid")}))}));Nt.displayName="FormFileInput";var Tt=Nt,jt=o.a.forwardRef((function(e,t){var n=e.bsPrefix,i=e.bsCustomPrefix,a=e.className,u=e.htmlFor,l=pt(e,["bsPrefix","bsCustomPrefix","className","htmlFor"]),c=Object(r.useContext)(kt),s=c.controlId,f=c.custom?[i,"custom-file-label"]:[n,"form-file-label"];return n=yt(f[0],f[1]),o.a.createElement("label",dt({},l,{ref:t,htmlFor:u||s,className:vt()(a,n),"data-browse":l["data-browse"]}))}));jt.displayName="FormFileLabel";var Mt=jt,It=o.a.forwardRef((function(e,t){var n=e.id,i=e.bsPrefix,a=e.bsCustomPrefix,u=e.disabled,l=void 0!==u&&u,c=e.isValid,s=void 0!==c&&c,f=e.isInvalid,d=void 0!==f&&f,p=e.feedbackTooltip,h=void 0!==p&&p,v=e.feedback,m=e.className,y=e.style,g=e.label,b=e.children,w=e.custom,x=e.lang,E=e["data-browse"],k=e.as,S=void 0===k?"div":k,O=e.inputAs,_=void 0===O?"input":O,C=pt(e,["id","bsPrefix","bsCustomPrefix","disabled","isValid","isInvalid","feedbackTooltip","feedback","className","style","label","children","custom","lang","data-browse","as","inputAs"]),P=w?[a,"custom"]:[i,"form-file"];i=yt(P[0],P[1]);var A=Object(r.useContext)(kt).controlId,N=Object(r.useMemo)((function(){return{controlId:n||A,custom:w}}),[A,w,n]),T=null!=g&&!1!==g&&!b,j=o.a.createElement(Tt,dt({},C,{ref:t,isValid:s,isInvalid:d,disabled:l,as:_,lang:x}));return o.a.createElement(kt.Provider,{value:N},o.a.createElement(S,{style:y,className:vt()(m,i,w&&"custom-file")},b||o.a.createElement(o.a.Fragment,null,w?o.a.createElement(o.a.Fragment,null,j,T&&o.a.createElement(Mt,{"data-browse":E},g)):o.a.createElement(o.a.Fragment,null,T&&o.a.createElement(Mt,null,g),j),(s||d)&&o.a.createElement(Et,{type:s?"valid":"invalid",tooltip:h},v))))}));It.displayName="FormFile",It.Input=Tt,It.Label=Mt;var Rt=It,Lt=(n(147),o.a.forwardRef((function(e,t){var n,i,a=e.bsPrefix,u=e.bsCustomPrefix,l=e.type,c=e.size,s=e.htmlSize,f=e.id,d=e.className,p=e.isValid,h=void 0!==p&&p,v=e.isInvalid,m=void 0!==v&&v,y=e.plaintext,g=e.readOnly,b=e.custom,w=e.as,x=void 0===w?"input":w,E=pt(e,["bsPrefix","bsCustomPrefix","type","size","htmlSize","id","className","isValid","isInvalid","plaintext","readOnly","custom","as"]),k=Object(r.useContext)(kt).controlId,S=b?[u,"custom"]:[a,"form-control"];if(a=yt(S[0],S[1]),y)(i={})[a+"-plaintext"]=!0,n=i;else if("file"===l){var O;(O={})[a+"-file"]=!0,n=O}else if("range"===l){var _;(_={})[a+"-range"]=!0,n=_}else if("select"===x&&b){var C;(C={})[a+"-select"]=!0,C[a+"-select-"+c]=c,n=C}else{var P;(P={})[a]=!0,P[a+"-"+c]=c,n=P}return o.a.createElement(x,dt({},E,{type:l,size:s,ref:t,readOnly:g,id:f||k,className:vt()(d,n,h&&"is-valid",m&&"is-invalid")}))})));Lt.displayName="FormControl";var Ft=Object.assign(Lt,{Feedback:Et}),Ut=o.a.forwardRef((function(e,t){var n=e.bsPrefix,i=e.className,a=e.children,u=e.controlId,l=e.as,c=void 0===l?"div":l,s=pt(e,["bsPrefix","className","children","controlId","as"]);n=yt(n,"form-group");var f=Object(r.useMemo)((function(){return{controlId:u}}),[u]);return o.a.createElement(kt.Provider,{value:f},o.a.createElement(c,dt({},s,{ref:t,className:vt()(i,n)}),a))}));Ut.displayName="FormGroup";var Dt=Ut,Bt=["xl","lg","md","sm","xs"],zt=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,i=e.as,a=void 0===i?"div":i,u=pt(e,["bsPrefix","className","as"]),l=yt(n,"col"),c=[],s=[];return Bt.forEach((function(e){var t,n,r,o=u[e];if(delete u[e],"object"==typeof o&&null!=o){var i=o.span;t=void 0===i||i,n=o.offset,r=o.order}else t=o;var a="xs"!==e?"-"+e:"";t&&c.push(!0===t?""+l+a:""+l+a+"-"+t),null!=r&&s.push("order"+a+"-"+r),null!=n&&s.push("offset"+a+"-"+n)})),c.length||c.push(l),o.a.createElement(a,dt({},u,{ref:t,className:vt.a.apply(void 0,[r].concat(c,s))}))}));zt.displayName="Col";var Vt=zt,Wt=o.a.forwardRef((function(e,t){var n=e.as,i=void 0===n?"label":n,a=e.bsPrefix,u=e.column,l=e.srOnly,c=e.className,s=e.htmlFor,f=pt(e,["as","bsPrefix","column","srOnly","className","htmlFor"]),d=Object(r.useContext)(kt).controlId;a=yt(a,"form-label");var p="col-form-label";"string"==typeof u&&(p=p+" "+p+"-"+u);var h=vt()(c,a,l&&"sr-only",u&&p);return s=s||d,u?o.a.createElement(Vt,dt({as:"label",className:h,htmlFor:s},f)):o.a.createElement(i,dt({ref:t,className:h,htmlFor:s},f))}));Wt.displayName="FormLabel",Wt.defaultProps={column:!1,srOnly:!1};var $t=Wt,qt=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,i=e.as,a=void 0===i?"small":i,u=e.muted,l=pt(e,["bsPrefix","className","as","muted"]);return n=yt(n,"form-text"),o.a.createElement(a,dt({},l,{ref:t,className:vt()(r,n,u&&"text-muted")}))}));qt.displayName="FormText";var Ht=qt,Gt=o.a.forwardRef((function(e,t){return o.a.createElement(At,dt({},e,{ref:t,type:"switch"}))}));Gt.displayName="Switch",Gt.Input=At.Input,Gt.Label=At.Label;var Kt=Gt,Yt=/-(.)/g;var Qt=function(e){return e[0].toUpperCase()+(t=e,t.replace(Yt,(function(e,t){return t.toUpperCase()}))).slice(1);var t};var Xt,Jt,Zt,en,tn,nn,rn,on,an=(Xt="form-row",en=(Zt=void 0===Jt?{}:Jt).displayName,tn=void 0===en?Qt(Xt):en,nn=Zt.Component,rn=Zt.defaultProps,(on=o.a.forwardRef((function(e,t){var n=e.className,r=e.bsPrefix,i=e.as,a=void 0===i?nn||"div":i,u=pt(e,["className","bsPrefix","as"]),l=yt(r,Xt);return o.a.createElement(a,dt({ref:t,className:vt()(n,l)},u))}))).defaultProps=rn,on.displayName=tn,on),un=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.inline,i=e.className,a=e.validated,u=e.as,l=void 0===u?"form":u,c=pt(e,["bsPrefix","inline","className","validated","as"]);return n=yt(n,"form"),o.a.createElement(l,dt({},c,{ref:t,className:vt()(i,a&&"was-validated",r&&n+"-inline")}))}));un.displayName="Form",un.defaultProps={inline:!1},un.Row=an,un.Group=Dt,un.Control=Ft,un.Check=At,un.File=Rt,un.Switch=Kt,un.Label=$t,un.Text=Ht;var ln=un,cn=["xl","lg","md","sm","xs"],sn=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,i=e.noGutters,a=e.as,u=void 0===a?"div":a,l=pt(e,["bsPrefix","className","noGutters","as"]),c=yt(n,"row"),s=c+"-cols",f=[];return cn.forEach((function(e){var t,n=l[e];delete l[e];var r="xs"!==e?"-"+e:"";null!=(t=null!=n&&"object"==typeof n?n.cols:n)&&f.push(""+s+r+"-"+t)})),o.a.createElement(u,dt({ref:t},l,{className:vt.a.apply(void 0,[r,c,i&&"no-gutters"].concat(f))}))}));sn.displayName="Row",sn.defaultProps={noGutters:!1};var fn=sn;var dn=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),null)};function pn(e){return!e||"#"===e.trim()}var hn=o.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,i=e.disabled,a=e.onKeyDown,u=pt(e,["as","disabled","onKeyDown"]),l=function(e){var t=u.href,n=u.onClick;(i||pn(t))&&e.preventDefault(),i?e.stopPropagation():n&&n(e)};return pn(u.href)&&(u.role=u.role||"button",u.href=u.href||"#"),i&&(u.tabIndex=-1,u["aria-disabled"]=!0),o.a.createElement(r,dt({ref:t},u,{onClick:l,onKeyDown:dn((function(e){" "===e.key&&(e.preventDefault(),l(e))}),a)}))}));hn.displayName="SafeAnchor";var vn=hn,mn=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,i=e.size,a=e.active,u=e.className,l=e.block,c=e.type,s=e.as,f=pt(e,["bsPrefix","variant","size","active","className","block","type","as"]),d=yt(n,"btn"),p=vt()(u,d,a&&"active",r&&d+"-"+r,l&&d+"-block",i&&d+"-"+i);if(f.href)return o.a.createElement(vn,dt({},f,{as:s,ref:t,className:vt()(p,f.disabled&&"disabled")}));t&&(f.ref=t),c?f.type=c:s||(f.type="button");var h=s||"button";return o.a.createElement(h,dt({},f,{className:p}))}));mn.displayName="Button",mn.defaultProps={variant:"primary",active:!1,disabled:!1};var yn=mn;n(347);function gn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return bn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return bn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var wn=function(e){var t,n,i,a=e.history,u=e.auth,l=e.loginUser,c=gn(Object(r.useState)(""),2),s=c[0],f=c[1],d=gn(Object(r.useState)(""),2),p=d[0],h=d[1],v=gn(Object(r.useState)({}),2);v[0],v[1];return u.isAuthenticated&&a.push("/"),o.a.createElement(bt,null,o.a.createElement("div",{className:"text-center mt-5"},o.a.createElement("h1",{className:"primary-dark"},"Inicio de sesión")),o.a.createElement(ln,{onSubmit:function(e){e.preventDefault(),l({email:s,password:p})}},o.a.createElement(ln.Group,{controlId:"formBasicEmail"},o.a.createElement(ln.Label,{className:"secondary-light"},"Correo electrónico / Teléfono"),o.a.createElement(ln.Control,(i="primary-dark",(n="className")in(t={value:s,onChange:function(e){return f(e.target.value)},type:"text",className:"primary-dark",placeholder:"correo@mail.com / 444123456789"})?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i,t))),o.a.createElement(ln.Group,{controlId:"formBasicPassword"},o.a.createElement(ln.Label,{className:"secondary-light"},"Contraseña"),o.a.createElement(ln.Control,{value:p,onChange:function(e){return h(e.target.value)},type:"password",className:"primary-dark",placeholder:"Introduce tu contraseña"})),o.a.createElement(fn,{className:"justify-content-around"},o.a.createElement(Vt,{lg:12,sm:12,className:"justify-content-center d-flex mt-2"},o.a.createElement(yn,{variant:"primary",type:"submit"},"Iniciar Sesión")))))};wn.propTypes={loginUser:c.a.func.isRequired,auth:c.a.object.isRequired,errors:c.a.object.isRequired};var xn=rt((function(e){return{auth:e.auth,errors:e.errors}}),{loginUser:function(e){return function(t){lt.a.post("/api/users/login",e).then((function(e){var n=e.data.token;localStorage.setItem("jwtToken",n),ct(n);var r=at()(n);t(st(r))})).catch((function(e){t({type:"GET_ERRORS",payload:e})}))}}})(wn),En=n(150),kn=n.n(En);n(353);function Sn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return On(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return On(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function On(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var _n=function(e){var t=e.history,n=e.auth,i=e.registerUser,a=Sn(Object(r.useState)(""),2),u=a[0],l=a[1],c=Sn(Object(r.useState)(""),2),s=c[0],f=c[1],d=Sn(Object(r.useState)(""),2),p=d[0],h=d[1],v=Sn(Object(r.useState)(""),2),m=v[0],y=v[1],g=Sn(Object(r.useState)(""),2),b=g[0],w=g[1],x=Sn(Object(r.useState)(""),2),E=x[0],k=x[1];n.isAuthenticated&&t.push("/"),n.registerDone&&(kn()({title:"Tu registro fue exitoso",text:"Ahora puedes iniciar sesión",icon:"success"}),t.push("/login"));return o.a.createElement(bt,null,o.a.createElement("div",{className:"text-center mt-5"},o.a.createElement("h1",{className:"primary-dark"},"Nuevo Usuario"),o.a.createElement("span",{className:"primary-dark"},"Completa los siguientes datos")),o.a.createElement(ln,{onSubmit:function(e){e.preventDefault(),i({name:u,last_name:s,email:p,telephone:m,password:b,passwordConfirmation:E},t)}},o.a.createElement(fn,null,o.a.createElement(Vt,null,o.a.createElement(ln.Group,{controlId:"formName"},o.a.createElement(ln.Label,null,"Nombre(s)"),o.a.createElement(ln.Control,{type:"text",placeholder:"Juan Carlos",className:"primary-dark",value:u,onChange:function(e){return l(e.target.value)}}))),o.a.createElement(Vt,null,o.a.createElement(ln.Group,{controlId:"formLastName"},o.a.createElement(ln.Label,null,"Apellidos"),o.a.createElement(ln.Control,{type:"text",className:"primary-dark",placeholder:"Apellido paterno, materno",onChange:function(e){return f(e.target.value)}})))),o.a.createElement(fn,null,o.a.createElement(Vt,null,o.a.createElement(ln.Group,{controlId:"formHeight"},o.a.createElement(ln.Label,null,"Email"),o.a.createElement(ln.Control,{type:"text",className:"primary-dark",placeholder:"ejemplo@mail.com",onChange:function(e){return h(e.target.value)}}))),o.a.createElement(Vt,null,o.a.createElement(ln.Group,{controlId:"formWeight"},o.a.createElement(ln.Label,null,"Teléfono"),o.a.createElement(ln.Control,{type:"text",className:"primary-dark",placeholder:"(123) 456 6789",onChange:function(e){return y(e.target.value)}})))),o.a.createElement(fn,null,o.a.createElement(Vt,null,o.a.createElement(ln.Group,{controlId:"formHeight"},o.a.createElement(ln.Label,null,"Contraseña"),o.a.createElement(ln.Control,{type:"password",className:"primary-dark",placeholder:"***********",onChange:function(e){return w(e.target.value)}}))),o.a.createElement(Vt,null,o.a.createElement(ln.Group,{controlId:"formWeight"},o.a.createElement(ln.Label,null,"Confirma tu contraseña"),o.a.createElement(ln.Control,{type:"password",className:"primary-dark",placeholder:"***********",onChange:function(e){return k(e.target.value)}})))),o.a.createElement(fn,null,o.a.createElement(Vt,{className:"text-right"},o.a.createElement(yn,{type:"sumbit"},"Crear Usuario")))))};_n.propTypes={registerUser:c.a.func.isRequired,auth:c.a.object.isRequired,errors:c.a.object.isRequired};var Cn=rt((function(e){return{auth:e.auth,errors:e.errors}}),{registerUser:function(e){return function(t){lt.a.post("/api/users/register",e).then((function(e){t({type:"SET_SUCCESSFUL_REGISTER"})})).catch((function(e){return t({type:"GET_ERRORS",payload:e.response.data})}))}}})(function(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(D.a)(t,["wrappedComponentRef"]);return o.a.createElement(W.Consumer,null,(function(t){return t||m(!1),o.a.createElement(e,Object(s.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,z()(n,e)}(_n)),Pn=function(e){var t=e.logoutUser;return o.a.createElement(bt,null,o.a.createElement("div",{className:"text-center mt-5"},o.a.createElement("h1",{className:"primary-dark"},"Tienes una sesión activa")),o.a.createElement("div",{className:"mx-5 mt-3"},o.a.createElement(yn,{onClick:function(){t()}},"Logout")))};Pn.propTypes={logoutUser:c.a.func.isRequired,auth:c.a.object.isRequired,errors:c.a.object.isRequired};var An=rt((function(e){return{auth:e.auth,errors:e.errors}}),{logoutUser:ft})(Pn);function Nn(){return(Nn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Tn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var jn=function(e){var t=e.component,n=e.auth,r=Tn(e,["component","auth"]);return o.a.createElement(Z,Nn({},r,{render:function(e){return!0===n.isAuthenticated?o.a.createElement(t,e):o.a.createElement(Y,{to:"/login"})}}))};jn.propTypes={auth:c.a.object.isRequired};var Mn=rt((function(e){return{auth:e.auth}}))(jn);function In(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Rn=In();Rn.withExtraArgument=In;var Ln=Rn;function Fn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Un(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fn(Object(n),!0).forEach((function(t){Dn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Dn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Bn=n(356),zn={isAuthenticated:!1,user:{},loading:!1},Vn={},Wn=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,a=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1),u=null}}}function p(e){if(!Fe(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,a=i(a,e)}finally{c=!1}for(var t=u=l,n=0;n<t.length;n++){(0,t[n])()}return e}function h(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,p({type:Le.REPLACE})}function v(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[Ie.a]=function(){return this},e}return p({type:Le.INIT}),(o={dispatch:p,subscribe:d,getState:f,replaceReducer:h})[Ie.a]=v,o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Le.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:Le.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+Le.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var d=Ue(l,t);throw new Error(d)}o[l]=f,r=r||f!==s}return(r=r||a.length!==Object.keys(e).length)?o:e}}({auth:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:zn,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_CURRENT_USER":return Un(Un({},e),{},{isAuthenticated:!Bn(t.payload),user:t.payload});case"USER_LOADING":return Un(Un({},e),{},{loading:!0});case"SET_SUCCESSFUL_REGISTER":return Un(Un({},e),{},{registerDone:!0});case"CLEAR_REGISTER":return Un(Un({},e),{},{registerDone:null});default:return e}},errors:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Vn,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"GET_ERRORS":return t.payload;default:return e}}}),{},We(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return Ve({},n,{dispatch:r=We.apply(void 0,i)(n.dispatch)})}}}.apply(void 0,[Ln]),window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()||We));n(357);if(localStorage.jwtToken){var $n=localStorage.jwtToken;ct($n);var qn=at()($n);Wn.dispatch(st(qn));var Hn=Date.now()/1e3;qn.exp<Hn&&(Wn.dispatch(ft()),window.location.href="./login")}var Gn=function(){return o.a.createElement(we,{store:Wn},o.a.createElement(ae,null,o.a.createElement(ie,null,o.a.createElement(Z,{path:"/register",component:Cn}),o.a.createElement(Z,{path:"/login",component:xn}),o.a.createElement(Mn,{exact:!0,path:"/",component:An}))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var Kn=o.a.createElement(ae,null,o.a.createElement(Gn,null));a.a.render(Kn,document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2p3dC1kZWNvZGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3dlZXRhbGVydC93aXRoLXJlYWN0L2Rpc3Qvc3dlZXRhbGVydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzP2NmZTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qd3QtZGVjb2RlL2xpYi9iYXNlNjRfdXJsX2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvand0LWRlY29kZS9saWIvYXRvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F1dGgvTG9naW4vTG9naW4uY3NzPzNmMDgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9Mb2dpbi9Mb2dpbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3dlZXRhbGVydC90cmFuc2Zvcm1lci9kaXN0L3RyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2VldGFsZXJ0L2Rpc3Qvc3dlZXRhbGVydC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9SZWdpc3Rlci9SZWdpc3Rlci5jc3M/NGNmNiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL1JlZ2lzdGVyL1JlZ2lzdGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1lbXB0eS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5jc3M/ZDljZCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc2V0QXV0aFRva2VuLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2F1dGhBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9GZWVkYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtQ2hlY2tJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtQ2hlY2tMYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybUZpbGVJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtRmlsZUxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0Zvcm1GaWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0Zvcm1Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Db2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybUxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0Zvcm1UZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL2NyZWF0ZVdpdGhCc1ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL1Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vU2FmZUFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9Mb2dpbi9Mb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL1JlZ2lzdGVyL1JlZ2lzdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Rhc2hib2FyZC9EYXNoYm9hcmQvRGFzaGJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ByaXZhdGVSb3V0ZS9Qcml2YXRlUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9hdXRoUmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvZXJyb3JSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZVdvcmtlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiZW51bWVyYWJsZSIsImdldCIsImdldHRlciIsInZhbHVlIiwia2V5IiwiYmluZCIsIm1vZHVsZSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm9iamVjdCIsInByb3BlcnR5IiwiZXhwb3J0cyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsIm5hbWUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmciLCJhcmdUeXBlIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImlubmVyIiwiYXBwbHkiLCJqb2luIiwiZGVmYXVsdCIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiX19nIiwiZXhlYyIsImUiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwic3RvcmUiLCJ1aWQiLCJTeW1ib2wiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiZGVmaW5lUHJvcGVydHkiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRoaXMiLCJ2ZXJzaW9uIiwiX19lIiwiZGVmaW5lZCIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiU3RyaW5nIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJ0b1N0cmluZyIsImlzVW5kZWZpbmVkIiwiaXNQbGFpbk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwibCIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsInNsaWNlIiwiZXh0ZW5kIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImNyZWF0ZURlc2MiLCJJT2JqZWN0IiwibWV0aG9kIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiS0VZIiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY3JlYXRlIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwidGhhdCIsInJlcyIsImluZGV4IiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJhRnVuY3Rpb24iLCJjIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwibWFwIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJvIiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJ2YWx1ZU9mIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJ1c2VTb3VyY2VNYXAiLCJpdGVtIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJPYmplY3RQcm90byIsIl90IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJkZWYiLCJzdGF0IiwiVU5TQ09QQUJMRVMiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiZyIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIkQiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwibW9kZSIsImNvcHlyaWdodCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImNzcyIsIm1lZGlhIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJiYXNlNjRfdXJsX2RlY29kZSIsIkludmFsaWRUb2tlbkVycm9yIiwibWVzc2FnZSIsInRva2VuIiwicG9zIiwiaGVhZGVyIiwicGFyc2UiLCJpcyIsInNoYXJlZCIsImRvY3VtZW50RWxlbWVudCIsImNoZWNrIiwic2V0UHJvdG90eXBlT2YiLCJidWdneSIsIm4iLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJzIiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfayIsIkFyZ3VtZW50cyIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJtYXRjaCIsImF0IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJwcm9jZXNzIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInNldFRpbWVvdXQiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwibSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCJqIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJfbGVuIiwidmFsaWRhdG9ycyIsIl9rZXkiLCJhbGxQcm9wVHlwZXMiLCJfbGVuMiIsIl9rZXkyIiwidmFsaWRhdG9yIiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiIsIl9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsIl9fZXNNb2R1bGUiLCJyb290IiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJoIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwicHJvcHMiLCJfcHJvdG8iLCJnZXRDaGlsZENvbnRleHQiLCJfcmVmIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwieSIsImNoaWxkcmVuIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJwYXRoIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwiZmxhZ3MiLCJvcHRzIiwiZW5jb2RlIiwicHJldHR5Iiwic2VnbWVudCIsImF0dGFjaEtleXMiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJ3a3NFeHQiLCIkU3ltYm9sIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsIkEiLCJLIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJwYXJ0QXJncyIsImJvdW5kIiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIm1zZyIsImlzRmluaXRlIiwibG9nMXAiLCJyZXQiLCJpc1JpZ2h0IiwidG8iLCJpbmMiLCJmb3JjZWQiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsInRhc2siLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwicHJvbWlzZSIsInJlc29sdmUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInRoZW4iLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImZhaWwiLCJyZWplY3QiLCJkb21haW4iLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIlByb21pc2UiLCJyIiwiY2FwYWJpbGl0eSIsIiQkcmVqZWN0IiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsInByb21pc2VDYXBhYmlsaXR5IiwiJGl0ZXJEZWZpbmUiLCJTSVpFIiwiZ2V0RW50cnkiLCJlbnRyeSIsIl9mIiwiX2wiLCJwcmV2IiwiJGhhcyIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwidWZzdG9yZSIsIm51bWJlciIsIlJlZmxlY3QiLCJvd25LZXlzIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImlzRW50cmllcyIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidXRpbHMiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsIndhcm5pbmciLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiX2ludGVyb3BEZWZhdWx0IiwiZXgiLCJSZWFjdCIsIlJlYWN0RE9NIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lcl9fZGVmYXVsdCIsImdldERPTU5vZGVGcm9tSlNYIiwiRWxlbWVudCIsInN3YWwiLCJpc1ZhbGlkRWxlbWVudCIsImJpbmRBY3Rpb25zIiwiX2JhYmVsUG9seWZpbGwiLCJ3YXJuIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJ0IiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIkVQU0lMT04iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiZnJvdW5kIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsIiRhYnMiLCIkc2lnbiIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJjb2xvciIsInNpemUiLCJEYXRlIiwiZ2V0VGltZSIsInRvSlNPTiIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJkIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCJvcmlnaW5hbCIsIiRmaWx0ZXIiLCIkc29tZSIsIiRldmVyeSIsIiRyZWR1Y2UiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIkZmluZCIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJkZWZpbmUiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiJG1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIkxFTkdUSCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwibGFzdCIsImZsdXNoIiwicGFyZW50Iiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsIm5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInN0cm9uZyIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIiRXZWFrTWFwIiwiJGlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwicGFkU3RhcnQiLCIkcGFkIiwiV0VCS0lUX0JVRyIsInBhZEVuZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIm9uRmluYWxseSIsIk1TSUUiLCJ0aW1lIiwiYm91bmRBcmdzIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIkNvbnRpbnVlU2VudGluZWwiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJ1bndyYXBwZWQiLCJyZXR1cm4iLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwiUHJvZmlsZXIiLCJTdXNwZW5zZSIsInUiLCJmb3IiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwicmVmcyIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiY3VycmVudCIsIkgiLCJJIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJNIiwiTiIsImVzY2FwZSIsIlEiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJsYXp5IiwiX3BheWxvYWQiLCJfaW5pdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsImFhIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJvYSIsInBhIiwicWEiLCJtYSIsIm5hIiwibGEiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJRYSIsIl9yZW5kZXIiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiZGIiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJ1YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsImNoaWxkIiwic2libGluZyIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIk1hcCIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwibG9jYXRpb24iLCJsb2NhbGUiLCJ3aGljaCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJuZXh0U2libGluZyIsIk5lIiwiaHJlZiIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJwYXNzaXZlIiwiTmIiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJwZiIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiS2ciLCJfcmVhY3RJbnRlcm5hbHMiLCJIZyIsIklnIiwiSmciLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIk1nIiwiTmciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiUGciLCJRZyIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlRnIiwiVWciLCJlbGVtZW50VHlwZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIldlYWtNYXAiLCJQaSIsImVsZW1lbnQiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInBlcmZvcm1hbmNlIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsImFwaSIsImxvY2FscyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJmdW5jIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZWNvZGVVUklDb21wb25lbnQiLCJiNjREZWNvZGVVbmljb2RlIiwiSW52YWxpZENoYXJhY3RlckVycm9yIiwiYnMiLCJpZHgiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsIm5vcm1hbGl6ZWROYW1lIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJleHBpcmVzIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJyZXNvbHZlUHJvbWlzZSIsImNoZWNrVHlwZSIsImNvbXBvbmVudE5hbWVTYWZlIiwicHJvcEZ1bGxOYW1lU2FmZSIsImNoYWluZWRDaGVja1R5cGUiLCJnZXRPcHRpb25zIiwibmV3T3B0aW9ucyIsInRyYW5zZm9ybVBhcmFtcyIsInBhcnNlVGV4dFBhcmFtcyIsImxhc3RQYXJhbSIsImlzT3B0aW9uc1BhcmFtIiwiaWNvbiIsImlzVHJhbnNmb3JtYWJsZSIsImlzQXN5bmMiLCJuZXdPcHRzIiwidHJhbnNmb3JtRWwiLCJ0cmFuc2Zvcm1TaW5nbGVQYXJhbSIsImxhc3RQYXJhbUluZGV4IiwidHJhbnNmb3JtQ29udGVudE9wdGlvbiIsInN3YWxJbnN0YW5jZSIsIkNMQVNTX05BTUVTIiwiTU9EQUwiLCJPVkVSTEFZIiwiU0hPV19NT0RBTCIsIk1PREFMX1RJVExFIiwiTU9EQUxfVEVYVCIsIklDT04iLCJJQ09OX0NVU1RPTSIsIkNPTlRFTlQiLCJGT09URVIiLCJCVVRUT05fQ09OVEFJTkVSIiwiQlVUVE9OIiwiQ09ORklSTV9CVVRUT04iLCJDQU5DRUxfQlVUVE9OIiwiREFOR0VSX0JVVFRPTiIsIkJVVFRPTl9MT0FESU5HIiwiQlVUVE9OX0xPQURFUiIsImdldE5vZGUiLCJzdHJpbmdUb05vZGUiLCJpbnNlcnRBZnRlciIsInJlbW92ZU5vZGUiLCJwYXJlbnRFbGVtZW50IiwidGhyb3dFcnIiLCJvcmRpbmFsU3VmZml4T2YiLCJvdmVybGF5TWFya3VwIiwiaWNvbk1hcmt1cCIsInRpdGxlTWFya3VwIiwidGV4dE1hcmt1cCIsImZvb3Rlck1hcmt1cCIsIkNPTkZJUk1fS0VZIiwiQ0FOQ0VMX0tFWSIsInZpc2libGUiLCJjbGFzc05hbWUiLCJjbG9zZU1vZGFsIiwiZGVmYXVsdEJ1dHRvbkxpc3QiLCJjb25maXJtIiwiZ2V0QnV0dG9uTGlzdE9wdHMiLCJpbmplY3RFbEludG9Nb2RhbCIsImNsYXNzTGlzdCIsImluaXRNb2RhbENvbnRlbnQiLCJpbml0VGl0bGUiLCJpbml0VGV4dCIsImRhbmdlck1vZGUiLCJtb2RhbE1hcmt1cCIsImlzT3BlbiIsImFjdGlvbnMiLCJ0aW1lciIsInJlc2V0U3RhdGUiLCJzZXRBY3Rpb25WYWx1ZSIsInNldEFjdGlvbk9wdGlvbnNGb3IiLCJvcGVuTW9kYWwiLCJvbkFjdGlvbiIsImdldFN0YXRlIiwic3RvcExvYWRpbmciLCJldmFsIiwic3dlZXRBbGVydCIsImluc2VydEF0IiwiaW5zZXJ0SW50byIsImF0dHJzIiwicmVsIiwidHJhbnNmb3JtIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsIkRFQlVHIiwiQ2hhcmFjdGVyRGF0YSIsIkRvY3VtZW50VHlwZSIsIl9zdGF0ZSIsIl9oYW5kbGVkIiwiX3ZhbHVlIiwiX2RlZmVycmVkcyIsIl9pbW1lZGlhdGVGbiIsIl91bmhhbmRsZWRSZWplY3Rpb25GbiIsImNhdGNoIiwiX3NldEltbWVkaWF0ZUZuIiwiX3NldFVuaGFuZGxlZFJlamVjdGlvbkZuIiwicG9seWZpbGwiLCJnZXRPcHRzIiwic2V0RGVmYXVsdHMiLCJlcnJvckljb25NYXJrdXAiLCJ3YXJuaW5nSWNvbk1hcmt1cCIsInN1Y2Nlc3NJY29uTWFya3VwIiwiY29udGVudE1hcmt1cCIsImJ1dHRvbk1hcmt1cCIsInN1Y2Nlc3MiLCJvZmZzZXRIZWlnaHQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwidGFiSW5kZXgiLCJjbG9zZU9uRXNjIiwiXyIsImNsb3NlT25DbGlja091dHNpZGUiLCJnZXRDb250ZW50T3B0cyIsIkRFUFJFQ0FURURfT1BUUyIsImxvZ0RlcHJlY2F0aW9uIiwicGxhY2Vob2xkZXIiLCJvbmx5UmVuYW1lIiwic3ViT3B0aW9uIiwiaW1hZ2VVcmwiLCJjdXN0b21DbGFzcyIsImltYWdlU2l6ZSIsInNob3dDYW5jZWxCdXR0b24iLCJzaG93Q29uZmlybUJ1dHRvbiIsImNvbmZpcm1CdXR0b25UZXh0IiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiY2FuY2VsQnV0dG9uVGV4dCIsImNsb3NlT25Db25maXJtIiwiY2xvc2VPbkNhbmNlbCIsInNob3dMb2FkZXJPbkNvbmZpcm0iLCJpbnB1dFR5cGUiLCJpbnB1dFZhbHVlIiwiaW5wdXRQbGFjZWhvbGRlciIsImFsbG93RXNjYXBlS2V5IiwiYWxsb3dDbGlja091dHNpZGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwic2NyaXB0IiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJ2YWx1ZUVxdWFsIiwiYVZhbHVlIiwiYlZhbHVlIiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwiYWxsS2V5cyIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwiYmFzZVRhZyIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJMaWZlY3ljbGUiLCJvbk1vdW50IiwicHJldlByb3BzIiwib25Vbm1vdW50IiwiY2FjaGUiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwiY29tcGlsZVBhdGgkMSIsIlJvdXRlIiwiY29udGV4dCQxIiwiX3RoaXMkcHJvcHMiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIlN3aXRjaCIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsIlJlYWN0UmVkdXhDb250ZXh0IiwibnVsbExpc3RlbmVycyIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImJhdGNoIiwiaXNTdWJzY3JpYmVkIiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiX2RlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZU9ubHkiLCJfb2JqZWN0U3ByZWFkMiIsImNvbXBvc2UiLCJmdW5jcyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInN0cmljdEVxdWFsIiwiY3JlYXRlQ29ubmVjdCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwibmV3QmF0Y2giLCJzZXRBdXRoVG9rZW4iLCJzZXRDdXJyZW50VXNlciIsImRlY29kZWQiLCJsb2dvdXRVc2VyIiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsIlRoZW1lQ29udGV4dCIsInVzZUJvb3RzdHJhcFByZWZpeCIsImRlZmF1bHRQcmVmaXgiLCJwcmVmaXhlcyIsIkNvbnRhaW5lciIsImJzUHJlZml4IiwiZmx1aWQiLCJfcmVmJGFzIiwiYXMiLCJzdWZmaXgiLCJ0b29sdGlwIiwiRmVlZGJhY2siLCJfcmVmJHR5cGUiLCJfcmVmJHRvb2x0aXAiLCJjb250cm9sSWQiLCJGb3JtQ2hlY2tJbnB1dCIsImJzQ3VzdG9tUHJlZml4IiwiX3JlZiRpc1ZhbGlkIiwiaXNWYWxpZCIsIl9yZWYkaXNJbnZhbGlkIiwiaXNJbnZhbGlkIiwiaXNTdGF0aWMiLCJfdXNlQ29udGV4dCIsImN1c3RvbSIsIkZvcm1DaGVja0xhYmVsIiwiaHRtbEZvciIsIkZvcm1DaGVjayIsIl9yZWYkaW5saW5lIiwiaW5saW5lIiwiX3JlZiRkaXNhYmxlZCIsIl9yZWYkZmVlZGJhY2tUb29sdGlwIiwiZmVlZGJhY2tUb29sdGlwIiwiZmVlZGJhY2siLCJfcmVmJHRpdGxlIiwibGFiZWwiLCJwcm9wQ3VzdG9tIiwiaW5uZXJGb3JtQ29udGV4dCIsImhhc0xhYmVsIiwiSW5wdXQiLCJMYWJlbCIsIkZvcm1GaWxlSW5wdXQiLCJsYW5nIiwiRm9ybUZpbGVMYWJlbCIsIkZvcm1GaWxlIiwiZGF0YUJyb3dzZSIsIl9yZWYkaW5wdXRBcyIsImlucHV0QXMiLCJGb3JtQ29udHJvbCIsIl9jbGFzc2VzIiwiaHRtbFNpemUiLCJwbGFpbnRleHQiLCJyZWFkT25seSIsIl9jbGFzc2VzMiIsIl9jbGFzc2VzMyIsIl9jbGFzc2VzNCIsIl9jbGFzc2VzNSIsIkZvcm1Hcm91cCIsIkRFVklDRV9TSVpFUyIsIkNvbCIsInNwYW5zIiwiYnJrUG9pbnQiLCJzcGFuIiwicHJvcFZhbHVlIiwiX3Byb3BWYWx1ZSRzcGFuIiwiaW5maXgiLCJGb3JtTGFiZWwiLCJjb2x1bW4iLCJzck9ubHkiLCJjb2x1bW5DbGFzcyIsIkZvcm1UZXh0IiwibXV0ZWQiLCJySHlwaGVuIiwiY2hyIiwiX3JlZiRkaXNwbGF5TmFtZSIsIkJzQ29tcG9uZW50IiwiRm9ybVJvdyIsIl9yZWYyJGFzIiwiVGFnIiwicmVzb2x2ZWRQcmVmaXgiLCJGb3JtSW1wbCIsInZhbGlkYXRlZCIsIlJvdyIsIkdyb3VwIiwiQ2hlY2siLCJGaWxlIiwiVGV4dCIsIkZvcm0iLCJub0d1dHRlcnMiLCJkZWNvcmF0ZWRCc1ByZWZpeCIsInNpemVQcmVmaXgiLCJjb2xzIiwiaXNUcml2aWFsSHJlZiIsIlNhZmVBbmNob3IiLCJvbktleURvd24iLCJoYW5kbGVDbGljayIsInJvbGUiLCJCdXR0b24iLCJ2YXJpYW50IiwiTG9naW4iLCJsb2dpblVzZXIiLCJzZXRFbWFpbCIsInNldFBhc3N3b3JkIiwiaXNBdXRoZW50aWNhdGVkIiwib25TdWJtaXQiLCJvbkNoYW5nZSIsInNtIiwiZXJyb3JzIiwiY29ubmVjdCIsInVzZXJEYXRhIiwicG9zdCIsInNldEl0ZW0iLCJqd3RfZGVjb2RlIiwiUmVnaXN0ZXIiLCJyZWdpc3RlclVzZXIiLCJzZXROYW1lIiwibGFzdE5hbWUiLCJzZXRMYXN0TmFtZSIsInBob25lIiwic2V0UGhvbmUiLCJwYXNzd29yZDIiLCJzZXRQYXNzd29yZDIiLCJyZWdpc3RlckRvbmUiLCJsYXN0X25hbWUiLCJ0ZWxlcGhvbmUiLCJwYXNzd29yZENvbmZpcm1hdGlvbiIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIndpdGhSb3V0ZXIiLCJEYXNoYm9hcmQiLCJQcml2YXRlUm91dGUiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImlzRW1wdHkiLCJyZXF1aXJlIiwiaW5pdGlhbFN0YXRlIiwidXNlciIsImxvYWRpbmciLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiand0VG9rZW4iLCJjdXJyZW50VGltZSIsIkFwcCIsImFwcCIsImdldEVsZW1lbnRCeUlkIiwic2VydmljZVdvcmtlciIsInJlYWR5IiwicmVnaXN0cmF0aW9uIiwidW5yZWdpc3RlciJdLCJtYXBwaW5ncyI6ImFBQ0Es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LEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLElBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFR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cEM5QmhxRixRQUNXLGNBQTdCcGQsT0FBT2czRCxTQUFTMHBCLFVBRWUsVUFBN0IxZ0YsT0FBT2czRCxTQUFTMHBCLFVBRWhCMWdGLE9BQU9nM0QsU0FBUzBwQixTQUFTcjhELE1BQ3ZCLDJEQ1ROLElBQU00bEYsR0FDSixrQkFBQyxHQUFELEtBQ0Usa0JBQUMsR0FBRCxPQUlKaHFFLElBQVMxbkIsT0FBTzB4RixHQUFLamxHLFNBQVNrbEcsZUFBZSxTRGdIdkMsa0JBQW1CcGxHLFdBQ3JCQSxVQUFVcWxHLGNBQWNDLE1BQU10M0UsTUFBSyxTQUFDdTNFLEdBQ2xDQSxFQUFhQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE1MSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJhc2U2NF91cmxfZGVjb2RlID0gcmVxdWlyZSgnLi9iYXNlNjRfdXJsX2RlY29kZScpO1xuXG5mdW5jdGlvbiBJbnZhbGlkVG9rZW5FcnJvcihtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkludmFsaWRUb2tlbkVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuSW52YWxpZFRva2VuRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZFRva2VuRXJyb3InO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0b2tlbixvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRUb2tlbkVycm9yKCdJbnZhbGlkIHRva2VuIHNwZWNpZmllZCcpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBwb3MgPSBvcHRpb25zLmhlYWRlciA9PT0gdHJ1ZSA/IDAgOiAxO1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGJhc2U2NF91cmxfZGVjb2RlKHRva2VuLnNwbGl0KCcuJylbcG9zXSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRUb2tlbkVycm9yKCdJbnZhbGlkIHRva2VuIHNwZWNpZmllZDogJyArIGUubWVzc2FnZSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLkludmFsaWRUb2tlbkVycm9yID0gSW52YWxpZFRva2VuRXJyb3I7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhbGw7XG5cbnZhciBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyJyk7XG5cbnZhciBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBhbGwoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB2YWxpZGF0b3JzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgdmFsaWRhdG9yc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbFByb3BUeXBlcygpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICB2YWxpZGF0b3JzLmZvckVhY2goZnVuY3Rpb24gKHZhbGlkYXRvcikge1xuICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gdmFsaWRhdG9yLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgZXJyb3IgPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICByZXR1cm4gKDAsIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIuZGVmYXVsdCkoYWxsUHJvcFR5cGVzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdCcpKTtcbnZhciBSZWFjdERPTSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdC1kb20nKSk7XG52YXIgdHJhbnNmb3JtZXIgPSByZXF1aXJlKCdAc3dlZXRhbGVydC90cmFuc2Zvcm1lcicpO1xudmFyIHRyYW5zZm9ybWVyX19kZWZhdWx0ID0gX2ludGVyb3BEZWZhdWx0KHRyYW5zZm9ybWVyKTtcblxuLypcbiAqIENvbnZlcnQgPEVsZW1lbnQgLz4gdG8gcHVyZSBET00gbm9kZSB1c2luZyBSZWFjdERPTVxuICogKHJlbWVtYmVyIHRoYXQgUmVhY3RET00ucmVuZGVyKCkgaXMgYXN5bmMhKVxuICovXG5jb25zdCBnZXRET01Ob2RlRnJvbUpTWCA9IChFbGVtZW50KSA9PiB7XG4gIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBSZWFjdERPTS5yZW5kZXIoRWxlbWVudCwgd3JhcHBlciwgKCkgPT4ge1xuICAgICAgY29uc3QgZWwgPSB3cmFwcGVyLmZpcnN0Q2hpbGQ7XG5cbiAgICAgIHJldHVybiByZXNvbHZlKGVsKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBzd2FsID0gKC4uLnBhcmFtcykgPT4gKFxuICB0cmFuc2Zvcm1lcl9fZGVmYXVsdChwYXJhbXMsIHtcbiAgICBpZGVudGlmaWVyOiBSZWFjdC5pc1ZhbGlkRWxlbWVudCxcbiAgICB0cmFuc2Zvcm1lcjogZ2V0RE9NTm9kZUZyb21KU1gsIFxuICB9KVxuKTtcblxudHJhbnNmb3JtZXIuYmluZEFjdGlvbnMoc3dhbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3dhbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2Fybikge1xuICBjb25zb2xlLndhcm4oXCJAYmFiZWwvcG9seWZpbGwgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlIG9uIHRoaXMgcGFnZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgZGVzaXJhYmxlL2ludGVuZGVkIFwiICsgXCJhbmQgbWF5IGhhdmUgY29uc2VxdWVuY2VzIGlmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgcG9seWZpbGxzIGFyZSBhcHBsaWVkIHNlcXVlbnRpYWxseS4gXCIgKyBcIklmIHlvdSBkbyBuZWVkIHRvIGxvYWQgdGhlIHBvbHlmaWxsIG1vcmUgdGhhbiBvbmNlLCB1c2UgQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QgXCIgKyBcImluc3RlYWQgdG8gYnlwYXNzIHRoZSB3YXJuaW5nLlwiKTtcbn1cblxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZW50cmllcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RE0rU2FuczpyZWd1bGFyLG1lZGl1bSxib2xkKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJETSBTYW5zXFxcIiwgXFxcIlJvYm90b1xcXCIsIFxcXCJPeHlnZW5cXFwiLCBcXFwiVWJ1bnR1XFxcIiwgXFxcIkRyb2lkIFNhbnNcXFwiLFxcbiAgICBzYW5zLXNlcmlmO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbn1cXG5cXG5jb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBzb3VyY2UtY29kZS1wcm8sIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcXFwiQ291cmllciBOZXdcXFwiLFxcbiAgICBtb25vc3BhY2U7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdBO0VBQ0UsU0FBUztFQUNULFVBQVU7RUFDVjtjQUNZO0VBQ1osbUNBQW1DO0VBQ25DLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFO2FBQ1c7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RE0rU2FuczpyZWd1bGFyLG1lZGl1bSxib2xkKTtcXG5cXG5cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LWZhbWlseTogXFxcIkRNIFNhbnNcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiRHJvaWQgU2Fuc1xcXCIsXFxuICAgIHNhbnMtc2VyaWY7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbmNvZGUge1xcbiAgZm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJDb3VyaWVyIE5ld1xcXCIsXFxuICAgIG1vbm9zcGFjZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBhdG9iID0gcmVxdWlyZSgnLi9hdG9iJyk7XG5cbmZ1bmN0aW9uIGI2NERlY29kZVVuaWNvZGUoc3RyKSB7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoYXRvYihzdHIpLnJlcGxhY2UoLyguKS9nLCBmdW5jdGlvbiAobSwgcCkge1xuICAgIHZhciBjb2RlID0gcC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChjb2RlLmxlbmd0aCA8IDIpIHtcbiAgICAgIGNvZGUgPSAnMCcgKyBjb2RlO1xuICAgIH1cbiAgICByZXR1cm4gJyUnICsgY29kZTtcbiAgfSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgb3V0cHV0ID0gc3RyLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpO1xuICBzd2l0Y2ggKG91dHB1dC5sZW5ndGggJSA0KSB7XG4gICAgY2FzZSAwOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgb3V0cHV0ICs9IFwiPT1cIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIG91dHB1dCArPSBcIj1cIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBcIklsbGVnYWwgYmFzZTY0dXJsIHN0cmluZyFcIjtcbiAgfVxuXG4gIHRyeXtcbiAgICByZXR1cm4gYjY0RGVjb2RlVW5pY29kZShvdXRwdXQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gYXRvYihvdXRwdXQpO1xuICB9XG59O1xuIiwiLyoqXG4gKiBUaGUgY29kZSB3YXMgZXh0cmFjdGVkIGZyb206XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcbiAqL1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gcG9seWZpbGwgKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpLnJlcGxhY2UoLz0rJC8sICcnKTtcbiAgaWYgKHN0ci5sZW5ndGggJSA0ID09IDEpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKFwiJ2F0b2InIGZhaWxlZDogVGhlIHN0cmluZyB0byBiZSBkZWNvZGVkIGlzIG5vdCBjb3JyZWN0bHkgZW5jb2RlZC5cIik7XG4gIH1cbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlcnNcbiAgICB2YXIgYmMgPSAwLCBicywgYnVmZmVyLCBpZHggPSAwLCBvdXRwdXQgPSAnJztcbiAgICAvLyBnZXQgbmV4dCBjaGFyYWN0ZXJcbiAgICBidWZmZXIgPSBzdHIuY2hhckF0KGlkeCsrKTtcbiAgICAvLyBjaGFyYWN0ZXIgZm91bmQgaW4gdGFibGU/IGluaXRpYWxpemUgYml0IHN0b3JhZ2UgYW5kIGFkZCBpdHMgYXNjaWkgdmFsdWU7XG4gICAgfmJ1ZmZlciAmJiAoYnMgPSBiYyAlIDQgPyBicyAqIDY0ICsgYnVmZmVyIDogYnVmZmVyLFxuICAgICAgLy8gYW5kIGlmIG5vdCBmaXJzdCBvZiBlYWNoIDQgY2hhcmFjdGVycyxcbiAgICAgIC8vIGNvbnZlcnQgdGhlIGZpcnN0IDggYml0cyB0byBvbmUgYXNjaWkgY2hhcmFjdGVyXG4gICAgICBiYysrICUgNCkgPyBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUgJiBicyA+PiAoLTIgKiBiYyAmIDYpKSA6IDBcbiAgKSB7XG4gICAgLy8gdHJ5IHRvIGZpbmQgY2hhcmFjdGVyIGluIHRhYmxlICgwLTYzLCBub3QgZm91bmQgPT4gLTEpXG4gICAgYnVmZmVyID0gY2hhcnMuaW5kZXhPZihidWZmZXIpO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYXRvYiAmJiB3aW5kb3cuYXRvYi5iaW5kKHdpbmRvdykgfHwgcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5qdW1ib3Ryb24ge1xcblxcdGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcblxcbi5mdWxsLWhlaWdodCB7XFxuXFx0aGVpZ2h0OiAxMDB2aCAhaW1wb3J0YW50O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL2NvbXBvbmVudHMvYXV0aC9Mb2dpbi9Mb2dpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQyxtQkFBbUI7QUFDcEI7O0FBRUE7Q0FDQyx3QkFBd0I7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmp1bWJvdHJvbiB7XFxuXFx0Ym9yZGVyLXJhZGl1czogMTBweDtcXG59XFxuXFxuLmZ1bGwtaGVpZ2h0IHtcXG5cXHRoZWlnaHQ6IDEwMHZoICFpbXBvcnRhbnQ7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbi8vIE1vc3RseSB0YWtlbiBmcm9tIFJlYWN0UHJvcFR5cGVzLlxuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWVTYWZlICsgJ2Agd2FzIG5vdCBzcGVjaWZpZWQgJyArICgnaW4gYCcgKyBjb21wb25lbnROYW1lU2FmZSArICdgLicpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNiA/IF9sZW4gLSA2IDogMCksIF9rZXkgPSA2OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA2XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGUuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lU2FmZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZVNhZmVdLmNvbmNhdChhcmdzKSk7XG4gIH1cblxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgc3dhbCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdzd2VldGFsZXJ0JykpO1xuXG52YXIgaW5kZXggPSBhc3luYyAoLi4uYXJncykgPT4ge1xuICBjb25zdCBuZXdPcHRpb25zID0gYXdhaXQgZ2V0T3B0aW9ucyguLi5hcmdzKTtcblxuICByZXR1cm4gc3dhbChuZXdPcHRpb25zKTtcbn07XG5cbmNvbnN0IGJpbmRBY3Rpb25zID0gKHN3YWxJbnN0YW5jZSkgPT4ge1xuICBmb3IgKGNvbnN0IG1ldGhvZCBpbiBzd2FsKSB7XG4gICAgc3dhbEluc3RhbmNlW21ldGhvZF0gPSBzd2FsW21ldGhvZF07XG4gIH1cbn07XG5cbmNvbnN0IGdldE9wdGlvbnMgPSBhc3luYyAocGFyYW1zLCB7XG4gIGlkZW50aWZpZXIsXG4gIHRyYW5zZm9ybWVyLFxufSkgPT4ge1xuXG4gIGxldCBuZXdPcHRpb25zID0gYXdhaXQgdHJhbnNmb3JtUGFyYW1zKFxuICAgIHBhcmFtcywgXG4gICAgaWRlbnRpZmllciwgXG4gICAgdHJhbnNmb3JtZXIsIFxuICApO1xuXG4gIG5ld09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJzZVRleHRQYXJhbXMocGFyYW1zKSwgbmV3T3B0aW9ucyk7XG5cbiAgY29uc3QgbGFzdFBhcmFtID0gcGFyYW1zW3BhcmFtcy5sZW5ndGggLSAxXTtcblxuICAvKlxuICAgKiBTbyB0aGF0IHdlIGRvbid0IGxvc2Ugb3RoZXIgc3BlY2lmaWVkIG9wdGlvbnNcbiAgICogc3VjaCBhcyBidXR0b25zLi4uIGV0Yy5cbiAgICovXG4gIGlmIChpc09wdGlvbnNQYXJhbShsYXN0UGFyYW0sIGlkZW50aWZpZXIpKSB7XG4gICAgbmV3T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGxhc3RQYXJhbSwgbmV3T3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gbmV3T3B0aW9ucztcbn07XG5cbmNvbnN0IHBhcnNlVGV4dFBhcmFtcyA9IHBhcmFtcyA9PiB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICBjb25zdCBpc1N0cmluZyA9IHBhcmFtID0+IHR5cGVvZiBwYXJhbSA9PT0gXCJzdHJpbmdcIjtcblxuICBpZiAoaXNTdHJpbmcocGFyYW1zWzBdKSAmJiAhaXNTdHJpbmcocGFyYW1zWzFdKSkge1xuICAgIG9wdGlvbnMudGV4dCA9IHBhcmFtc1swXTtcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhwYXJhbXNbMV0pKSB7XG4gICAgb3B0aW9ucy50aXRsZSA9IHBhcmFtc1swXTtcbiAgICBvcHRpb25zLnRleHQgPSBwYXJhbXNbMV07XG4gIH1cblxuICBpZiAoaXNTdHJpbmcocGFyYW1zWzJdKSkge1xuICAgIG9wdGlvbnMuaWNvbiA9IHBhcmFtc1syXTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuLy8gUmV0dXJuIHRydWUgaWYgcGFyYW0gaXMgYSBTd2FsT3B0aW9ucyBvYmplY3RcbmNvbnN0IGlzT3B0aW9uc1BhcmFtID0gKHBhcmFtLCBpc1RyYW5zZm9ybWFibGUpID0+IChcbiAgKHBhcmFtLmNvbnN0cnVjdG9yID09PSBPYmplY3QpICYmIFxuICAoIWlzVHJhbnNmb3JtYWJsZShwYXJhbSkpXG4pO1xuXG4vKlxuICogQHBhcmFtczogKFN3YWxQYXJhbXMsIEZ1bmN0aW9uLCBGdW5jdGlvbiwgYm9vbGVhbilcbiAqIEByZXR1cm5zOiBTd2FsT3B0aW9uc1xuICovXG5jb25zdCB0cmFuc2Zvcm1QYXJhbXMgPSBhc3luYyAocGFyYW1zLCBpc1RyYW5zZm9ybWFibGUsIHRyYW5zZm9ybWVyKSA9PiB7XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIHRyYW5zZm9ybSByZXR1cm5zIGEgRE9NIHN5bmNocm9ub3VzbHlcbiAgLy8gb3IgaWYgaXQgaXMgYSBwcm9taXNlOlxuICBjb25zdCBpc0FzeW5jID0gdHJhbnNmb3JtZXIoKSBpbnN0YW5jZW9mIFByb21pc2U7XG5cbiAgLypcbiAgICogRXhhbXBsZTpcbiAgICogICBzd2FsKDxkaXY+SGVsbG8hPC9kaXY+KTtcbiAgICovXG4gIGNvbnN0IHRyYW5zZm9ybVNpbmdsZVBhcmFtID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGVsID0gcGFyYW1zWzBdO1xuXG4gICAgaWYgKCFpc1RyYW5zZm9ybWFibGUoZWwpKSByZXR1cm47XG5cbiAgICBjb25zdCBuZXdDb250ZW50ID0gYXdhaXQgdHJhbnNmb3JtRWwoZWwsIHRyYW5zZm9ybWVyLCBpc0FzeW5jKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiBuZXdDb250ZW50LFxuICAgIH07XG4gIH07XG5cbiAgLypcbiAgICogRXhhbXBsZTpcbiAgICogICBzd2FsKFwiSGlcIiwgeyBcbiAgICogICAgIGNvbnRlbnQ6IDxkaXY+SGVsbG8hPC9kaXY+IFxuICAgKiAgIH0pXG4gICAqL1xuICBjb25zdCB0cmFuc2Zvcm1Db250ZW50T3B0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxhc3RQYXJhbUluZGV4ID0gKHBhcmFtcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBsYXN0UGFyYW0gPSBwYXJhbXNbbGFzdFBhcmFtSW5kZXhdO1xuXG4gICAgaWYgKCFsYXN0UGFyYW0gfHwgIWxhc3RQYXJhbS5jb250ZW50KSByZXR1cm47XG5cbiAgICBsZXQgeyBjb250ZW50LCBidXR0b24gfSA9IGxhc3RQYXJhbTtcblxuICAgIGlmIChpc1RyYW5zZm9ybWFibGUoY29udGVudCkpIHtcbiAgICAgIGNvbnRlbnQgPSBhd2FpdCB0cmFuc2Zvcm1FbChjb250ZW50LCB0cmFuc2Zvcm1lciwgaXNBc3luYyk7XG4gICAgfVxuXG4gICAgLyogVE9ETz9cbiAgICBpZiAoaXNUcmFuc2Zvcm1hYmxlKGJ1dHRvbikpIHtcbiAgICAgIGJ1dHRvbiA9IGF3YWl0IHRyYW5zZm9ybUVsKGJ1dHRvbiwgdHJhbnNmb3JtZXIsIGlzQXN5bmMpO1xuICAgIH1cbiAgICAqL1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICAvL2J1dHRvbixcbiAgICB9O1xuICB9O1xuXG4gIC8qXG4gICAqIE9ubHkgdHJhbnNmb3JtIHRoZSBwYXJhbXMgdGhhdCBjYW4gXG4gICAqIGhhdmUgYSBET00gbm9kZSBhcyB0aGVpciB2YWx1ZVxuICAgKi9cbiAgY29uc3QgbmV3T3B0cyA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICB0cmFuc2Zvcm1TaW5nbGVQYXJhbSgpLFxuICAgIHRyYW5zZm9ybUNvbnRlbnRPcHRpb24oKSxcbiAgXSk7XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIC4uLm5ld09wdHMpO1xufTtcblxuLy8gVHJhbnNmb3JtIGEgc2luZ2xlIG9wdGlvblxuY29uc3QgdHJhbnNmb3JtRWwgPSBhc3luYyAoZWwsIHRyYW5zZm9ybWVyLCBpc0FzeW5jKSA9PiB7XG4gIHJldHVybiAoaXNBc3luYykgPyBhd2FpdCB0cmFuc2Zvcm1lcihlbCkgOiB0cmFuc2Zvcm1lcihlbCk7XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBpbmRleDtcbmV4cG9ydHMuYmluZEFjdGlvbnMgPSBiaW5kQWN0aW9ucztcbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuc3dhbD1lKCk6dC5zd2FsPWUoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiBlKG8pe2lmKG5bb10pcmV0dXJuIG5bb10uZXhwb3J0czt2YXIgcj1uW29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxlKSxyLmw9ITAsci5leHBvcnRzfXZhciBuPXt9O3JldHVybiBlLm09dCxlLmM9bixlLmQ9ZnVuY3Rpb24odCxuLG8pe2Uubyh0LG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6b30pfSxlLm49ZnVuY3Rpb24odCl7dmFyIG49dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChuLFwiYVwiLG4pLG59LGUubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sZS5wPVwiXCIsZShlLnM9OCl9KFtmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89XCJzd2FsLWJ1dHRvblwiO2UuQ0xBU1NfTkFNRVM9e01PREFMOlwic3dhbC1tb2RhbFwiLE9WRVJMQVk6XCJzd2FsLW92ZXJsYXlcIixTSE9XX01PREFMOlwic3dhbC1vdmVybGF5LS1zaG93LW1vZGFsXCIsTU9EQUxfVElUTEU6XCJzd2FsLXRpdGxlXCIsTU9EQUxfVEVYVDpcInN3YWwtdGV4dFwiLElDT046XCJzd2FsLWljb25cIixJQ09OX0NVU1RPTTpcInN3YWwtaWNvbi0tY3VzdG9tXCIsQ09OVEVOVDpcInN3YWwtY29udGVudFwiLEZPT1RFUjpcInN3YWwtZm9vdGVyXCIsQlVUVE9OX0NPTlRBSU5FUjpcInN3YWwtYnV0dG9uLWNvbnRhaW5lclwiLEJVVFRPTjpvLENPTkZJUk1fQlVUVE9OOm8rXCItLWNvbmZpcm1cIixDQU5DRUxfQlVUVE9OOm8rXCItLWNhbmNlbFwiLERBTkdFUl9CVVRUT046bytcIi0tZGFuZ2VyXCIsQlVUVE9OX0xPQURJTkc6bytcIi0tbG9hZGluZ1wiLEJVVFRPTl9MT0FERVI6bytcIl9fbG9hZGVyXCJ9LGUuZGVmYXVsdD1lLkNMQVNTX05BTUVTfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5nZXROb2RlPWZ1bmN0aW9uKHQpe3ZhciBlPVwiLlwiK3Q7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSl9LGUuc3RyaW5nVG9Ob2RlPWZ1bmN0aW9uKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGUuaW5uZXJIVE1MPXQudHJpbSgpLGUuZmlyc3RDaGlsZH0sZS5pbnNlcnRBZnRlcj1mdW5jdGlvbih0LGUpe3ZhciBuPWUubmV4dFNpYmxpbmc7ZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LG4pfSxlLnJlbW92ZU5vZGU9ZnVuY3Rpb24odCl7dC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHQpfSxlLnRocm93RXJyPWZ1bmN0aW9uKHQpe3Rocm93IHQ9dC5yZXBsYWNlKC8gKyg/PSApL2csXCJcIiksXCJTd2VldEFsZXJ0OiBcIisodD10LnRyaW0oKSl9LGUuaXNQbGFpbk9iamVjdD1mdW5jdGlvbih0KXtpZihcIltvYmplY3QgT2JqZWN0XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXJldHVybiExO3ZhciBlPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gbnVsbD09PWV8fGU9PT1PYmplY3QucHJvdG90eXBlfSxlLm9yZGluYWxTdWZmaXhPZj1mdW5jdGlvbih0KXt2YXIgZT10JTEwLG49dCUxMDA7cmV0dXJuIDE9PT1lJiYxMSE9PW4/dCtcInN0XCI6Mj09PWUmJjEyIT09bj90K1wibmRcIjozPT09ZSYmMTMhPT1uP3QrXCJyZFwiOnQrXCJ0aFwifX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8odCl7Zm9yKHZhciBuIGluIHQpZS5oYXNPd25Qcm9wZXJ0eShuKXx8KGVbbl09dFtuXSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbyhuKDI1KSk7dmFyIHI9bigyNik7ZS5vdmVybGF5TWFya3VwPXIuZGVmYXVsdCxvKG4oMjcpKSxvKG4oMjgpKSxvKG4oMjkpKTt2YXIgaT1uKDApLGE9aS5kZWZhdWx0Lk1PREFMX1RJVExFLHM9aS5kZWZhdWx0Lk1PREFMX1RFWFQsYz1pLmRlZmF1bHQuSUNPTixsPWkuZGVmYXVsdC5GT09URVI7ZS5pY29uTWFya3VwPSdcXG4gIDxkaXYgY2xhc3M9XCInK2MrJ1wiPjwvZGl2PicsZS50aXRsZU1hcmt1cD0nXFxuICA8ZGl2IGNsYXNzPVwiJythKydcIj48L2Rpdj5cXG4nLGUudGV4dE1hcmt1cD0nXFxuICA8ZGl2IGNsYXNzPVwiJytzKydcIj48L2Rpdj4nLGUuZm9vdGVyTWFya3VwPSdcXG4gIDxkaXYgY2xhc3M9XCInK2wrJ1wiPjwvZGl2Plxcbid9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpO2UuQ09ORklSTV9LRVk9XCJjb25maXJtXCIsZS5DQU5DRUxfS0VZPVwiY2FuY2VsXCI7dmFyIHI9e3Zpc2libGU6ITAsdGV4dDpudWxsLHZhbHVlOm51bGwsY2xhc3NOYW1lOlwiXCIsY2xvc2VNb2RhbDohMH0saT1PYmplY3QuYXNzaWduKHt9LHIse3Zpc2libGU6ITEsdGV4dDpcIkNhbmNlbFwiLHZhbHVlOm51bGx9KSxhPU9iamVjdC5hc3NpZ24oe30scix7dGV4dDpcIk9LXCIsdmFsdWU6ITB9KTtlLmRlZmF1bHRCdXR0b25MaXN0PXtjYW5jZWw6aSxjb25maXJtOmF9O3ZhciBzPWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlIGUuQ09ORklSTV9LRVk6cmV0dXJuIGE7Y2FzZSBlLkNBTkNFTF9LRVk6cmV0dXJuIGk7ZGVmYXVsdDp2YXIgbj10LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSk7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30scix7dGV4dDpuLHZhbHVlOnR9KX19LGM9ZnVuY3Rpb24odCxlKXt2YXIgbj1zKHQpO3JldHVybiEwPT09ZT9PYmplY3QuYXNzaWduKHt9LG4se3Zpc2libGU6ITB9KTpcInN0cmluZ1wiPT10eXBlb2YgZT9PYmplY3QuYXNzaWduKHt9LG4se3Zpc2libGU6ITAsdGV4dDplfSk6by5pc1BsYWluT2JqZWN0KGUpP09iamVjdC5hc3NpZ24oe3Zpc2libGU6ITB9LG4sZSk6T2JqZWN0LmFzc2lnbih7fSxuLHt2aXNpYmxlOiExfSl9LGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXt9LG49MCxvPU9iamVjdC5rZXlzKHQpO248by5sZW5ndGg7bisrKXt2YXIgcj1vW25dLGE9dFtyXSxzPWMocixhKTtlW3JdPXN9cmV0dXJuIGUuY2FuY2VsfHwoZS5jYW5jZWw9aSksZX0sdT1mdW5jdGlvbih0KXt2YXIgbj17fTtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMTpuW2UuQ0FOQ0VMX0tFWV09T2JqZWN0LmFzc2lnbih7fSxpLHt2aXNpYmxlOiExfSk7YnJlYWs7Y2FzZSAyOm5bZS5DQU5DRUxfS0VZXT1jKGUuQ0FOQ0VMX0tFWSx0WzBdKSxuW2UuQ09ORklSTV9LRVldPWMoZS5DT05GSVJNX0tFWSx0WzFdKTticmVhaztkZWZhdWx0Om8udGhyb3dFcnIoXCJJbnZhbGlkIG51bWJlciBvZiAnYnV0dG9ucycgaW4gYXJyYXkgKFwiK3QubGVuZ3RoK1wiKS5cXG4gICAgICBJZiB5b3Ugd2FudCBtb3JlIHRoYW4gMiBidXR0b25zLCB5b3UgbmVlZCB0byB1c2UgYW4gb2JqZWN0IVwiKX1yZXR1cm4gbn07ZS5nZXRCdXR0b25MaXN0T3B0cz1mdW5jdGlvbih0KXt2YXIgbj1lLmRlZmF1bHRCdXR0b25MaXN0O3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P25bZS5DT05GSVJNX0tFWV09YyhlLkNPTkZJUk1fS0VZLHQpOkFycmF5LmlzQXJyYXkodCk/bj11KHQpOm8uaXNQbGFpbk9iamVjdCh0KT9uPWwodCk6ITA9PT10P249dShbITAsITBdKTohMT09PXQ/bj11KFshMSwhMV0pOnZvaWQgMD09PXQmJihuPWUuZGVmYXVsdEJ1dHRvbkxpc3QpLG59fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxyPW4oMiksaT1uKDApLGE9aS5kZWZhdWx0Lk1PREFMLHM9aS5kZWZhdWx0Lk9WRVJMQVksYz1uKDMwKSxsPW4oMzEpLHU9bigzMiksZj1uKDMzKTtlLmluamVjdEVsSW50b01vZGFsPWZ1bmN0aW9uKHQpe3ZhciBlPW8uZ2V0Tm9kZShhKSxuPW8uc3RyaW5nVG9Ob2RlKHQpO3JldHVybiBlLmFwcGVuZENoaWxkKG4pLG59O3ZhciBkPWZ1bmN0aW9uKHQpe3QuY2xhc3NOYW1lPWEsdC50ZXh0Q29udGVudD1cIlwifSxwPWZ1bmN0aW9uKHQsZSl7ZCh0KTt2YXIgbj1lLmNsYXNzTmFtZTtuJiZ0LmNsYXNzTGlzdC5hZGQobil9O2UuaW5pdE1vZGFsQ29udGVudD1mdW5jdGlvbih0KXt2YXIgZT1vLmdldE5vZGUoYSk7cChlLHQpLGMuZGVmYXVsdCh0Lmljb24pLGwuaW5pdFRpdGxlKHQudGl0bGUpLGwuaW5pdFRleHQodC50ZXh0KSxmLmRlZmF1bHQodC5jb250ZW50KSx1LmRlZmF1bHQodC5idXR0b25zLHQuZGFuZ2VyTW9kZSl9O3ZhciBtPWZ1bmN0aW9uKCl7dmFyIHQ9by5nZXROb2RlKHMpLGU9by5zdHJpbmdUb05vZGUoci5tb2RhbE1hcmt1cCk7dC5hcHBlbmRDaGlsZChlKX07ZS5kZWZhdWx0PW19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDMpLHI9e2lzT3BlbjohMSxwcm9taXNlOm51bGwsYWN0aW9uczp7fSx0aW1lcjpudWxsfSxpPU9iamVjdC5hc3NpZ24oe30scik7ZS5yZXNldFN0YXRlPWZ1bmN0aW9uKCl7aT1PYmplY3QuYXNzaWduKHt9LHIpfSxlLnNldEFjdGlvblZhbHVlPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiBhKG8uQ09ORklSTV9LRVksdCk7Zm9yKHZhciBlIGluIHQpYShlLHRbZV0pfTt2YXIgYT1mdW5jdGlvbih0LGUpe2kuYWN0aW9uc1t0XXx8KGkuYWN0aW9uc1t0XT17fSksT2JqZWN0LmFzc2lnbihpLmFjdGlvbnNbdF0se3ZhbHVlOmV9KX07ZS5zZXRBY3Rpb25PcHRpb25zRm9yPWZ1bmN0aW9uKHQsZSl7dmFyIG49KHZvaWQgMD09PWU/e306ZSkuY2xvc2VNb2RhbCxvPXZvaWQgMD09PW58fG47T2JqZWN0LmFzc2lnbihpLmFjdGlvbnNbdF0se2Nsb3NlTW9kYWw6b30pfSxlLmRlZmF1bHQ9aX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSkscj1uKDMpLGk9bigwKSxhPWkuZGVmYXVsdC5PVkVSTEFZLHM9aS5kZWZhdWx0LlNIT1dfTU9EQUwsYz1pLmRlZmF1bHQuQlVUVE9OLGw9aS5kZWZhdWx0LkJVVFRPTl9MT0FESU5HLHU9big1KTtlLm9wZW5Nb2RhbD1mdW5jdGlvbigpe28uZ2V0Tm9kZShhKS5jbGFzc0xpc3QuYWRkKHMpLHUuZGVmYXVsdC5pc09wZW49ITB9O3ZhciBmPWZ1bmN0aW9uKCl7by5nZXROb2RlKGEpLmNsYXNzTGlzdC5yZW1vdmUocyksdS5kZWZhdWx0LmlzT3Blbj0hMX07ZS5vbkFjdGlvbj1mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1yLkNBTkNFTF9LRVkpO3ZhciBlPXUuZGVmYXVsdC5hY3Rpb25zW3RdLG49ZS52YWx1ZTtpZighMT09PWUuY2xvc2VNb2RhbCl7dmFyIGk9YytcIi0tXCIrdDtvLmdldE5vZGUoaSkuY2xhc3NMaXN0LmFkZChsKX1lbHNlIGYoKTt1LmRlZmF1bHQucHJvbWlzZS5yZXNvbHZlKG4pfSxlLmdldFN0YXRlPWZ1bmN0aW9uKCl7dmFyIHQ9T2JqZWN0LmFzc2lnbih7fSx1LmRlZmF1bHQpO3JldHVybiBkZWxldGUgdC5wcm9taXNlLGRlbGV0ZSB0LnRpbWVyLHR9LGUuc3RvcExvYWRpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5cIitjKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3RbZV0uY2xhc3NMaXN0LnJlbW92ZShsKX19fSxmdW5jdGlvbih0LGUpe3ZhciBuO249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTt0cnl7bj1ufHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl8fCgwLGV2YWwpKFwidGhpc1wiKX1jYXRjaCh0KXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfXQuZXhwb3J0cz1ufSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGUpe3QuZXhwb3J0cz1lLnN3ZWV0QWxlcnQ9big5KX0pLmNhbGwoZSxuKDcpKX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbihlKXt0LmV4cG9ydHM9ZS5zd2FsPW4oMTApfSkuY2FsbChlLG4oNykpfSxmdW5jdGlvbih0LGUsbil7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmbigxMSksbigxNik7dmFyIG89bigyMykuZGVmYXVsdDt0LmV4cG9ydHM9b30sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTIpO1wic3RyaW5nXCI9PXR5cGVvZiBvJiYobz1bW3QuaSxvLFwiXCJdXSk7dmFyIHI9e2luc2VydEF0OlwidG9wXCJ9O3IudHJhbnNmb3JtPXZvaWQgMDtuKDE0KShvLHIpO28ubG9jYWxzJiYodC5leHBvcnRzPW8ubG9jYWxzKX0sZnVuY3Rpb24odCxlLG4pe2U9dC5leHBvcnRzPW4oMTMpKHZvaWQgMCksZS5wdXNoKFt0LmksJy5zd2FsLWljb24tLWVycm9ye2JvcmRlci1jb2xvcjojZjI3NDc0Oy13ZWJraXQtYW5pbWF0aW9uOmFuaW1hdGVFcnJvckljb24gLjVzO2FuaW1hdGlvbjphbmltYXRlRXJyb3JJY29uIC41c30uc3dhbC1pY29uLS1lcnJvcl9feC1tYXJre3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7LXdlYmtpdC1hbmltYXRpb246YW5pbWF0ZVhNYXJrIC41czthbmltYXRpb246YW5pbWF0ZVhNYXJrIC41c30uc3dhbC1pY29uLS1lcnJvcl9fbGluZXtwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6NXB4O3dpZHRoOjQ3cHg7YmFja2dyb3VuZC1jb2xvcjojZjI3NDc0O2Rpc3BsYXk6YmxvY2s7dG9wOjM3cHg7Ym9yZGVyLXJhZGl1czoycHh9LnN3YWwtaWNvbi0tZXJyb3JfX2xpbmUtLWxlZnR7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTtsZWZ0OjE3cHh9LnN3YWwtaWNvbi0tZXJyb3JfX2xpbmUtLXJpZ2h0ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTtyaWdodDoxNnB4fUAtd2Via2l0LWtleWZyYW1lcyBhbmltYXRlRXJyb3JJY29uezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVgoMTAwZGVnKTt0cmFuc2Zvcm06cm90YXRlWCgxMDBkZWcpO29wYWNpdHk6MH10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGVYKDBkZWcpO29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmltYXRlRXJyb3JJY29uezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVgoMTAwZGVnKTt0cmFuc2Zvcm06cm90YXRlWCgxMDBkZWcpO29wYWNpdHk6MH10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGVYKDBkZWcpO29wYWNpdHk6MX19QC13ZWJraXQta2V5ZnJhbWVzIGFuaW1hdGVYTWFya3swJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNCk7dHJhbnNmb3JtOnNjYWxlKC40KTttYXJnaW4tdG9wOjI2cHg7b3BhY2l0eTowfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNCk7dHJhbnNmb3JtOnNjYWxlKC40KTttYXJnaW4tdG9wOjI2cHg7b3BhY2l0eTowfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjE1KTt0cmFuc2Zvcm06c2NhbGUoMS4xNSk7bWFyZ2luLXRvcDotNnB4fXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKTttYXJnaW4tdG9wOjA7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGFuaW1hdGVYTWFya3swJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNCk7dHJhbnNmb3JtOnNjYWxlKC40KTttYXJnaW4tdG9wOjI2cHg7b3BhY2l0eTowfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNCk7dHJhbnNmb3JtOnNjYWxlKC40KTttYXJnaW4tdG9wOjI2cHg7b3BhY2l0eTowfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjE1KTt0cmFuc2Zvcm06c2NhbGUoMS4xNSk7bWFyZ2luLXRvcDotNnB4fXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKTttYXJnaW4tdG9wOjA7b3BhY2l0eToxfX0uc3dhbC1pY29uLS13YXJuaW5ne2JvcmRlci1jb2xvcjojZjhiYjg2Oy13ZWJraXQtYW5pbWF0aW9uOnB1bHNlV2FybmluZyAuNzVzIGluZmluaXRlIGFsdGVybmF0ZTthbmltYXRpb246cHVsc2VXYXJuaW5nIC43NXMgaW5maW5pdGUgYWx0ZXJuYXRlfS5zd2FsLWljb24tLXdhcm5pbmdfX2JvZHl7d2lkdGg6NXB4O2hlaWdodDo0N3B4O3RvcDoxMHB4O2JvcmRlci1yYWRpdXM6MnB4O21hcmdpbi1sZWZ0Oi0ycHh9LnN3YWwtaWNvbi0td2FybmluZ19fYm9keSwuc3dhbC1pY29uLS13YXJuaW5nX19kb3R7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7YmFja2dyb3VuZC1jb2xvcjojZjhiYjg2fS5zd2FsLWljb24tLXdhcm5pbmdfX2RvdHt3aWR0aDo3cHg7aGVpZ2h0OjdweDtib3JkZXItcmFkaXVzOjUwJTttYXJnaW4tbGVmdDotNHB4O2JvdHRvbTotMTFweH1ALXdlYmtpdC1rZXlmcmFtZXMgcHVsc2VXYXJuaW5nezAle2JvcmRlci1jb2xvcjojZjhkNDg2fXRve2JvcmRlci1jb2xvcjojZjhiYjg2fX1Aa2V5ZnJhbWVzIHB1bHNlV2FybmluZ3swJXtib3JkZXItY29sb3I6I2Y4ZDQ4Nn10b3tib3JkZXItY29sb3I6I2Y4YmI4Nn19LnN3YWwtaWNvbi0tc3VjY2Vzc3tib3JkZXItY29sb3I6I2E1ZGM4Nn0uc3dhbC1pY29uLS1zdWNjZXNzOmFmdGVyLC5zd2FsLWljb24tLXN1Y2Nlc3M6YmVmb3Jle2NvbnRlbnQ6XCJcIjtib3JkZXItcmFkaXVzOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo2MHB4O2hlaWdodDoxMjBweDtiYWNrZ3JvdW5kOiNmZmY7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKX0uc3dhbC1pY29uLS1zdWNjZXNzOmJlZm9yZXtib3JkZXItcmFkaXVzOjEyMHB4IDAgMCAxMjBweDt0b3A6LTdweDtsZWZ0Oi0zM3B4Oy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NjBweCA2MHB4O3RyYW5zZm9ybS1vcmlnaW46NjBweCA2MHB4fS5zd2FsLWljb24tLXN1Y2Nlc3M6YWZ0ZXJ7Ym9yZGVyLXJhZGl1czowIDEyMHB4IDEyMHB4IDA7dG9wOi0xMXB4O2xlZnQ6MzBweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgNjBweDt0cmFuc2Zvcm0tb3JpZ2luOjAgNjBweDstd2Via2l0LWFuaW1hdGlvbjpyb3RhdGVQbGFjZWhvbGRlciA0LjI1cyBlYXNlLWluO2FuaW1hdGlvbjpyb3RhdGVQbGFjZWhvbGRlciA0LjI1cyBlYXNlLWlufS5zd2FsLWljb24tLXN1Y2Nlc3NfX3Jpbmd7d2lkdGg6ODBweDtoZWlnaHQ6ODBweDtib3JkZXI6NHB4IHNvbGlkIGhzbGEoOTgsNTUlLDY5JSwuMik7Ym9yZGVyLXJhZGl1czo1MCU7Ym94LXNpemluZzpjb250ZW50LWJveDtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi00cHg7dG9wOi00cHg7ei1pbmRleDoyfS5zd2FsLWljb24tLXN1Y2Nlc3NfX2hpZGUtY29ybmVyc3t3aWR0aDo1cHg7aGVpZ2h0OjkwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO3BhZGRpbmc6MXB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MjhweDt0b3A6OHB4O3otaW5kZXg6MTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9LnN3YWwtaWNvbi0tc3VjY2Vzc19fbGluZXtoZWlnaHQ6NXB4O2JhY2tncm91bmQtY29sb3I6I2E1ZGM4NjtkaXNwbGF5OmJsb2NrO2JvcmRlci1yYWRpdXM6MnB4O3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6Mn0uc3dhbC1pY29uLS1zdWNjZXNzX19saW5lLS10aXB7d2lkdGg6MjVweDtsZWZ0OjE0cHg7dG9wOjQ2cHg7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTstd2Via2l0LWFuaW1hdGlvbjphbmltYXRlU3VjY2Vzc1RpcCAuNzVzO2FuaW1hdGlvbjphbmltYXRlU3VjY2Vzc1RpcCAuNzVzfS5zd2FsLWljb24tLXN1Y2Nlc3NfX2xpbmUtLWxvbmd7d2lkdGg6NDdweDtyaWdodDo4cHg7dG9wOjM4cHg7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpOy13ZWJraXQtYW5pbWF0aW9uOmFuaW1hdGVTdWNjZXNzTG9uZyAuNzVzO2FuaW1hdGlvbjphbmltYXRlU3VjY2Vzc0xvbmcgLjc1c31ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlUGxhY2Vob2xkZXJ7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTUley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0xMiV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9fUBrZXlmcmFtZXMgcm90YXRlUGxhY2Vob2xkZXJ7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTUley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0xMiV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9fUAtd2Via2l0LWtleWZyYW1lcyBhbmltYXRlU3VjY2Vzc1RpcHswJXt3aWR0aDowO2xlZnQ6MXB4O3RvcDoxOXB4fTU0JXt3aWR0aDowO2xlZnQ6MXB4O3RvcDoxOXB4fTcwJXt3aWR0aDo1MHB4O2xlZnQ6LThweDt0b3A6MzdweH04NCV7d2lkdGg6MTdweDtsZWZ0OjIxcHg7dG9wOjQ4cHh9dG97d2lkdGg6MjVweDtsZWZ0OjE0cHg7dG9wOjQ1cHh9fUBrZXlmcmFtZXMgYW5pbWF0ZVN1Y2Nlc3NUaXB7MCV7d2lkdGg6MDtsZWZ0OjFweDt0b3A6MTlweH01NCV7d2lkdGg6MDtsZWZ0OjFweDt0b3A6MTlweH03MCV7d2lkdGg6NTBweDtsZWZ0Oi04cHg7dG9wOjM3cHh9ODQle3dpZHRoOjE3cHg7bGVmdDoyMXB4O3RvcDo0OHB4fXRve3dpZHRoOjI1cHg7bGVmdDoxNHB4O3RvcDo0NXB4fX1ALXdlYmtpdC1rZXlmcmFtZXMgYW5pbWF0ZVN1Y2Nlc3NMb25nezAle3dpZHRoOjA7cmlnaHQ6NDZweDt0b3A6NTRweH02NSV7d2lkdGg6MDtyaWdodDo0NnB4O3RvcDo1NHB4fTg0JXt3aWR0aDo1NXB4O3JpZ2h0OjA7dG9wOjM1cHh9dG97d2lkdGg6NDdweDtyaWdodDo4cHg7dG9wOjM4cHh9fUBrZXlmcmFtZXMgYW5pbWF0ZVN1Y2Nlc3NMb25nezAle3dpZHRoOjA7cmlnaHQ6NDZweDt0b3A6NTRweH02NSV7d2lkdGg6MDtyaWdodDo0NnB4O3RvcDo1NHB4fTg0JXt3aWR0aDo1NXB4O3JpZ2h0OjA7dG9wOjM1cHh9dG97d2lkdGg6NDdweDtyaWdodDo4cHg7dG9wOjM4cHh9fS5zd2FsLWljb24tLWluZm97Ym9yZGVyLWNvbG9yOiNjOWRhZTF9LnN3YWwtaWNvbi0taW5mbzpiZWZvcmV7d2lkdGg6NXB4O2hlaWdodDoyOXB4O2JvdHRvbToxN3B4O2JvcmRlci1yYWRpdXM6MnB4O21hcmdpbi1sZWZ0Oi0ycHh9LnN3YWwtaWNvbi0taW5mbzphZnRlciwuc3dhbC1pY29uLS1pbmZvOmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7YmFja2dyb3VuZC1jb2xvcjojYzlkYWUxfS5zd2FsLWljb24tLWluZm86YWZ0ZXJ7d2lkdGg6N3B4O2hlaWdodDo3cHg7Ym9yZGVyLXJhZGl1czo1MCU7bWFyZ2luLWxlZnQ6LTNweDt0b3A6MTlweH0uc3dhbC1pY29ue3dpZHRoOjgwcHg7aGVpZ2h0OjgwcHg7Ym9yZGVyLXdpZHRoOjRweDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLXJhZGl1czo1MCU7cGFkZGluZzowO3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Y29udGVudC1ib3g7bWFyZ2luOjIwcHggYXV0b30uc3dhbC1pY29uOmZpcnN0LWNoaWxke21hcmdpbi10b3A6MzJweH0uc3dhbC1pY29uLS1jdXN0b217d2lkdGg6YXV0bztoZWlnaHQ6YXV0bzttYXgtd2lkdGg6MTAwJTtib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjB9LnN3YWwtaWNvbiBpbWd7bWF4LXdpZHRoOjEwMCU7bWF4LWhlaWdodDoxMDAlfS5zd2FsLXRpdGxle2NvbG9yOnJnYmEoMCwwLDAsLjY1KTtmb250LXdlaWdodDo2MDA7dGV4dC10cmFuc2Zvcm06bm9uZTtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MTNweCAxNnB4O2ZvbnQtc2l6ZToyN3B4O2xpbmUtaGVpZ2h0Om5vcm1hbDt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjB9LnN3YWwtdGl0bGU6Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDoyNnB4fS5zd2FsLXRpdGxlOm5vdCg6Zmlyc3QtY2hpbGQpe3BhZGRpbmctYm90dG9tOjB9LnN3YWwtdGl0bGU6bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tYm90dG9tOjEzcHh9LnN3YWwtdGV4dHtmb250LXNpemU6MTZweDtwb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDpub25lO2xpbmUtaGVpZ2h0Om5vcm1hbDt2ZXJ0aWNhbC1hbGlnbjp0b3A7dGV4dC1hbGlnbjpsZWZ0O2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO3BhZGRpbmc6MCAxMHB4O2ZvbnQtd2VpZ2h0OjQwMDtjb2xvcjpyZ2JhKDAsMCwwLC42NCk7bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDIwcHgpO292ZXJmbG93LXdyYXA6YnJlYWstd29yZDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnN3YWwtdGV4dDpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOjQ1cHh9LnN3YWwtdGV4dDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206NDVweH0uc3dhbC1mb290ZXJ7dGV4dC1hbGlnbjpyaWdodDtwYWRkaW5nLXRvcDoxM3B4O21hcmdpbi10b3A6MTNweDtwYWRkaW5nOjEzcHggMTZweDtib3JkZXItcmFkaXVzOmluaGVyaXQ7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9LnN3YWwtYnV0dG9uLWNvbnRhaW5lcnttYXJnaW46NXB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlfS5zd2FsLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiM3Y2QxZjk7Y29sb3I6I2ZmZjtib3JkZXI6bm9uZTtib3gtc2hhZG93Om5vbmU7Ym9yZGVyLXJhZGl1czo1cHg7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToxNHB4O3BhZGRpbmc6MTBweCAyNHB4O21hcmdpbjowO2N1cnNvcjpwb2ludGVyfS5zd2FsLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojNzhjYmYyfS5zd2FsLWJ1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojNzBiY2UwfS5zd2FsLWJ1dHRvbjpmb2N1c3tvdXRsaW5lOm5vbmU7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSg0MywxMTQsMTY1LC4yOSl9LnN3YWwtYnV0dG9uW2Rpc2FibGVkXXtvcGFjaXR5Oi41O2N1cnNvcjpkZWZhdWx0fS5zd2FsLWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MH0uc3dhbC1idXR0b24tLWNhbmNlbHtjb2xvcjojNTU1O2JhY2tncm91bmQtY29sb3I6I2VmZWZlZn0uc3dhbC1idXR0b24tLWNhbmNlbDpub3QoW2Rpc2FibGVkXSk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZThlOGU4fS5zd2FsLWJ1dHRvbi0tY2FuY2VsOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNkN2Q3ZDd9LnN3YWwtYnV0dG9uLS1jYW5jZWw6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSgxMTYsMTM2LDE1MCwuMjkpfS5zd2FsLWJ1dHRvbi0tZGFuZ2Vye2JhY2tncm91bmQtY29sb3I6I2U2NDk0Mn0uc3dhbC1idXR0b24tLWRhbmdlcjpub3QoW2Rpc2FibGVkXSk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZGY0NzQwfS5zd2FsLWJ1dHRvbi0tZGFuZ2VyOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNjZjQyM2J9LnN3YWwtYnV0dG9uLS1kYW5nZXI6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSgxNjUsNDMsNDMsLjI5KX0uc3dhbC1jb250ZW50e3BhZGRpbmc6MCAyMHB4O21hcmdpbi10b3A6MjBweDtmb250LXNpemU6bWVkaXVtfS5zd2FsLWNvbnRlbnQ6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjIwcHh9LnN3YWwtY29udGVudF9faW5wdXQsLnN3YWwtY29udGVudF9fdGV4dGFyZWF7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjpub25lO2ZvbnQtc2l6ZToxNHB4O2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjEwMCU7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNCk7cGFkZGluZzoxMHB4IDEzcHg7Ym9yZGVyLXJhZGl1czoycHg7dHJhbnNpdGlvbjpib3JkZXItY29sb3IgLjJzfS5zd2FsLWNvbnRlbnRfX2lucHV0OmZvY3VzLC5zd2FsLWNvbnRlbnRfX3RleHRhcmVhOmZvY3Vze291dGxpbmU6bm9uZTtib3JkZXItY29sb3I6IzZkYjhmZn0uc3dhbC1jb250ZW50X190ZXh0YXJlYXtyZXNpemU6dmVydGljYWx9LnN3YWwtYnV0dG9uLS1sb2FkaW5ne2NvbG9yOnRyYW5zcGFyZW50fS5zd2FsLWJ1dHRvbi0tbG9hZGluZ34uc3dhbC1idXR0b25fX2xvYWRlcntvcGFjaXR5OjF9LnN3YWwtYnV0dG9uX19sb2FkZXJ7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OmF1dG87d2lkdGg6NDNweDt6LWluZGV4OjI7bGVmdDo1MCU7dG9wOjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTt0ZXh0LWFsaWduOmNlbnRlcjtwb2ludGVyLWV2ZW50czpub25lO29wYWNpdHk6MH0uc3dhbC1idXR0b25fX2xvYWRlciBkaXZ7ZGlzcGxheTppbmxpbmUtYmxvY2s7ZmxvYXQ6bm9uZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTt3aWR0aDo5cHg7aGVpZ2h0OjlweDtwYWRkaW5nOjA7Ym9yZGVyOm5vbmU7bWFyZ2luOjJweDtvcGFjaXR5Oi40O2JvcmRlci1yYWRpdXM6N3B4O2JhY2tncm91bmQtY29sb3I6aHNsYSgwLDAlLDEwMCUsLjkpO3RyYW5zaXRpb246YmFja2dyb3VuZCAuMnM7LXdlYmtpdC1hbmltYXRpb246c3dhbC1sb2FkaW5nLWFuaW0gMXMgaW5maW5pdGU7YW5pbWF0aW9uOnN3YWwtbG9hZGluZy1hbmltIDFzIGluZmluaXRlfS5zd2FsLWJ1dHRvbl9fbG9hZGVyIGRpdjpudGgtY2hpbGQoM24rMil7LXdlYmtpdC1hbmltYXRpb24tZGVsYXk6LjE1czthbmltYXRpb24tZGVsYXk6LjE1c30uc3dhbC1idXR0b25fX2xvYWRlciBkaXY6bnRoLWNoaWxkKDNuKzMpey13ZWJraXQtYW5pbWF0aW9uLWRlbGF5Oi4zczthbmltYXRpb24tZGVsYXk6LjNzfUAtd2Via2l0LWtleWZyYW1lcyBzd2FsLWxvYWRpbmctYW5pbXswJXtvcGFjaXR5Oi40fTIwJXtvcGFjaXR5Oi40fTUwJXtvcGFjaXR5OjF9dG97b3BhY2l0eTouNH19QGtleWZyYW1lcyBzd2FsLWxvYWRpbmctYW5pbXswJXtvcGFjaXR5Oi40fTIwJXtvcGFjaXR5Oi40fTUwJXtvcGFjaXR5OjF9dG97b3BhY2l0eTouNH19LnN3YWwtb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MDtvdmVyZmxvdy15OmF1dG87YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC40KTt6LWluZGV4OjEwMDAwO3BvaW50ZXItZXZlbnRzOm5vbmU7b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSAuM3N9LnN3YWwtb3ZlcmxheTpiZWZvcmV7Y29udGVudDpcIiBcIjtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7aGVpZ2h0OjEwMCV9LnN3YWwtb3ZlcmxheS0tc2hvdy1tb2RhbHtvcGFjaXR5OjE7cG9pbnRlci1ldmVudHM6YXV0b30uc3dhbC1vdmVybGF5LS1zaG93LW1vZGFsIC5zd2FsLW1vZGFse29wYWNpdHk6MTtwb2ludGVyLWV2ZW50czphdXRvO2JveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWFuaW1hdGlvbjpzaG93U3dlZXRBbGVydCAuM3M7YW5pbWF0aW9uOnNob3dTd2VldEFsZXJ0IC4zczt3aWxsLWNoYW5nZTp0cmFuc2Zvcm19LnN3YWwtbW9kYWx7d2lkdGg6NDc4cHg7b3BhY2l0eTowO3BvaW50ZXItZXZlbnRzOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6NXB4O3Bvc2l0aW9uOnN0YXRpYzttYXJnaW46MjBweCBhdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7dHJhbnNmb3JtLW9yaWdpbjo1MCUgNTAlO3otaW5kZXg6MTAwMDE7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycywtd2Via2l0LXRyYW5zZm9ybSAuM3M7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzLG9wYWNpdHkgLjJzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyxvcGFjaXR5IC4ycywtd2Via2l0LXRyYW5zZm9ybSAuM3N9QG1lZGlhIChtYXgtd2lkdGg6NTAwcHgpey5zd2FsLW1vZGFse3dpZHRoOmNhbGMoMTAwJSAtIDIwcHgpfX1ALXdlYmtpdC1rZXlmcmFtZXMgc2hvd1N3ZWV0QWxlcnR7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTEley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC41KTt0cmFuc2Zvcm06c2NhbGUoLjUpfTQ1JXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjA1KTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9ODAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC45NSk7dHJhbnNmb3JtOnNjYWxlKC45NSl9dG97LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX1Aa2V5ZnJhbWVzIHNob3dTd2VldEFsZXJ0ezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0xJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNSk7dHJhbnNmb3JtOnNjYWxlKC41KX00NSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4wNSk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOTUpO3RyYW5zZm9ybTpzY2FsZSguOTUpfXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19JyxcIlwiXSl9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0LGUpe3ZhciBuPXRbMV18fFwiXCIscj10WzNdO2lmKCFyKXJldHVybiBuO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBpPW8ocik7cmV0dXJuW25dLmNvbmNhdChyLnNvdXJjZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIityLnNvdXJjZVJvb3QrdCtcIiAqL1wifSkpLmNvbmNhdChbaV0pLmpvaW4oXCJcXG5cIil9cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gbyh0KXtyZXR1cm5cIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh0KSkpKStcIiAqL1wifXQuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1bXTtyZXR1cm4gZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbihlKXt2YXIgbz1uKGUsdCk7cmV0dXJuIGVbMl0/XCJAbWVkaWEgXCIrZVsyXStcIntcIitvK1wifVwiOm99KS5qb2luKFwiXCIpfSxlLmk9ZnVuY3Rpb24odCxuKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTtmb3IodmFyIG89e30scj0wO3I8dGhpcy5sZW5ndGg7cisrKXt2YXIgaT10aGlzW3JdWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYob1tpXT0hMCl9Zm9yKHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGE9dFtyXTtcIm51bWJlclwiPT10eXBlb2YgYVswXSYmb1thWzBdXXx8KG4mJiFhWzJdP2FbMl09bjpuJiYoYVsyXT1cIihcIithWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLGUucHVzaChhKSl9fSxlfX0sZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIG8odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXSxyPW1bby5pZF07aWYocil7ci5yZWZzKys7Zm9yKHZhciBpPTA7aTxyLnBhcnRzLmxlbmd0aDtpKyspci5wYXJ0c1tpXShvLnBhcnRzW2ldKTtmb3IoO2k8by5wYXJ0cy5sZW5ndGg7aSsrKXIucGFydHMucHVzaCh1KG8ucGFydHNbaV0sZSkpfWVsc2V7Zm9yKHZhciBhPVtdLGk9MDtpPG8ucGFydHMubGVuZ3RoO2krKylhLnB1c2godShvLnBhcnRzW2ldLGUpKTttW28uaWRdPXtpZDpvLmlkLHJlZnM6MSxwYXJ0czphfX19fWZ1bmN0aW9uIHIodCxlKXtmb3IodmFyIG49W10sbz17fSxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBpPXRbcl0sYT1lLmJhc2U/aVswXStlLmJhc2U6aVswXSxzPWlbMV0sYz1pWzJdLGw9aVszXSx1PXtjc3M6cyxtZWRpYTpjLHNvdXJjZU1hcDpsfTtvW2FdP29bYV0ucGFydHMucHVzaCh1KTpuLnB1c2gob1thXT17aWQ6YSxwYXJ0czpbdV19KX1yZXR1cm4gbn1mdW5jdGlvbiBpKHQsZSl7dmFyIG49dih0Lmluc2VydEludG8pO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO3ZhciBvPXdbdy5sZW5ndGgtMV07aWYoXCJ0b3BcIj09PXQuaW5zZXJ0QXQpbz9vLm5leHRTaWJsaW5nP24uaW5zZXJ0QmVmb3JlKGUsby5uZXh0U2libGluZyk6bi5hcHBlbmRDaGlsZChlKTpuLmluc2VydEJlZm9yZShlLG4uZmlyc3RDaGlsZCksdy5wdXNoKGUpO2Vsc2V7aWYoXCJib3R0b21cIiE9PXQuaW5zZXJ0QXQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcuIE11c3QgYmUgJ3RvcCcgb3IgJ2JvdHRvbScuXCIpO24uYXBwZW5kQ2hpbGQoZSl9fWZ1bmN0aW9uIGEodCl7aWYobnVsbD09PXQucGFyZW50Tm9kZSlyZXR1cm4hMTt0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCk7dmFyIGU9dy5pbmRleE9mKHQpO2U+PTAmJncuc3BsaWNlKGUsMSl9ZnVuY3Rpb24gcyh0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIHQuYXR0cnMudHlwZT1cInRleHQvY3NzXCIsbChlLHQuYXR0cnMpLGkodCxlKSxlfWZ1bmN0aW9uIGModCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7cmV0dXJuIHQuYXR0cnMudHlwZT1cInRleHQvY3NzXCIsdC5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIsbChlLHQuYXR0cnMpLGkodCxlKSxlfWZ1bmN0aW9uIGwodCxlKXtPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3Quc2V0QXR0cmlidXRlKG4sZVtuXSl9KX1mdW5jdGlvbiB1KHQsZSl7dmFyIG4sbyxyLGk7aWYoZS50cmFuc2Zvcm0mJnQuY3NzKXtpZighKGk9ZS50cmFuc2Zvcm0odC5jc3MpKSlyZXR1cm4gZnVuY3Rpb24oKXt9O3QuY3NzPWl9aWYoZS5zaW5nbGV0b24pe3ZhciBsPWgrKztuPWd8fChnPXMoZSkpLG89Zi5iaW5kKG51bGwsbixsLCExKSxyPWYuYmluZChudWxsLG4sbCwhMCl9ZWxzZSB0LnNvdXJjZU1hcCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBCbG9iJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hPyhuPWMoZSksbz1wLmJpbmQobnVsbCxuLGUpLHI9ZnVuY3Rpb24oKXthKG4pLG4uaHJlZiYmVVJMLnJldm9rZU9iamVjdFVSTChuLmhyZWYpfSk6KG49cyhlKSxvPWQuYmluZChudWxsLG4pLHI9ZnVuY3Rpb24oKXthKG4pfSk7cmV0dXJuIG8odCksZnVuY3Rpb24oZSl7aWYoZSl7aWYoZS5jc3M9PT10LmNzcyYmZS5tZWRpYT09PXQubWVkaWEmJmUuc291cmNlTWFwPT09dC5zb3VyY2VNYXApcmV0dXJuO28odD1lKX1lbHNlIHIoKX19ZnVuY3Rpb24gZih0LGUsbixvKXt2YXIgcj1uP1wiXCI6by5jc3M7aWYodC5zdHlsZVNoZWV0KXQuc3R5bGVTaGVldC5jc3NUZXh0PXgoZSxyKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLGE9dC5jaGlsZE5vZGVzO2FbZV0mJnQucmVtb3ZlQ2hpbGQoYVtlXSksYS5sZW5ndGg/dC5pbnNlcnRCZWZvcmUoaSxhW2VdKTp0LmFwcGVuZENoaWxkKGkpfX1mdW5jdGlvbiBkKHQsZSl7dmFyIG49ZS5jc3Msbz1lLm1lZGlhO2lmKG8mJnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIixvKSx0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7dC5maXJzdENoaWxkOyl0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fWZ1bmN0aW9uIHAodCxlLG4pe3ZhciBvPW4uY3NzLHI9bi5zb3VyY2VNYXAsaT12b2lkIDA9PT1lLmNvbnZlcnRUb0Fic29sdXRlVXJscyYmcjsoZS5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGkpJiYobz15KG8pKSxyJiYobys9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHIpKSkpK1wiICovXCIpO3ZhciBhPW5ldyBCbG9iKFtvXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPXQuaHJlZjt0LmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChhKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfXZhciBtPXt9LGI9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpKSxlfX0oZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93JiZkb2N1bWVudCYmZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2J9KSx2PWZ1bmN0aW9uKHQpe3ZhciBlPXt9O3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gdm9pZCAwPT09ZVtuXSYmKGVbbl09dC5jYWxsKHRoaXMsbikpLGVbbl19fShmdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KX0pLGc9bnVsbCxoPTAsdz1bXSx5PW4oMTUpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7ZT1lfHx7fSxlLmF0dHJzPVwib2JqZWN0XCI9PXR5cGVvZiBlLmF0dHJzP2UuYXR0cnM6e30sZS5zaW5nbGV0b258fChlLnNpbmdsZXRvbj1iKCkpLGUuaW5zZXJ0SW50b3x8KGUuaW5zZXJ0SW50bz1cImhlYWRcIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG49cih0LGUpO3JldHVybiBvKG4sZSksZnVuY3Rpb24odCl7Zm9yKHZhciBpPVtdLGE9MDthPG4ubGVuZ3RoO2ErKyl7dmFyIHM9blthXSxjPW1bcy5pZF07Yy5yZWZzLS0saS5wdXNoKGMpfWlmKHQpe28ocih0LGUpLGUpfWZvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXt2YXIgYz1pW2FdO2lmKDA9PT1jLnJlZnMpe2Zvcih2YXIgbD0wO2w8Yy5wYXJ0cy5sZW5ndGg7bCsrKWMucGFydHNbbF0oKTtkZWxldGUgbVtjLmlkXX19fX07dmFyIHg9ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtyZXR1cm4gdFtlXT1uLHQuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9fSgpfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb247aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiB0O3ZhciBuPWUucHJvdG9jb2wrXCIvL1wiK2UuaG9zdCxvPW4rZS5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sXCIvXCIpO3JldHVybiB0LnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLGZ1bmN0aW9uKHQsZSl7dmFyIHI9ZS50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pLnJlcGxhY2UoL14nKC4qKSckLyxmdW5jdGlvbih0LGUpe3JldHVybiBlfSk7aWYoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC8pL2kudGVzdChyKSlyZXR1cm4gdDt2YXIgaTtyZXR1cm4gaT0wPT09ci5pbmRleE9mKFwiLy9cIik/cjowPT09ci5pbmRleE9mKFwiL1wiKT9uK3I6bytyLnJlcGxhY2UoL15cXC5cXC8vLFwiXCIpLFwidXJsKFwiK0pTT04uc3RyaW5naWZ5KGkpK1wiKVwifSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxNyk7XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8d2luZG93LlByb21pc2V8fCh3aW5kb3cuUHJvbWlzZT1vKSxuKDIxKSxTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzfHwoU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO3JldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlJiYoZT0wKSwhKGUrdC5sZW5ndGg+dGhpcy5sZW5ndGgpJiYtMSE9PXRoaXMuaW5kZXhPZih0LGUpfSksQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLFwiaW5jbHVkZXNcIix7dmFsdWU6ZnVuY3Rpb24odCxlKXtpZihudWxsPT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTt2YXIgbj1PYmplY3QodGhpcyksbz1uLmxlbmd0aD4+PjA7aWYoMD09PW8pcmV0dXJuITE7Zm9yKHZhciByPTB8ZSxpPU1hdGgubWF4KHI+PTA/cjpvLU1hdGguYWJzKHIpLDApO2k8bzspe2lmKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PT1lfHxcIm51bWJlclwiPT10eXBlb2YgdCYmXCJudW1iZXJcIj09dHlwZW9mIGUmJmlzTmFOKHQpJiZpc05hTihlKX0obltpXSx0KSlyZXR1cm4hMDtpKyt9cmV0dXJuITF9fSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmZnVuY3Rpb24odCl7dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuaGFzT3duUHJvcGVydHkoXCJyZW1vdmVcIil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicmVtb3ZlXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpfX0pfSl9KFtFbGVtZW50LnByb3RvdHlwZSxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSxEb2N1bWVudFR5cGUucHJvdG90eXBlXSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIG8oKXt9ZnVuY3Rpb24gcih0LGUpe3JldHVybiBmdW5jdGlvbigpe3QuYXBwbHkoZSxhcmd1bWVudHMpfX1mdW5jdGlvbiBpKHQpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXdcIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwibm90IGEgZnVuY3Rpb25cIik7dGhpcy5fc3RhdGU9MCx0aGlzLl9oYW5kbGVkPSExLHRoaXMuX3ZhbHVlPXZvaWQgMCx0aGlzLl9kZWZlcnJlZHM9W10sZih0LHRoaXMpfWZ1bmN0aW9uIGEodCxlKXtmb3IoOzM9PT10Ll9zdGF0ZTspdD10Ll92YWx1ZTtpZigwPT09dC5fc3RhdGUpcmV0dXJuIHZvaWQgdC5fZGVmZXJyZWRzLnB1c2goZSk7dC5faGFuZGxlZD0hMCxpLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe3ZhciBuPTE9PT10Ll9zdGF0ZT9lLm9uRnVsZmlsbGVkOmUub25SZWplY3RlZDtpZihudWxsPT09bilyZXR1cm4gdm9pZCgxPT09dC5fc3RhdGU/czpjKShlLnByb21pc2UsdC5fdmFsdWUpO3ZhciBvO3RyeXtvPW4odC5fdmFsdWUpfWNhdGNoKHQpe3JldHVybiB2b2lkIGMoZS5wcm9taXNlLHQpfXMoZS5wcm9taXNlLG8pfSl9ZnVuY3Rpb24gcyh0LGUpe3RyeXtpZihlPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi5cIik7aWYoZSYmKFwib2JqZWN0XCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSl7dmFyIG49ZS50aGVuO2lmKGUgaW5zdGFuY2VvZiBpKXJldHVybiB0Ll9zdGF0ZT0zLHQuX3ZhbHVlPWUsdm9pZCBsKHQpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIHZvaWQgZihyKG4sZSksdCl9dC5fc3RhdGU9MSx0Ll92YWx1ZT1lLGwodCl9Y2F0Y2goZSl7Yyh0LGUpfX1mdW5jdGlvbiBjKHQsZSl7dC5fc3RhdGU9Mix0Ll92YWx1ZT1lLGwodCl9ZnVuY3Rpb24gbCh0KXsyPT09dC5fc3RhdGUmJjA9PT10Ll9kZWZlcnJlZHMubGVuZ3RoJiZpLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe3QuX2hhbmRsZWR8fGkuX3VuaGFuZGxlZFJlamVjdGlvbkZuKHQuX3ZhbHVlKX0pO2Zvcih2YXIgZT0wLG49dC5fZGVmZXJyZWRzLmxlbmd0aDtlPG47ZSsrKWEodCx0Ll9kZWZlcnJlZHNbZV0pO3QuX2RlZmVycmVkcz1udWxsfWZ1bmN0aW9uIHUodCxlLG4pe3RoaXMub25GdWxmaWxsZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90Om51bGwsdGhpcy5vblJlamVjdGVkPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpudWxsLHRoaXMucHJvbWlzZT1ufWZ1bmN0aW9uIGYodCxlKXt2YXIgbj0hMTt0cnl7dChmdW5jdGlvbih0KXtufHwobj0hMCxzKGUsdCkpfSxmdW5jdGlvbih0KXtufHwobj0hMCxjKGUsdCkpfSl9Y2F0Y2godCl7aWYobilyZXR1cm47bj0hMCxjKGUsdCl9fXZhciBkPXNldFRpbWVvdXQ7aS5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihudWxsLHQpfSxpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IHRoaXMuY29uc3RydWN0b3Iobyk7cmV0dXJuIGEodGhpcyxuZXcgdSh0LGUsbikpLG59LGkuYWxsPWZ1bmN0aW9uKHQpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpO3JldHVybiBuZXcgaShmdW5jdGlvbih0LG4pe2Z1bmN0aW9uIG8oaSxhKXt0cnl7aWYoYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSl7dmFyIHM9YS50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHMpcmV0dXJuIHZvaWQgcy5jYWxsKGEsZnVuY3Rpb24odCl7byhpLHQpfSxuKX1lW2ldPWEsMD09LS1yJiZ0KGUpfWNhdGNoKHQpe24odCl9fWlmKDA9PT1lLmxlbmd0aClyZXR1cm4gdChbXSk7Zm9yKHZhciByPWUubGVuZ3RoLGk9MDtpPGUubGVuZ3RoO2krKylvKGksZVtpXSl9KX0saS5yZXNvbHZlPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdC5jb25zdHJ1Y3Rvcj09PWk/dDpuZXcgaShmdW5jdGlvbihlKXtlKHQpfSl9LGkucmVqZWN0PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaShmdW5jdGlvbihlLG4pe24odCl9KX0saS5yYWNlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaShmdW5jdGlvbihlLG4pe2Zvcih2YXIgbz0wLHI9dC5sZW5ndGg7bzxyO28rKyl0W29dLnRoZW4oZSxuKX0pfSxpLl9pbW1lZGlhdGVGbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZmdW5jdGlvbih0KXtlKHQpfXx8ZnVuY3Rpb24odCl7ZCh0LDApfSxpLl91bmhhbmRsZWRSZWplY3Rpb25Gbj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSYmY29uc29sZSYmY29uc29sZS53YXJuKFwiUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOlwiLHQpfSxpLl9zZXRJbW1lZGlhdGVGbj1mdW5jdGlvbih0KXtpLl9pbW1lZGlhdGVGbj10fSxpLl9zZXRVbmhhbmRsZWRSZWplY3Rpb25Gbj1mdW5jdGlvbih0KXtpLl91bmhhbmRsZWRSZWplY3Rpb25Gbj10fSx2b2lkIDAhPT10JiZ0LmV4cG9ydHM/dC5leHBvcnRzPWk6bi5Qcm9taXNlfHwobi5Qcm9taXNlPWkpfSh0aGlzKX0pLmNhbGwoZSxuKDE4KS5zZXRJbW1lZGlhdGUpfSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gbyh0LGUpe3RoaXMuX2lkPXQsdGhpcy5fY2xlYXJGbj1lfXZhciByPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtlLnNldFRpbWVvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG8oci5jYWxsKHNldFRpbWVvdXQsd2luZG93LGFyZ3VtZW50cyksY2xlYXJUaW1lb3V0KX0sZS5zZXRJbnRlcnZhbD1mdW5jdGlvbigpe3JldHVybiBuZXcgbyhyLmNhbGwoc2V0SW50ZXJ2YWwsd2luZG93LGFyZ3VtZW50cyksY2xlYXJJbnRlcnZhbCl9LGUuY2xlYXJUaW1lb3V0PWUuY2xlYXJJbnRlcnZhbD1mdW5jdGlvbih0KXt0JiZ0LmNsb3NlKCl9LG8ucHJvdG90eXBlLnVucmVmPW8ucHJvdG90eXBlLnJlZj1mdW5jdGlvbigpe30sby5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LHRoaXMuX2lkKX0sZS5lbnJvbGw9ZnVuY3Rpb24odCxlKXtjbGVhclRpbWVvdXQodC5faWRsZVRpbWVvdXRJZCksdC5faWRsZVRpbWVvdXQ9ZX0sZS51bmVucm9sbD1mdW5jdGlvbih0KXtjbGVhclRpbWVvdXQodC5faWRsZVRpbWVvdXRJZCksdC5faWRsZVRpbWVvdXQ9LTF9LGUuX3VucmVmQWN0aXZlPWUuYWN0aXZlPWZ1bmN0aW9uKHQpe2NsZWFyVGltZW91dCh0Ll9pZGxlVGltZW91dElkKTt2YXIgZT10Ll9pZGxlVGltZW91dDtlPj0wJiYodC5faWRsZVRpbWVvdXRJZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5fb25UaW1lb3V0JiZ0Ll9vblRpbWVvdXQoKX0sZSkpfSxuKDE5KSxlLnNldEltbWVkaWF0ZT1zZXRJbW1lZGlhdGUsZS5jbGVhckltbWVkaWF0ZT1jbGVhckltbWVkaWF0ZX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbih0LGUpeyFmdW5jdGlvbih0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8odCl7XCJmdW5jdGlvblwiIT10eXBlb2YgdCYmKHQ9bmV3IEZ1bmN0aW9uKFwiXCIrdCkpO2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT1hcmd1bWVudHNbbisxXTt2YXIgbz17Y2FsbGJhY2s6dCxhcmdzOmV9O3JldHVybiBsW2NdPW8scyhjKSxjKyt9ZnVuY3Rpb24gcih0KXtkZWxldGUgbFt0XX1mdW5jdGlvbiBpKHQpe3ZhciBlPXQuY2FsbGJhY2ssbz10LmFyZ3M7c3dpdGNoKG8ubGVuZ3RoKXtjYXNlIDA6ZSgpO2JyZWFrO2Nhc2UgMTplKG9bMF0pO2JyZWFrO2Nhc2UgMjplKG9bMF0sb1sxXSk7YnJlYWs7Y2FzZSAzOmUob1swXSxvWzFdLG9bMl0pO2JyZWFrO2RlZmF1bHQ6ZS5hcHBseShuLG8pfX1mdW5jdGlvbiBhKHQpe2lmKHUpc2V0VGltZW91dChhLDAsdCk7ZWxzZXt2YXIgZT1sW3RdO2lmKGUpe3U9ITA7dHJ5e2koZSl9ZmluYWxseXtyKHQpLHU9ITF9fX19aWYoIXQuc2V0SW1tZWRpYXRlKXt2YXIgcyxjPTEsbD17fSx1PSExLGY9dC5kb2N1bWVudCxkPU9iamVjdC5nZXRQcm90b3R5cGVPZiYmT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO2Q9ZCYmZC5zZXRUaW1lb3V0P2Q6dCxcIltvYmplY3QgcHJvY2Vzc11cIj09PXt9LnRvU3RyaW5nLmNhbGwodC5wcm9jZXNzKT9mdW5jdGlvbigpe3M9ZnVuY3Rpb24odCl7ZS5uZXh0VGljayhmdW5jdGlvbigpe2EodCl9KX19KCk6ZnVuY3Rpb24oKXtpZih0LnBvc3RNZXNzYWdlJiYhdC5pbXBvcnRTY3JpcHRzKXt2YXIgZT0hMCxuPXQub25tZXNzYWdlO3JldHVybiB0Lm9ubWVzc2FnZT1mdW5jdGlvbigpe2U9ITF9LHQucG9zdE1lc3NhZ2UoXCJcIixcIipcIiksdC5vbm1lc3NhZ2U9bixlfX0oKT9mdW5jdGlvbigpe3ZhciBlPVwic2V0SW1tZWRpYXRlJFwiK01hdGgucmFuZG9tKCkrXCIkXCIsbj1mdW5jdGlvbihuKXtuLnNvdXJjZT09PXQmJlwic3RyaW5nXCI9PXR5cGVvZiBuLmRhdGEmJjA9PT1uLmRhdGEuaW5kZXhPZihlKSYmYSgrbi5kYXRhLnNsaWNlKGUubGVuZ3RoKSl9O3QuYWRkRXZlbnRMaXN0ZW5lcj90LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsbiwhMSk6dC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLG4pLHM9ZnVuY3Rpb24obil7dC5wb3N0TWVzc2FnZShlK24sXCIqXCIpfX0oKTp0Lk1lc3NhZ2VDaGFubmVsP2Z1bmN0aW9uKCl7dmFyIHQ9bmV3IE1lc3NhZ2VDaGFubmVsO3QucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKHQpe2EodC5kYXRhKX0scz1mdW5jdGlvbihlKXt0LnBvcnQyLnBvc3RNZXNzYWdlKGUpfX0oKTpmJiZcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiaW4gZi5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpP2Z1bmN0aW9uKCl7dmFyIHQ9Zi5kb2N1bWVudEVsZW1lbnQ7cz1mdW5jdGlvbihlKXt2YXIgbj1mLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7bi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXthKGUpLG4ub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsdC5yZW1vdmVDaGlsZChuKSxuPW51bGx9LHQuYXBwZW5kQ2hpbGQobil9fSgpOmZ1bmN0aW9uKCl7cz1mdW5jdGlvbih0KXtzZXRUaW1lb3V0KGEsMCx0KX19KCksZC5zZXRJbW1lZGlhdGU9byxkLmNsZWFySW1tZWRpYXRlPXJ9fShcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZj92b2lkIDA9PT10P3RoaXM6dDpzZWxmKX0pLmNhbGwoZSxuKDcpLG4oMjApKX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBvKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIHIodCl7aWYodT09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQodCwwKTtpZigodT09PW58fCF1KSYmc2V0VGltZW91dClyZXR1cm4gdT1zZXRUaW1lb3V0LHNldFRpbWVvdXQodCwwKTt0cnl7cmV0dXJuIHUodCwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIHUuY2FsbChudWxsLHQsMCl9Y2F0Y2goZSl7cmV0dXJuIHUuY2FsbCh0aGlzLHQsMCl9fX1mdW5jdGlvbiBpKHQpe2lmKGY9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dCh0KTtpZigoZj09PW98fCFmKSYmY2xlYXJUaW1lb3V0KXJldHVybiBmPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQodCk7dHJ5e3JldHVybiBmKHQpfWNhdGNoKGUpe3RyeXtyZXR1cm4gZi5jYWxsKG51bGwsdCl9Y2F0Y2goZSl7cmV0dXJuIGYuY2FsbCh0aGlzLHQpfX19ZnVuY3Rpb24gYSgpe2ImJnAmJihiPSExLHAubGVuZ3RoP209cC5jb25jYXQobSk6dj0tMSxtLmxlbmd0aCYmcygpKX1mdW5jdGlvbiBzKCl7aWYoIWIpe3ZhciB0PXIoYSk7Yj0hMDtmb3IodmFyIGU9bS5sZW5ndGg7ZTspe2ZvcihwPW0sbT1bXTsrK3Y8ZTspcCYmcFt2XS5ydW4oKTt2PS0xLGU9bS5sZW5ndGh9cD1udWxsLGI9ITEsaSh0KX19ZnVuY3Rpb24gYyh0LGUpe3RoaXMuZnVuPXQsdGhpcy5hcnJheT1lfWZ1bmN0aW9uIGwoKXt9dmFyIHUsZixkPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7dT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaCh0KXt1PW59dHJ5e2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpvfWNhdGNoKHQpe2Y9b319KCk7dmFyIHAsbT1bXSxiPSExLHY9LTE7ZC5uZXh0VGljaz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyllW24tMV09YXJndW1lbnRzW25dO20ucHVzaChuZXcgYyh0LGUpKSwxIT09bS5sZW5ndGh8fGJ8fHIocyl9LGMucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LGQudGl0bGU9XCJicm93c2VyXCIsZC5icm93c2VyPSEwLGQuZW52PXt9LGQuYXJndj1bXSxkLnZlcnNpb249XCJcIixkLnZlcnNpb25zPXt9LGQub249bCxkLmFkZExpc3RlbmVyPWwsZC5vbmNlPWwsZC5vZmY9bCxkLnJlbW92ZUxpc3RlbmVyPWwsZC5yZW1vdmVBbGxMaXN0ZW5lcnM9bCxkLmVtaXQ9bCxkLnByZXBlbmRMaXN0ZW5lcj1sLGQucHJlcGVuZE9uY2VMaXN0ZW5lcj1sLGQubGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3JldHVybltdfSxkLmJpbmRpbmc9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGQuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LGQuY2hkaXI9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxkLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bigyMikucG9seWZpbGwoKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8odCxlKXtpZih2b2lkIDA9PT10fHxudWxsPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0XCIpO2Zvcih2YXIgbj1PYmplY3QodCksbz0xO288YXJndW1lbnRzLmxlbmd0aDtvKyspe3ZhciByPWFyZ3VtZW50c1tvXTtpZih2b2lkIDAhPT1yJiZudWxsIT09cilmb3IodmFyIGk9T2JqZWN0LmtleXMoT2JqZWN0KHIpKSxhPTAscz1pLmxlbmd0aDthPHM7YSsrKXt2YXIgYz1pW2FdLGw9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGMpO3ZvaWQgMCE9PWwmJmwuZW51bWVyYWJsZSYmKG5bY109cltjXSl9fXJldHVybiBufWZ1bmN0aW9uIHIoKXtPYmplY3QuYXNzaWdufHxPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LFwiYXNzaWduXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOm99KX10LmV4cG9ydHM9e2Fzc2lnbjpvLHBvbHlmaWxsOnJ9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigyNCkscj1uKDYpLGk9big1KSxhPW4oMzYpLHM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspdFtlXT1hcmd1bWVudHNbZV07aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl7dmFyIG49YS5nZXRPcHRzLmFwcGx5KHZvaWQgMCx0KTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxlKXtpLmRlZmF1bHQucHJvbWlzZT17cmVzb2x2ZTp0LHJlamVjdDplfSxvLmRlZmF1bHQobiksc2V0VGltZW91dChmdW5jdGlvbigpe3Iub3Blbk1vZGFsKCl9KX0pfX07cy5jbG9zZT1yLm9uQWN0aW9uLHMuZ2V0U3RhdGU9ci5nZXRTdGF0ZSxzLnNldEFjdGlvblZhbHVlPWkuc2V0QWN0aW9uVmFsdWUscy5zdG9wTG9hZGluZz1yLnN0b3BMb2FkaW5nLHMuc2V0RGVmYXVsdHM9YS5zZXREZWZhdWx0cyxlLmRlZmF1bHQ9c30sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSkscj1uKDApLGk9ci5kZWZhdWx0Lk1PREFMLGE9big0KSxzPW4oMzQpLGM9bigzNSksbD1uKDEpO2UuaW5pdD1mdW5jdGlvbih0KXtvLmdldE5vZGUoaSl8fChkb2N1bWVudC5ib2R5fHxsLnRocm93RXJyKFwiWW91IGNhbiBvbmx5IHVzZSBTd2VldEFsZXJ0IEFGVEVSIHRoZSBET00gaGFzIGxvYWRlZCFcIikscy5kZWZhdWx0KCksYS5kZWZhdWx0KCkpLGEuaW5pdE1vZGFsQ29udGVudCh0KSxjLmRlZmF1bHQodCl9LGUuZGVmYXVsdD1lLmluaXR9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDApLHI9by5kZWZhdWx0Lk1PREFMO2UubW9kYWxNYXJrdXA9J1xcbiAgPGRpdiBjbGFzcz1cIicrcisnXCIgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCI+PC9kaXY+JyxlLmRlZmF1bHQ9ZS5tb2RhbE1hcmt1cH0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMCkscj1vLmRlZmF1bHQuT1ZFUkxBWSxpPSc8ZGl2IFxcbiAgICBjbGFzcz1cIicrcisnXCJcXG4gICAgdGFiSW5kZXg9XCItMVwiPlxcbiAgPC9kaXY+JztlLmRlZmF1bHQ9aX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMCkscj1vLmRlZmF1bHQuSUNPTjtlLmVycm9ySWNvbk1hcmt1cD1mdW5jdGlvbigpe3ZhciB0PXIrXCItLWVycm9yXCIsZT10K1wiX19saW5lXCI7cmV0dXJuJ1xcbiAgICA8ZGl2IGNsYXNzPVwiJyt0KydfX3gtbWFya1wiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiJytlK1wiIFwiK2UrJy0tbGVmdFwiPjwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cIicrZStcIiBcIitlKyctLXJpZ2h0XCI+PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICd9LGUud2FybmluZ0ljb25NYXJrdXA9ZnVuY3Rpb24oKXt2YXIgdD1yK1wiLS13YXJuaW5nXCI7cmV0dXJuJ1xcbiAgICA8c3BhbiBjbGFzcz1cIicrdCsnX19ib2R5XCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XCInK3QrJ19fZG90XCI+PC9zcGFuPlxcbiAgICA8L3NwYW4+XFxuICAnfSxlLnN1Y2Nlc3NJY29uTWFya3VwPWZ1bmN0aW9uKCl7dmFyIHQ9citcIi0tc3VjY2Vzc1wiO3JldHVybidcXG4gICAgPHNwYW4gY2xhc3M9XCInK3QrXCJfX2xpbmUgXCIrdCsnX19saW5lLS1sb25nXCI+PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cIicrdCtcIl9fbGluZSBcIit0KydfX2xpbmUtLXRpcFwiPjwvc3Bhbj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cIicrdCsnX19yaW5nXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCInK3QrJ19faGlkZS1jb3JuZXJzXCI+PC9kaXY+XFxuICAnfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMCkscj1vLmRlZmF1bHQuQ09OVEVOVDtlLmNvbnRlbnRNYXJrdXA9J1xcbiAgPGRpdiBjbGFzcz1cIicrcisnXCI+XFxuXFxuICA8L2Rpdj5cXG4nfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigwKSxyPW8uZGVmYXVsdC5CVVRUT05fQ09OVEFJTkVSLGk9by5kZWZhdWx0LkJVVFRPTixhPW8uZGVmYXVsdC5CVVRUT05fTE9BREVSO2UuYnV0dG9uTWFya3VwPSdcXG4gIDxkaXYgY2xhc3M9XCInK3IrJ1wiPlxcblxcbiAgICA8YnV0dG9uXFxuICAgICAgY2xhc3M9XCInK2krJ1wiXFxuICAgID48L2J1dHRvbj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cIicrYSsnXCI+XFxuICAgICAgPGRpdj48L2Rpdj5cXG4gICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgIDxkaXY+PC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgPC9kaXY+XFxuJ30sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oNCkscj1uKDIpLGk9bigwKSxhPWkuZGVmYXVsdC5JQ09OLHM9aS5kZWZhdWx0LklDT05fQ1VTVE9NLGM9W1wiZXJyb3JcIixcIndhcm5pbmdcIixcInN1Y2Nlc3NcIixcImluZm9cIl0sbD17ZXJyb3I6ci5lcnJvckljb25NYXJrdXAoKSx3YXJuaW5nOnIud2FybmluZ0ljb25NYXJrdXAoKSxzdWNjZXNzOnIuc3VjY2Vzc0ljb25NYXJrdXAoKX0sdT1mdW5jdGlvbih0LGUpe3ZhciBuPWErXCItLVwiK3Q7ZS5jbGFzc0xpc3QuYWRkKG4pO3ZhciBvPWxbdF07byYmKGUuaW5uZXJIVE1MPW8pfSxmPWZ1bmN0aW9uKHQsZSl7ZS5jbGFzc0xpc3QuYWRkKHMpO3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7bi5zcmM9dCxlLmFwcGVuZENoaWxkKG4pfSxkPWZ1bmN0aW9uKHQpe2lmKHQpe3ZhciBlPW8uaW5qZWN0RWxJbnRvTW9kYWwoci5pY29uTWFya3VwKTtjLmluY2x1ZGVzKHQpP3UodCxlKTpmKHQsZSl9fTtlLmRlZmF1bHQ9ZH0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMikscj1uKDQpLGk9ZnVuY3Rpb24odCl7bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIkFwcGxlV2ViS2l0XCIpJiYodC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHQub2Zmc2V0SGVpZ2h0LHQuc3R5bGUuZGlzcGxheT1cIlwiKX07ZS5pbml0VGl0bGU9ZnVuY3Rpb24odCl7aWYodCl7dmFyIGU9ci5pbmplY3RFbEludG9Nb2RhbChvLnRpdGxlTWFya3VwKTtlLnRleHRDb250ZW50PXQsaShlKX19LGUuaW5pdFRleHQ9ZnVuY3Rpb24odCl7aWYodCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO3Quc3BsaXQoXCJcXG5cIikuZm9yRWFjaChmdW5jdGlvbih0LG4sbyl7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSksbjxvLmxlbmd0aC0xJiZlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSl9KTt2YXIgbj1yLmluamVjdEVsSW50b01vZGFsKG8udGV4dE1hcmt1cCk7bi5hcHBlbmRDaGlsZChlKSxpKG4pfX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLHI9big0KSxpPW4oMCksYT1pLmRlZmF1bHQuQlVUVE9OLHM9aS5kZWZhdWx0LkRBTkdFUl9CVVRUT04sYz1uKDMpLGw9bigyKSx1PW4oNiksZj1uKDUpLGQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPWUudGV4dCxpPWUudmFsdWUsZD1lLmNsYXNzTmFtZSxwPWUuY2xvc2VNb2RhbCxtPW8uc3RyaW5nVG9Ob2RlKGwuYnV0dG9uTWFya3VwKSxiPW0ucXVlcnlTZWxlY3RvcihcIi5cIithKSx2PWErXCItLVwiK3Q7aWYoYi5jbGFzc0xpc3QuYWRkKHYpLGQpeyhBcnJheS5pc0FycmF5KGQpP2Q6ZC5zcGxpdChcIiBcIikpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5sZW5ndGg+MH0pLmZvckVhY2goZnVuY3Rpb24odCl7Yi5jbGFzc0xpc3QuYWRkKHQpfSl9biYmdD09PWMuQ09ORklSTV9LRVkmJmIuY2xhc3NMaXN0LmFkZChzKSxiLnRleHRDb250ZW50PXI7dmFyIGc9e307cmV0dXJuIGdbdF09aSxmLnNldEFjdGlvblZhbHVlKGcpLGYuc2V0QWN0aW9uT3B0aW9uc0Zvcih0LHtjbG9zZU1vZGFsOnB9KSxiLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHUub25BY3Rpb24odCl9KSxtfSxwPWZ1bmN0aW9uKHQsZSl7dmFyIG49ci5pbmplY3RFbEludG9Nb2RhbChsLmZvb3Rlck1hcmt1cCk7Zm9yKHZhciBvIGluIHQpe3ZhciBpPXRbb10sYT1kKG8saSxlKTtpLnZpc2libGUmJm4uYXBwZW5kQ2hpbGQoYSl9MD09PW4uY2hpbGRyZW4ubGVuZ3RoJiZuLnJlbW92ZSgpfTtlLmRlZmF1bHQ9cH0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMykscj1uKDQpLGk9bigyKSxhPW4oNSkscz1uKDYpLGM9bigwKSxsPWMuZGVmYXVsdC5DT05URU5ULHU9ZnVuY3Rpb24odCl7dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIixmdW5jdGlvbih0KXt2YXIgZT10LnRhcmdldCxuPWUudmFsdWU7YS5zZXRBY3Rpb25WYWx1ZShuKX0pLHQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsZnVuY3Rpb24odCl7aWYoXCJFbnRlclwiPT09dC5rZXkpcmV0dXJuIHMub25BY3Rpb24oby5DT05GSVJNX0tFWSl9KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5mb2N1cygpLGEuc2V0QWN0aW9uVmFsdWUoXCJcIil9LDApfSxmPWZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpLHI9bCtcIl9fXCIrZTtvLmNsYXNzTGlzdC5hZGQocik7Zm9yKHZhciBpIGluIG4pe3ZhciBhPW5baV07b1tpXT1hfVwiaW5wdXRcIj09PWUmJnUobyksdC5hcHBlbmRDaGlsZChvKX0sZD1mdW5jdGlvbih0KXtpZih0KXt2YXIgZT1yLmluamVjdEVsSW50b01vZGFsKGkuY29udGVudE1hcmt1cCksbj10LmVsZW1lbnQsbz10LmF0dHJpYnV0ZXM7XCJzdHJpbmdcIj09dHlwZW9mIG4/ZihlLG4sbyk6ZS5hcHBlbmRDaGlsZChuKX19O2UuZGVmYXVsdD1kfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxyPW4oMiksaT1mdW5jdGlvbigpe3ZhciB0PW8uc3RyaW5nVG9Ob2RlKHIub3ZlcmxheU1hcmt1cCk7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KX07ZS5kZWZhdWx0PWl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDUpLHI9big2KSxpPW4oMSksYT1uKDMpLHM9bigwKSxjPXMuZGVmYXVsdC5NT0RBTCxsPXMuZGVmYXVsdC5CVVRUT04sdT1zLmRlZmF1bHQuT1ZFUkxBWSxmPWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx2KCl9LGQ9ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLGcoKX0scD1mdW5jdGlvbih0KXtpZihvLmRlZmF1bHQuaXNPcGVuKXN3aXRjaCh0LmtleSl7Y2FzZVwiRXNjYXBlXCI6cmV0dXJuIHIub25BY3Rpb24oYS5DQU5DRUxfS0VZKX19LG09ZnVuY3Rpb24odCl7aWYoby5kZWZhdWx0LmlzT3Blbilzd2l0Y2godC5rZXkpe2Nhc2VcIlRhYlwiOnJldHVybiBmKHQpfX0sYj1mdW5jdGlvbih0KXtpZihvLmRlZmF1bHQuaXNPcGVuKXJldHVyblwiVGFiXCI9PT10LmtleSYmdC5zaGlmdEtleT9kKHQpOnZvaWQgMH0sdj1mdW5jdGlvbigpe3ZhciB0PWkuZ2V0Tm9kZShsKTt0JiYodC50YWJJbmRleD0wLHQuZm9jdXMoKSl9LGc9ZnVuY3Rpb24oKXt2YXIgdD1pLmdldE5vZGUoYyksZT10LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrbCksbj1lLmxlbmd0aC0xLG89ZVtuXTtvJiZvLmZvY3VzKCl9LGg9ZnVuY3Rpb24odCl7dFt0Lmxlbmd0aC0xXS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLG0pfSx3PWZ1bmN0aW9uKHQpe3RbMF0uYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIixiKX0seT1mdW5jdGlvbigpe3ZhciB0PWkuZ2V0Tm9kZShjKSxlPXQucXVlcnlTZWxlY3RvckFsbChcIi5cIitsKTtlLmxlbmd0aCYmKGgoZSksdyhlKSl9LHg9ZnVuY3Rpb24odCl7aWYoaS5nZXROb2RlKHUpPT09dC50YXJnZXQpcmV0dXJuIHIub25BY3Rpb24oYS5DQU5DRUxfS0VZKX0sXz1mdW5jdGlvbih0KXt2YXIgZT1pLmdldE5vZGUodSk7ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix4KSx0JiZlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHgpfSxrPWZ1bmN0aW9uKHQpe28uZGVmYXVsdC50aW1lciYmY2xlYXJUaW1lb3V0KG8uZGVmYXVsdC50aW1lciksdCYmKG8uZGVmYXVsdC50aW1lcj13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiByLm9uQWN0aW9uKGEuQ0FOQ0VMX0tFWSl9LHQpKX0sTz1mdW5jdGlvbih0KXt0LmNsb3NlT25Fc2M/ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIscCk6ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIscCksdC5kYW5nZXJNb2RlP3YoKTpnKCkseSgpLF8odC5jbG9zZU9uQ2xpY2tPdXRzaWRlKSxrKHQudGltZXIpfTtlLmRlZmF1bHQ9T30sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSkscj1uKDMpLGk9bigzNyksYT1uKDM4KSxzPXt0aXRsZTpudWxsLHRleHQ6bnVsbCxpY29uOm51bGwsYnV0dG9uczpyLmRlZmF1bHRCdXR0b25MaXN0LGNvbnRlbnQ6bnVsbCxjbGFzc05hbWU6bnVsbCxjbG9zZU9uQ2xpY2tPdXRzaWRlOiEwLGNsb3NlT25Fc2M6ITAsZGFuZ2VyTW9kZTohMSx0aW1lcjpudWxsfSxjPU9iamVjdC5hc3NpZ24oe30scyk7ZS5zZXREZWZhdWx0cz1mdW5jdGlvbih0KXtjPU9iamVjdC5hc3NpZ24oe30scyx0KX07dmFyIGw9ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5idXR0b24sbj10JiZ0LmJ1dHRvbnM7cmV0dXJuIHZvaWQgMCE9PWUmJnZvaWQgMCE9PW4mJm8udGhyb3dFcnIoXCJDYW5ub3Qgc2V0IGJvdGggJ2J1dHRvbicgYW5kICdidXR0b25zJyBvcHRpb25zIVwiKSx2b2lkIDAhPT1lP3tjb25maXJtOmV9Om59LHU9ZnVuY3Rpb24odCl7cmV0dXJuIG8ub3JkaW5hbFN1ZmZpeE9mKHQrMSl9LGY9ZnVuY3Rpb24odCxlKXtvLnRocm93RXJyKHUoZSkrXCIgYXJndW1lbnQgKCdcIit0K1wiJykgaXMgaW52YWxpZFwiKX0sZD1mdW5jdGlvbih0LGUpe3ZhciBuPXQrMSxyPWVbbl07by5pc1BsYWluT2JqZWN0KHIpfHx2b2lkIDA9PT1yfHxvLnRocm93RXJyKFwiRXhwZWN0ZWQgXCIrdShuKStcIiBhcmd1bWVudCAoJ1wiK3IrXCInKSB0byBiZSBhIHBsYWluIG9iamVjdFwiKX0scD1mdW5jdGlvbih0LGUpe3ZhciBuPXQrMSxyPWVbbl07dm9pZCAwIT09ciYmby50aHJvd0VycihcIlVuZXhwZWN0ZWQgXCIrdShuKStcIiBhcmd1bWVudCAoXCIrcitcIilcIil9LG09ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9dHlwZW9mIGUsYT1cInN0cmluZ1wiPT09aSxzPWUgaW5zdGFuY2VvZiBFbGVtZW50O2lmKGEpe2lmKDA9PT1uKXJldHVybnt0ZXh0OmV9O2lmKDE9PT1uKXJldHVybnt0ZXh0OmUsdGl0bGU6clswXX07aWYoMj09PW4pcmV0dXJuIGQobixyKSx7aWNvbjplfTtmKGUsbil9ZWxzZXtpZihzJiYwPT09bilyZXR1cm4gZChuLHIpLHtjb250ZW50OmV9O2lmKG8uaXNQbGFpbk9iamVjdChlKSlyZXR1cm4gcChuLHIpLGU7ZihlLG4pfX07ZS5nZXRPcHRzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO3ZhciBuPXt9O3QuZm9yRWFjaChmdW5jdGlvbihlLG8pe3ZhciByPW0oMCxlLG8sdCk7T2JqZWN0LmFzc2lnbihuLHIpfSk7dmFyIG89bChuKTtuLmJ1dHRvbnM9ci5nZXRCdXR0b25MaXN0T3B0cyhvKSxkZWxldGUgbi5idXR0b24sbi5jb250ZW50PWkuZ2V0Q29udGVudE9wdHMobi5jb250ZW50KTt2YXIgdT1PYmplY3QuYXNzaWduKHt9LHMsYyxuKTtyZXR1cm4gT2JqZWN0LmtleXModSkuZm9yRWFjaChmdW5jdGlvbih0KXthLkRFUFJFQ0FURURfT1BUU1t0XSYmYS5sb2dEZXByZWNhdGlvbih0KX0pLHV9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxyPXtlbGVtZW50OlwiaW5wdXRcIixhdHRyaWJ1dGVzOntwbGFjZWhvbGRlcjpcIlwifX07ZS5nZXRDb250ZW50T3B0cz1mdW5jdGlvbih0KXt2YXIgZT17fTtyZXR1cm4gby5pc1BsYWluT2JqZWN0KHQpP09iamVjdC5hc3NpZ24oZSx0KTp0IGluc3RhbmNlb2YgRWxlbWVudD97ZWxlbWVudDp0fTpcImlucHV0XCI9PT10P3I6bnVsbH19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmxvZ0RlcHJlY2F0aW9uPWZ1bmN0aW9uKHQpe3ZhciBuPWUuREVQUkVDQVRFRF9PUFRTW3RdLG89bi5vbmx5UmVuYW1lLHI9bi5yZXBsYWNlbWVudCxpPW4uc3ViT3B0aW9uLGE9bi5saW5rLHM9bz9cInJlbmFtZWRcIjpcImRlcHJlY2F0ZWRcIixjPSdTd2VldEFsZXJ0IHdhcm5pbmc6IFwiJyt0KydcIiBvcHRpb24gaGFzIGJlZW4gJytzK1wiLlwiO2lmKHIpe2MrPVwiIFBsZWFzZSB1c2VcIisoaT8nIFwiJytpKydcIiBpbiAnOlwiIFwiKSsnXCInK3IrJ1wiIGluc3RlYWQuJ312YXIgbD1cImh0dHBzOi8vc3dlZXRhbGVydC5qcy5vcmdcIjtjKz1hP1wiIE1vcmUgZGV0YWlsczogXCIrbCthOlwiIE1vcmUgZGV0YWlsczogXCIrbCtcIi9ndWlkZXMvI3VwZ3JhZGluZy1mcm9tLTF4XCIsY29uc29sZS53YXJuKGMpfSxlLkRFUFJFQ0FURURfT1BUUz17dHlwZTp7cmVwbGFjZW1lbnQ6XCJpY29uXCIsbGluazpcIi9kb2NzLyNpY29uXCJ9LGltYWdlVXJsOntyZXBsYWNlbWVudDpcImljb25cIixsaW5rOlwiL2RvY3MvI2ljb25cIn0sY3VzdG9tQ2xhc3M6e3JlcGxhY2VtZW50OlwiY2xhc3NOYW1lXCIsb25seVJlbmFtZTohMCxsaW5rOlwiL2RvY3MvI2NsYXNzbmFtZVwifSxpbWFnZVNpemU6e30sc2hvd0NhbmNlbEJ1dHRvbjp7cmVwbGFjZW1lbnQ6XCJidXR0b25zXCIsbGluazpcIi9kb2NzLyNidXR0b25zXCJ9LHNob3dDb25maXJtQnV0dG9uOntyZXBsYWNlbWVudDpcImJ1dHRvblwiLGxpbms6XCIvZG9jcy8jYnV0dG9uXCJ9LGNvbmZpcm1CdXR0b25UZXh0OntyZXBsYWNlbWVudDpcImJ1dHRvblwiLGxpbms6XCIvZG9jcy8jYnV0dG9uXCJ9LGNvbmZpcm1CdXR0b25Db2xvcjp7fSxjYW5jZWxCdXR0b25UZXh0OntyZXBsYWNlbWVudDpcImJ1dHRvbnNcIixsaW5rOlwiL2RvY3MvI2J1dHRvbnNcIn0sY2xvc2VPbkNvbmZpcm06e3JlcGxhY2VtZW50OlwiYnV0dG9uXCIsc3ViT3B0aW9uOlwiY2xvc2VNb2RhbFwiLGxpbms6XCIvZG9jcy8jYnV0dG9uXCJ9LGNsb3NlT25DYW5jZWw6e3JlcGxhY2VtZW50OlwiYnV0dG9uc1wiLHN1Yk9wdGlvbjpcImNsb3NlTW9kYWxcIixsaW5rOlwiL2RvY3MvI2J1dHRvbnNcIn0sc2hvd0xvYWRlck9uQ29uZmlybTp7cmVwbGFjZW1lbnQ6XCJidXR0b25zXCJ9LGFuaW1hdGlvbjp7fSxpbnB1dFR5cGU6e3JlcGxhY2VtZW50OlwiY29udGVudFwiLGxpbms6XCIvZG9jcy8jY29udGVudFwifSxpbnB1dFZhbHVlOntyZXBsYWNlbWVudDpcImNvbnRlbnRcIixsaW5rOlwiL2RvY3MvI2NvbnRlbnRcIn0saW5wdXRQbGFjZWhvbGRlcjp7cmVwbGFjZW1lbnQ6XCJjb250ZW50XCIsbGluazpcIi9kb2NzLyNjb250ZW50XCJ9LGh0bWw6e3JlcGxhY2VtZW50OlwiY29udGVudFwiLGxpbms6XCIvZG9jcy8jY29udGVudFwifSxhbGxvd0VzY2FwZUtleTp7cmVwbGFjZW1lbnQ6XCJjbG9zZU9uRXNjXCIsb25seVJlbmFtZTohMCxsaW5rOlwiL2RvY3MvI2Nsb3Nlb25lc2NcIn0sYWxsb3dDbGlja091dHNpZGU6e3JlcGxhY2VtZW50OlwiY2xvc2VPbkNsaWNrT3V0c2lkZVwiLG9ubHlSZW5hbWU6ITAsbGluazpcIi9kb2NzLyNjbG9zZW9uY2xpY2tvdXRzaWRlXCJ9fX1dKX0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZWdpc3Rlci5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcbi8qKlxuICogSGFzIG93biBwcm9wZXJ0eS5cbiAqXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBUbyBzdHJpbmcuXG4gKlxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYSB2YWx1ZSBpcyBcImVtcHR5XCIuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzRW1wdHkodmFsKSB7XG4gIC8vIE51bGwgYW5kIFVuZGVmaW5lZC4uLlxuICBpZiAodmFsID09IG51bGwpIHJldHVybiB0cnVlXG5cbiAgLy8gQm9vbGVhbnMuLi5cbiAgaWYgKCdib29sZWFuJyA9PSB0eXBlb2YgdmFsKSByZXR1cm4gZmFsc2VcblxuICAvLyBOdW1iZXJzLi4uXG4gIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgdmFsKSByZXR1cm4gdmFsID09PSAwXG5cbiAgLy8gU3RyaW5ncy4uLlxuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHZhbC5sZW5ndGggPT09IDBcblxuICAvLyBGdW5jdGlvbnMuLi5cbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHZhbC5sZW5ndGggPT09IDBcblxuICAvLyBBcnJheXMuLi5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbC5sZW5ndGggPT09IDBcblxuICAvLyBFcnJvcnMuLi5cbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLm1lc3NhZ2UgPT09ICcnXG5cbiAgLy8gT2JqZWN0cy4uLlxuICBpZiAodmFsLnRvU3RyaW5nID09IHRvU3RyaW5nKSB7XG4gICAgc3dpdGNoICh2YWwudG9TdHJpbmcoKSkge1xuXG4gICAgICAvLyBNYXBzLCBTZXRzLCBGaWxlcyBhbmQgRXJyb3JzLi4uXG4gICAgICBjYXNlICdbb2JqZWN0IEZpbGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgTWFwXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFNldF0nOiB7XG4gICAgICAgIHJldHVybiB2YWwuc2l6ZSA9PT0gMFxuICAgICAgfVxuXG4gICAgICAvLyBQbGFpbiBvYmplY3RzLi4uXG4gICAgICBjYXNlICdbb2JqZWN0IE9iamVjdF0nOiB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YWwpIHtcbiAgICAgICAgICBpZiAoaGFzLmNhbGwodmFsLCBrZXkpKSByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQW55dGhpbmcgZWxzZS4uLlxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBFeHBvcnQgYGlzRW1wdHlgLlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHlcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXG5hLCBwLCBsYWJlbCwgYnV0dG9uLCAucnQtdGQsIC5zYy1BeWtLRiwgLnNjLUF5a0tHIHtcXG4gICAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgXFxcIk5vdG8gU2Fuc1xcXCIsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiLCBcXFwiTm90byBDb2xvciBFbW9qaVxcXCIgIWltcG9ydGFudDtcXG59XFxuXFxuYS5idG4tcHJpbWFyeXtcXG4gICAgZGlzcGxheTppbmxpbmUtYmxvY2s7XFxuICAgIHBhZGRpbmc6MC43ZW0gMS40ZW07XFxuICAgIG1hcmdpbjowIDAuM2VtIDAuM2VtIDA7XFxuICAgIGJvcmRlci1yYWRpdXM6MC4xNWVtO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICB0ZXh0LWRlY29yYXRpb246bm9uZTtcXG4gICAgZm9udC1mYW1pbHk6J1JvYm90bycsc2Fucy1zZXJpZjtcXG4gICAgdGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO1xcbiAgICBmb250LXdlaWdodDo0MDA7XFxuICAgIGNvbG9yOiNGRkZGRkYgIWltcG9ydGFudDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojNjY4ZmZmO1xcbiAgICBib3gtc2hhZG93Omluc2V0IDAgLTAuNmVtIDAgLTAuMzVlbSByZ2JhKDAsMCwwLDAuMTcpO1xcbiAgICB0ZXh0LWFsaWduOmNlbnRlcjtcXG4gICAgcG9zaXRpb246cmVsYXRpdmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXFxufVxcblxcblxcbmEuYnRuLXByaW1hcnk6YWN0aXZle1xcbnRvcDowLjFlbTtcXG59XFxuXFxuLndpZHRoLTgwMHB0IHtcXG4gICAgd2lkdGg6IDgwMHB0O1xcbn1cXG5cXG4ud2lkdGgtODAwcHQtMTAwaCB7XFxuICAgIHdpZHRoOiA4MDBwdDtcXG59XFxuXFxuXFxuLyogQ29sb3IgcGFsZXR0ZSAqL1xcbi5wcmltYXJ5IHtcXG4gICAgY29sb3I6ICMwMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnByaW1hcnktZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2E1YTVhNSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uc2Vjb25kYXJ5IHtcXG4gICAgY29sb3I6ICM0OTcwRDkgIWltcG9ydGFudDtcXG59XFxuXFxuXFxuLnN1Y2Nlc3Mge1xcbiAgICBjb2xvcjogIzZDQkUyNyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaW5mbyB7XFxuICAgIGNvbG9yOiAjMjZDNkRBO1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAwLjE4ZW07XFxufVxcblxcbi53YXJuaW5nIHtcXG4gICAgY29sb3I6ICNGRkJGMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmRhbmdlciB7XFxuICAgIGNvbG9yOiAjRkY2QTZFICFpbXBvcnRhbnQ7XFxufVxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvQXBwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBQ0E7SUFDSSx5TkFBeU47QUFDN047O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QixvQkFBb0I7SUFDcEIsc0JBQXNCO0lBQ3RCLG9CQUFvQjtJQUNwQiwrQkFBK0I7SUFDL0Isd0JBQXdCO0lBQ3hCLGVBQWU7SUFDZix3QkFBd0I7SUFDeEIsd0JBQXdCO0lBQ3hCLG9EQUFvRDtJQUNwRCxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGVBQWU7QUFDbkI7OztBQUdBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7OztBQUdBLGtCQUFrQjtBQUNsQjtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7O0FBR0E7SUFDSSx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsZUFBZTtJQUNmLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5hLCBwLCBsYWJlbCwgYnV0dG9uLCAucnQtdGQsIC5zYy1BeWtLRiwgLnNjLUF5a0tHIHtcXG4gICAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgXFxcIk5vdG8gU2Fuc1xcXCIsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiLCBcXFwiTm90byBDb2xvciBFbW9qaVxcXCIgIWltcG9ydGFudDtcXG59XFxuXFxuYS5idG4tcHJpbWFyeXtcXG4gICAgZGlzcGxheTppbmxpbmUtYmxvY2s7XFxuICAgIHBhZGRpbmc6MC43ZW0gMS40ZW07XFxuICAgIG1hcmdpbjowIDAuM2VtIDAuM2VtIDA7XFxuICAgIGJvcmRlci1yYWRpdXM6MC4xNWVtO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICB0ZXh0LWRlY29yYXRpb246bm9uZTtcXG4gICAgZm9udC1mYW1pbHk6J1JvYm90bycsc2Fucy1zZXJpZjtcXG4gICAgdGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO1xcbiAgICBmb250LXdlaWdodDo0MDA7XFxuICAgIGNvbG9yOiNGRkZGRkYgIWltcG9ydGFudDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojNjY4ZmZmO1xcbiAgICBib3gtc2hhZG93Omluc2V0IDAgLTAuNmVtIDAgLTAuMzVlbSByZ2JhKDAsMCwwLDAuMTcpO1xcbiAgICB0ZXh0LWFsaWduOmNlbnRlcjtcXG4gICAgcG9zaXRpb246cmVsYXRpdmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXFxufVxcblxcblxcbmEuYnRuLXByaW1hcnk6YWN0aXZle1xcbnRvcDowLjFlbTtcXG59XFxuXFxuLndpZHRoLTgwMHB0IHtcXG4gICAgd2lkdGg6IDgwMHB0O1xcbn1cXG5cXG4ud2lkdGgtODAwcHQtMTAwaCB7XFxuICAgIHdpZHRoOiA4MDBwdDtcXG59XFxuXFxuXFxuLyogQ29sb3IgcGFsZXR0ZSAqL1xcbi5wcmltYXJ5IHtcXG4gICAgY29sb3I6ICMwMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnByaW1hcnktZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2E1YTVhNSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uc2Vjb25kYXJ5IHtcXG4gICAgY29sb3I6ICM0OTcwRDkgIWltcG9ydGFudDtcXG59XFxuXFxuXFxuLnN1Y2Nlc3Mge1xcbiAgICBjb2xvcjogIzZDQkUyNyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaW5mbyB7XFxuICAgIGNvbG9yOiAjMjZDNkRBO1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIGxldHRlci1zcGFjaW5nOiAwLjE4ZW07XFxufVxcblxcbi53YXJuaW5nIHtcXG4gICAgY29sb3I6ICNGRkJGMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmRhbmdlciB7XFxuICAgIGNvbG9yOiAjRkY2QTZFICFpbXBvcnRhbnQ7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhzdWJzY3JpYmVVcGRhdGVzLCBbc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaF0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgc3RvcmVTdGF0ZSAhPT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gc3RvcmVTdGF0ZTtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY29uc3Qgc2V0QXV0aFRva2VuID0gKHRva2VuKSA9PiB7XG4gIGlmICh0b2tlbikge1xuICAgIC8vIEFwcGx5IGF1dGhvcml6YXRpb24gdG9rZW4gdG8gZXZlcnkgcmVxdWVzdCBpZiBsb2dnZWQgaW5cbiAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gdG9rZW47XG4gIH0gZWxzZSB7XG4gICAgLy8gRGVsZXRlIGF1dGggaGVhZGVyXG4gICAgZGVsZXRlIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ107XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNldEF1dGhUb2tlbjtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgc2V0QXV0aFRva2VuIGZyb20gJy4uL3V0aWxzL3NldEF1dGhUb2tlbic7XG5pbXBvcnQgand0X2RlY29kZSBmcm9tICdqd3QtZGVjb2RlJztcblxuaW1wb3J0IHsgR0VUX0VSUk9SUywgU0VUX0NVUlJFTlRfVVNFUiwgVVNFUl9MT0FESU5HLCBTRVRfU1VDQ0VTU0ZVTF9SRUdJU1RFUiwgQ0xFQVJfUkVHSVNURVIgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gUmVnaXN0ZXIgVXNlclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyVXNlciA9ICh1c2VyRGF0YSkgPT4gKGRpc3BhdGNoKSA9PiB7XG4gIGF4aW9zXG4gICAgLnBvc3QoJy9hcGkvdXNlcnMvcmVnaXN0ZXInLCB1c2VyRGF0YSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFNFVF9TVUNDRVNTRlVMX1JFR0lTVEVSXG4gICAgICB9KVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEdFVF9FUlJPUlMsXG4gICAgICAgIHBheWxvYWQ6IGVyci5yZXNwb25zZS5kYXRhLFxuICAgICAgfSlcbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyUmVnaXN0ZXIgPSAoKSA9PiAoZGlzcGF0Y2gpID0+IHtcbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IENMRUFSX1JFR0lTVEVSXG4gIH0pXG59XG5cbi8vIExvZ2luIC0gZ2V0IHVzZXIgdG9rZW5cbmV4cG9ydCBjb25zdCBsb2dpblVzZXIgPSAodXNlckRhdGEpID0+IChkaXNwYXRjaCkgPT4ge1xuICBheGlvc1xuICAgIC5wb3N0KCcvYXBpL3VzZXJzL2xvZ2luJywgdXNlckRhdGEpXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgLy8gU2F2ZSB0byBsb2NhbFN0b3JhZ2VcblxuICAgICAgLy8gU2V0IHRva2VuIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgY29uc3QgeyB0b2tlbiB9ID0gcmVzLmRhdGE7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnand0VG9rZW4nLCB0b2tlbik7XG4gICAgICAvLyBTZXQgdG9rZW4gdG8gQXV0aCBoZWFkZXJcbiAgICAgIHNldEF1dGhUb2tlbih0b2tlbik7XG4gICAgICAvLyBEZWNvZGUgdG9rZW4gdG8gZ2V0IHVzZXIgZGF0YVxuICAgICAgY29uc3QgZGVjb2RlZCA9IGp3dF9kZWNvZGUodG9rZW4pO1xuICAgICAgLy8gU2V0IGN1cnJlbnQgdXNlclxuICAgICAgZGlzcGF0Y2goc2V0Q3VycmVudFVzZXIoZGVjb2RlZCkpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogR0VUX0VSUk9SUyxcbiAgICAgICAgcGF5bG9hZDogZXJyLFxuICAgICAgfSlcbiAgICB9XG4gICAgKTtcbn07XG5cbi8vIFNldCBsb2dnZWQgaW4gdXNlclxuZXhwb3J0IGNvbnN0IHNldEN1cnJlbnRVc2VyID0gKGRlY29kZWQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfQ1VSUkVOVF9VU0VSLFxuICAgIHBheWxvYWQ6IGRlY29kZWQsXG4gIH07XG59O1xuXG4vLyBVc2VyIGxvYWRpbmdcbmV4cG9ydCBjb25zdCBzZXRVc2VyTG9hZGluZyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBVU0VSX0xPQURJTkcsXG4gIH07XG59O1xuXG4vLyBMb2cgdXNlciBvdXRcbmV4cG9ydCBjb25zdCBsb2dvdXRVc2VyID0gKGhpc3RvcnkpID0+IChkaXNwYXRjaCkgPT4ge1xuICBjb25zb2xlLmxvZyhoaXN0b3J5KTtcbiAgLy8gUmVtb3ZlIHRva2VuIGZyb20gbG9jYWwgc3RvcmFnZVxuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnand0VG9rZW4nKTtcbiAgLy8gUmVtb3ZlIGF1dGggaGVhZGVyIGZvciBmdXR1cmUgcmVxdWVzdHNcbiAgc2V0QXV0aFRva2VuKGZhbHNlKTtcbiAgLy8gU2V0IGN1cnJlbnQgdXNlciB0byBlbXB0eSBvYmplY3Qge30gd2hpY2ggd2lsbCBzZXQgaXNBdXRoZW50aWNhdGVkIHRvIGZhbHNlXG4gIGRpc3BhdGNoKHNldEN1cnJlbnRVc2VyKHt9KSk7XG4gIGhpc3RvcnkucHVzaCgnL2xvZ2luJyk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IEdFVF9FUlJPUlMgPSAnR0VUX0VSUk9SUyc7XG5leHBvcnQgY29uc3QgVVNFUl9MT0FESU5HID0gJ1VTRVJfTE9BRElORyc7XG5leHBvcnQgY29uc3QgU0VUX0NVUlJFTlRfVVNFUiA9ICdTRVRfQ1VSUkVOVF9VU0VSJztcbmV4cG9ydCBjb25zdCBTRVRfU1VDQ0VTU0ZVTF9SRUdJU1RFUiA9ICdTRVRfU1VDQ0VTU0ZVTF9SRUdJU1RFUic7XG5leHBvcnQgY29uc3QgQ0xFQVJfUkVHSVNURVIgPSAnQ0xFQVJfUkVHSVNURVInOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbnZhciBUaGVtZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG52YXIgQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXIsXG4gICAgUHJvdmlkZXIgPSBUaGVtZUNvbnRleHQuUHJvdmlkZXI7XG5cbmZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIoX3JlZikge1xuICB2YXIgcHJlZml4ZXMgPSBfcmVmLnByZWZpeGVzLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29waWVkUHJlZml4ZXMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHByZWZpeGVzKTtcbiAgfSwgW3ByZWZpeGVzXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQcm92aWRlciwge1xuICAgIHZhbHVlOiBjb3BpZWRQcmVmaXhlc1xuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VCb290c3RyYXBQcmVmaXgocHJlZml4LCBkZWZhdWx0UHJlZml4KSB7XG4gIHZhciBwcmVmaXhlcyA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgcmV0dXJuIHByZWZpeCB8fCBwcmVmaXhlc1tkZWZhdWx0UHJlZml4XSB8fCBkZWZhdWx0UHJlZml4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ29tcG9uZW50LCBvcHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIG9wdHMgPSB7XG4gICAgcHJlZml4OiBvcHRzXG4gIH07XG4gIHZhciBpc0NsYXNzeSA9IENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50OyAvLyBJZiBpdCdzIGEgZnVuY3Rpb25hbCBjb21wb25lbnQgbWFrZSBzdXJlIHdlIGRvbid0IGJyZWFrIGl0IHdpdGggYSByZWZcblxuICB2YXIgX29wdHMgPSBvcHRzLFxuICAgICAgcHJlZml4ID0gX29wdHMucHJlZml4LFxuICAgICAgX29wdHMkZm9yd2FyZFJlZkFzID0gX29wdHMuZm9yd2FyZFJlZkFzLFxuICAgICAgZm9yd2FyZFJlZkFzID0gX29wdHMkZm9yd2FyZFJlZkFzID09PSB2b2lkIDAgPyBpc0NsYXNzeSA/ICdyZWYnIDogJ2lubmVyUmVmJyA6IF9vcHRzJGZvcndhcmRSZWZBcztcbiAgdmFyIFdyYXBwZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIHJlZikge1xuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBfcmVmMik7XG5cbiAgICBwcm9wc1tmb3J3YXJkUmVmQXNdID0gcmVmO1xuICAgIHZhciBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChwcm9wcy5ic1ByZWZpeCwgcHJlZml4KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGJzUHJlZml4OiBic1ByZWZpeFxuICAgIH0pKTtcbiAgfSk7XG4gIFdyYXBwZWQuZGlzcGxheU5hbWUgPSBcIkJvb3RzdHJhcChcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG4gIHJldHVybiBXcmFwcGVkO1xufVxuXG5leHBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQsIENvbnN1bWVyIGFzIFRoZW1lQ29uc3VtZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBmbHVpZDogZmFsc2Vcbn07XG52YXIgQ29udGFpbmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgZmx1aWQgPSBfcmVmLmZsdWlkLFxuICAgICAgX3JlZiRhcyA9IF9yZWYuYXMsXG4gICAgICBDb21wb25lbnQgPSBfcmVmJGFzID09PSB2b2lkIDAgPyAnZGl2JyA6IF9yZWYkYXMsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJmbHVpZFwiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnY29udGFpbmVyJyk7XG4gIHZhciBzdWZmaXggPSB0eXBlb2YgZmx1aWQgPT09ICdzdHJpbmcnID8gXCItXCIgKyBmbHVpZCA6ICctZmx1aWQnO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBmbHVpZCA/IFwiXCIgKyBwcmVmaXggKyBzdWZmaXggOiBwcmVmaXgpXG4gIH0pKTtcbn0pO1xuQ29udGFpbmVyLmRpc3BsYXlOYW1lID0gJ0NvbnRhaW5lcic7XG5Db250YWluZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgZmVlZGJhY2sgaXMgZm9yIHZhbGlkIG9yIGludmFsaWQgZmllbGRzXG4gICAqXG4gICAqIEB0eXBlIHsoJ3ZhbGlkJ3wnaW52YWxpZCcpfVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogRGlzcGxheSBmZWVkYmFjayBhcyBhIHRvb2x0aXAuICovXG4gIHRvb2x0aXA6IFByb3BUeXBlcy5ib29sLFxuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG59O1xudmFyIEZlZWRiYWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoIC8vIE5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IFwiYXNcIiBkdXJpbmcgcHJvcCBkZXN0cnVjdHVyaW5nIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBzdHlsZWQtY29tcG9uZW50cyBnaXRodWIuY29tL3JlYWN0LWJvb3RzdHJhcC9yZWFjdC1ib290c3RyYXAvaXNzdWVzLzM1OTVcbmZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBfcmVmJHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICB0eXBlID0gX3JlZiR0eXBlID09PSB2b2lkIDAgPyAndmFsaWQnIDogX3JlZiR0eXBlLFxuICAgICAgX3JlZiR0b29sdGlwID0gX3JlZi50b29sdGlwLFxuICAgICAgdG9vbHRpcCA9IF9yZWYkdG9vbHRpcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHRvb2x0aXAsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwidHlwZVwiLCBcInRvb2x0aXBcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHR5cGUgKyBcIi1cIiArICh0b29sdGlwID8gJ3Rvb2x0aXAnIDogJ2ZlZWRiYWNrJykpXG4gIH0pKTtcbn0pO1xuRmVlZGJhY2suZGlzcGxheU5hbWUgPSAnRmVlZGJhY2snO1xuRmVlZGJhY2sucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgRmVlZGJhY2s7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsgLy8gVE9ET1xuXG52YXIgRm9ybUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGNvbnRyb2xJZDogdW5kZWZpbmVkXG59KTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBGb3JtQ2hlY2tJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGlkID0gX3JlZi5pZCxcbiAgICAgIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGJzQ3VzdG9tUHJlZml4ID0gX3JlZi5ic0N1c3RvbVByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgX3JlZiR0eXBlID0gX3JlZi50eXBlLFxuICAgICAgdHlwZSA9IF9yZWYkdHlwZSA9PT0gdm9pZCAwID8gJ2NoZWNrYm94JyA6IF9yZWYkdHlwZSxcbiAgICAgIF9yZWYkaXNWYWxpZCA9IF9yZWYuaXNWYWxpZCxcbiAgICAgIGlzVmFsaWQgPSBfcmVmJGlzVmFsaWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpc1ZhbGlkLFxuICAgICAgX3JlZiRpc0ludmFsaWQgPSBfcmVmLmlzSW52YWxpZCxcbiAgICAgIGlzSW52YWxpZCA9IF9yZWYkaXNJbnZhbGlkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNJbnZhbGlkLFxuICAgICAgaXNTdGF0aWMgPSBfcmVmLmlzU3RhdGljLFxuICAgICAgX3JlZiRhcyA9IF9yZWYuYXMsXG4gICAgICBDb21wb25lbnQgPSBfcmVmJGFzID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3JlZiRhcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaWRcIiwgXCJic1ByZWZpeFwiLCBcImJzQ3VzdG9tUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwidHlwZVwiLCBcImlzVmFsaWRcIiwgXCJpc0ludmFsaWRcIiwgXCJpc1N0YXRpY1wiLCBcImFzXCJdKTtcblxuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KSxcbiAgICAgIGNvbnRyb2xJZCA9IF91c2VDb250ZXh0LmNvbnRyb2xJZCxcbiAgICAgIGN1c3RvbSA9IF91c2VDb250ZXh0LmN1c3RvbTtcblxuICB2YXIgX3JlZjIgPSBjdXN0b20gPyBbYnNDdXN0b21QcmVmaXgsICdjdXN0b20tY29udHJvbC1pbnB1dCddIDogW2JzUHJlZml4LCAnZm9ybS1jaGVjay1pbnB1dCddLFxuICAgICAgcHJlZml4ID0gX3JlZjJbMF0sXG4gICAgICBkZWZhdWx0UHJlZml4ID0gX3JlZjJbMV07XG5cbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgocHJlZml4LCBkZWZhdWx0UHJlZml4KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZSxcbiAgICBpZDogaWQgfHwgY29udHJvbElkLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBpc1ZhbGlkICYmICdpcy12YWxpZCcsIGlzSW52YWxpZCAmJiAnaXMtaW52YWxpZCcsIGlzU3RhdGljICYmICdwb3NpdGlvbi1zdGF0aWMnKVxuICB9KSk7XG59KTtcbkZvcm1DaGVja0lucHV0LmRpc3BsYXlOYW1lID0gJ0Zvcm1DaGVja0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZvcm1DaGVja0lucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBGb3JtQ2hlY2tMYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGJzQ3VzdG9tUHJlZml4ID0gX3JlZi5ic0N1c3RvbVByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaHRtbEZvciA9IF9yZWYuaHRtbEZvcixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJic0N1c3RvbVByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImh0bWxGb3JcIl0pO1xuXG4gIHZhciBfdXNlQ29udGV4dCA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpLFxuICAgICAgY29udHJvbElkID0gX3VzZUNvbnRleHQuY29udHJvbElkLFxuICAgICAgY3VzdG9tID0gX3VzZUNvbnRleHQuY3VzdG9tO1xuXG4gIHZhciBfcmVmMiA9IGN1c3RvbSA/IFtic0N1c3RvbVByZWZpeCwgJ2N1c3RvbS1jb250cm9sLWxhYmVsJ10gOiBbYnNQcmVmaXgsICdmb3JtLWNoZWNrLWxhYmVsJ10sXG4gICAgICBwcmVmaXggPSBfcmVmMlswXSxcbiAgICAgIGRlZmF1bHRQcmVmaXggPSBfcmVmMlsxXTtcblxuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChwcmVmaXgsIGRlZmF1bHRQcmVmaXgpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBodG1sRm9yOiBodG1sRm9yIHx8IGNvbnRyb2xJZCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgfSkpO1xufSk7XG5Gb3JtQ2hlY2tMYWJlbC5kaXNwbGF5TmFtZSA9ICdGb3JtQ2hlY2tMYWJlbCc7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ2hlY2tMYWJlbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgYWxsIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2FsbCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGZWVkYmFjayBmcm9tICcuL0ZlZWRiYWNrJztcbmltcG9ydCBGb3JtQ2hlY2tJbnB1dCBmcm9tICcuL0Zvcm1DaGVja0lucHV0JztcbmltcG9ydCBGb3JtQ2hlY2tMYWJlbCBmcm9tICcuL0Zvcm1DaGVja0xhYmVsJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgRm9ybUNoZWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgYnNDdXN0b21QcmVmaXggPSBfcmVmLmJzQ3VzdG9tUHJlZml4LFxuICAgICAgX3JlZiRpbmxpbmUgPSBfcmVmLmlubGluZSxcbiAgICAgIGlubGluZSA9IF9yZWYkaW5saW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaW5saW5lLFxuICAgICAgX3JlZiRkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlZCxcbiAgICAgIF9yZWYkaXNWYWxpZCA9IF9yZWYuaXNWYWxpZCxcbiAgICAgIGlzVmFsaWQgPSBfcmVmJGlzVmFsaWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpc1ZhbGlkLFxuICAgICAgX3JlZiRpc0ludmFsaWQgPSBfcmVmLmlzSW52YWxpZCxcbiAgICAgIGlzSW52YWxpZCA9IF9yZWYkaXNJbnZhbGlkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNJbnZhbGlkLFxuICAgICAgX3JlZiRmZWVkYmFja1Rvb2x0aXAgPSBfcmVmLmZlZWRiYWNrVG9vbHRpcCxcbiAgICAgIGZlZWRiYWNrVG9vbHRpcCA9IF9yZWYkZmVlZGJhY2tUb29sdGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZmVlZGJhY2tUb29sdGlwLFxuICAgICAgZmVlZGJhY2sgPSBfcmVmLmZlZWRiYWNrLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBfcmVmJHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIHRpdGxlID0gX3JlZiR0aXRsZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHRpdGxlLFxuICAgICAgX3JlZiR0eXBlID0gX3JlZi50eXBlLFxuICAgICAgdHlwZSA9IF9yZWYkdHlwZSA9PT0gdm9pZCAwID8gJ2NoZWNrYm94JyA6IF9yZWYkdHlwZSxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHByb3BDdXN0b20gPSBfcmVmLmN1c3RvbSxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgYXMgPSBfcmVmJGFzID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3JlZiRhcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaWRcIiwgXCJic1ByZWZpeFwiLCBcImJzQ3VzdG9tUHJlZml4XCIsIFwiaW5saW5lXCIsIFwiZGlzYWJsZWRcIiwgXCJpc1ZhbGlkXCIsIFwiaXNJbnZhbGlkXCIsIFwiZmVlZGJhY2tUb29sdGlwXCIsIFwiZmVlZGJhY2tcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwidHlwZVwiLCBcImxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjdXN0b21cIiwgXCJhc1wiXSk7XG5cbiAgdmFyIGN1c3RvbSA9IHR5cGUgPT09ICdzd2l0Y2gnID8gdHJ1ZSA6IHByb3BDdXN0b207XG5cbiAgdmFyIF9yZWYyID0gY3VzdG9tID8gW2JzQ3VzdG9tUHJlZml4LCAnY3VzdG9tLWNvbnRyb2wnXSA6IFtic1ByZWZpeCwgJ2Zvcm0tY2hlY2snXSxcbiAgICAgIHByZWZpeCA9IF9yZWYyWzBdLFxuICAgICAgZGVmYXVsdFByZWZpeCA9IF9yZWYyWzFdO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KHByZWZpeCwgZGVmYXVsdFByZWZpeCk7XG5cbiAgdmFyIF91c2VDb250ZXh0ID0gdXNlQ29udGV4dChGb3JtQ29udGV4dCksXG4gICAgICBjb250cm9sSWQgPSBfdXNlQ29udGV4dC5jb250cm9sSWQ7XG5cbiAgdmFyIGlubmVyRm9ybUNvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbElkOiBpZCB8fCBjb250cm9sSWQsXG4gICAgICBjdXN0b206IGN1c3RvbVxuICAgIH07XG4gIH0sIFtjb250cm9sSWQsIGN1c3RvbSwgaWRdKTtcbiAgdmFyIGhhc0xhYmVsID0gY3VzdG9tIHx8IGxhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09IGZhbHNlICYmICFjaGlsZHJlbjtcbiAgdmFyIGlucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNoZWNrSW5wdXQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHR5cGU6IHR5cGUgPT09ICdzd2l0Y2gnID8gJ2NoZWNrYm94JyA6IHR5cGUsXG4gICAgcmVmOiByZWYsXG4gICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICBpc0ludmFsaWQ6IGlzSW52YWxpZCxcbiAgICBpc1N0YXRpYzogIWhhc0xhYmVsLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBhczogYXNcbiAgfSkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogaW5uZXJGb3JtQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBjdXN0b20gJiYgXCJjdXN0b20tXCIgKyB0eXBlLCBpbmxpbmUgJiYgYnNQcmVmaXggKyBcIi1pbmxpbmVcIilcbiAgfSwgY2hpbGRyZW4gfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGlucHV0LCBoYXNMYWJlbCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ2hlY2tMYWJlbCwge1xuICAgIHRpdGxlOiB0aXRsZVxuICB9LCBsYWJlbCksIChpc1ZhbGlkIHx8IGlzSW52YWxpZCkgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmVlZGJhY2ssIHtcbiAgICB0eXBlOiBpc1ZhbGlkID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJyxcbiAgICB0b29sdGlwOiBmZWVkYmFja1Rvb2x0aXBcbiAgfSwgZmVlZGJhY2spKSkpO1xufSk7XG5Gb3JtQ2hlY2suZGlzcGxheU5hbWUgPSAnRm9ybUNoZWNrJztcbkZvcm1DaGVjay5JbnB1dCA9IEZvcm1DaGVja0lucHV0O1xuRm9ybUNoZWNrLkxhYmVsID0gRm9ybUNoZWNrTGFiZWw7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ2hlY2s7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIEZvcm1GaWxlSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBpZCA9IF9yZWYuaWQsXG4gICAgICBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBic0N1c3RvbVByZWZpeCA9IF9yZWYuYnNDdXN0b21QcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGlzVmFsaWQgPSBfcmVmLmlzVmFsaWQsXG4gICAgICBpc0ludmFsaWQgPSBfcmVmLmlzSW52YWxpZCxcbiAgICAgIGxhbmcgPSBfcmVmLmxhbmcsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcmVmJGFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpZFwiLCBcImJzUHJlZml4XCIsIFwiYnNDdXN0b21QcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJpc1ZhbGlkXCIsIFwiaXNJbnZhbGlkXCIsIFwibGFuZ1wiLCBcImFzXCJdKTtcblxuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KSxcbiAgICAgIGNvbnRyb2xJZCA9IF91c2VDb250ZXh0LmNvbnRyb2xJZCxcbiAgICAgIGN1c3RvbSA9IF91c2VDb250ZXh0LmN1c3RvbTtcblxuICB2YXIgdHlwZSA9ICdmaWxlJztcblxuICB2YXIgX3JlZjIgPSBjdXN0b20gPyBbYnNDdXN0b21QcmVmaXgsICdjdXN0b20tZmlsZS1pbnB1dCddIDogW2JzUHJlZml4LCAnZm9ybS1jb250cm9sLWZpbGUnXSxcbiAgICAgIHByZWZpeCA9IF9yZWYyWzBdLFxuICAgICAgZGVmYXVsdFByZWZpeCA9IF9yZWYyWzFdO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KHByZWZpeCwgZGVmYXVsdFByZWZpeCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGlkOiBpZCB8fCBjb250cm9sSWQsXG4gICAgdHlwZTogdHlwZSxcbiAgICBsYW5nOiBsYW5nLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBpc1ZhbGlkICYmICdpcy12YWxpZCcsIGlzSW52YWxpZCAmJiAnaXMtaW52YWxpZCcpXG4gIH0pKTtcbn0pO1xuRm9ybUZpbGVJbnB1dC5kaXNwbGF5TmFtZSA9ICdGb3JtRmlsZUlucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZvcm1GaWxlSW5wdXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIEZvcm1GaWxlTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBic0N1c3RvbVByZWZpeCA9IF9yZWYuYnNDdXN0b21QcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGh0bWxGb3IgPSBfcmVmLmh0bWxGb3IsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiYnNDdXN0b21QcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJodG1sRm9yXCJdKTtcblxuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KSxcbiAgICAgIGNvbnRyb2xJZCA9IF91c2VDb250ZXh0LmNvbnRyb2xJZCxcbiAgICAgIGN1c3RvbSA9IF91c2VDb250ZXh0LmN1c3RvbTtcblxuICB2YXIgX3JlZjIgPSBjdXN0b20gPyBbYnNDdXN0b21QcmVmaXgsICdjdXN0b20tZmlsZS1sYWJlbCddIDogW2JzUHJlZml4LCAnZm9ybS1maWxlLWxhYmVsJ10sXG4gICAgICBwcmVmaXggPSBfcmVmMlswXSxcbiAgICAgIGRlZmF1bHRQcmVmaXggPSBfcmVmMlsxXTtcblxuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChwcmVmaXgsIGRlZmF1bHRQcmVmaXgpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBodG1sRm9yOiBodG1sRm9yIHx8IGNvbnRyb2xJZCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCksXG4gICAgXCJkYXRhLWJyb3dzZVwiOiBwcm9wc1snZGF0YS1icm93c2UnXVxuICB9KSk7XG59KTtcbkZvcm1GaWxlTGFiZWwuZGlzcGxheU5hbWUgPSAnRm9ybUZpbGVMYWJlbCc7XG5leHBvcnQgZGVmYXVsdCBGb3JtRmlsZUxhYmVsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGFsbCBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwnO1xuaW1wb3J0IEZlZWRiYWNrIGZyb20gJy4vRmVlZGJhY2snO1xuaW1wb3J0IEZvcm1GaWxlSW5wdXQgZnJvbSAnLi9Gb3JtRmlsZUlucHV0JztcbmltcG9ydCBGb3JtRmlsZUxhYmVsIGZyb20gJy4vRm9ybUZpbGVMYWJlbCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIEZvcm1GaWxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgYnNDdXN0b21QcmVmaXggPSBfcmVmLmJzQ3VzdG9tUHJlZml4LFxuICAgICAgX3JlZiRkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlZCxcbiAgICAgIF9yZWYkaXNWYWxpZCA9IF9yZWYuaXNWYWxpZCxcbiAgICAgIGlzVmFsaWQgPSBfcmVmJGlzVmFsaWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpc1ZhbGlkLFxuICAgICAgX3JlZiRpc0ludmFsaWQgPSBfcmVmLmlzSW52YWxpZCxcbiAgICAgIGlzSW52YWxpZCA9IF9yZWYkaXNJbnZhbGlkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNJbnZhbGlkLFxuICAgICAgX3JlZiRmZWVkYmFja1Rvb2x0aXAgPSBfcmVmLmZlZWRiYWNrVG9vbHRpcCxcbiAgICAgIGZlZWRiYWNrVG9vbHRpcCA9IF9yZWYkZmVlZGJhY2tUb29sdGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZmVlZGJhY2tUb29sdGlwLFxuICAgICAgZmVlZGJhY2sgPSBfcmVmLmZlZWRiYWNrLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBjdXN0b20gPSBfcmVmLmN1c3RvbSxcbiAgICAgIGxhbmcgPSBfcmVmLmxhbmcsXG4gICAgICBkYXRhQnJvd3NlID0gX3JlZlsnZGF0YS1icm93c2UnXSxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgX3JlZiRpbnB1dEFzID0gX3JlZi5pbnB1dEFzLFxuICAgICAgaW5wdXRBcyA9IF9yZWYkaW5wdXRBcyA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9yZWYkaW5wdXRBcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaWRcIiwgXCJic1ByZWZpeFwiLCBcImJzQ3VzdG9tUHJlZml4XCIsIFwiZGlzYWJsZWRcIiwgXCJpc1ZhbGlkXCIsIFwiaXNJbnZhbGlkXCIsIFwiZmVlZGJhY2tUb29sdGlwXCIsIFwiZmVlZGJhY2tcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjdXN0b21cIiwgXCJsYW5nXCIsIFwiZGF0YS1icm93c2VcIiwgXCJhc1wiLCBcImlucHV0QXNcIl0pO1xuXG4gIHZhciBfcmVmMiA9IGN1c3RvbSA/IFtic0N1c3RvbVByZWZpeCwgJ2N1c3RvbSddIDogW2JzUHJlZml4LCAnZm9ybS1maWxlJ10sXG4gICAgICBwcmVmaXggPSBfcmVmMlswXSxcbiAgICAgIGRlZmF1bHRQcmVmaXggPSBfcmVmMlsxXTtcblxuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChwcmVmaXgsIGRlZmF1bHRQcmVmaXgpO1xuICB2YXIgdHlwZSA9ICdmaWxlJztcblxuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KSxcbiAgICAgIGNvbnRyb2xJZCA9IF91c2VDb250ZXh0LmNvbnRyb2xJZDtcblxuICB2YXIgaW5uZXJGb3JtQ29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250cm9sSWQ6IGlkIHx8IGNvbnRyb2xJZCxcbiAgICAgIGN1c3RvbTogY3VzdG9tXG4gICAgfTtcbiAgfSwgW2NvbnRyb2xJZCwgY3VzdG9tLCBpZF0pO1xuICB2YXIgaGFzTGFiZWwgPSBsYWJlbCAhPSBudWxsICYmIGxhYmVsICE9PSBmYWxzZSAmJiAhY2hpbGRyZW47XG4gIHZhciBpbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1GaWxlSW5wdXQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGlzVmFsaWQ6IGlzVmFsaWQsXG4gICAgaXNJbnZhbGlkOiBpc0ludmFsaWQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGFzOiBpbnB1dEFzLFxuICAgIGxhbmc6IGxhbmdcbiAgfSkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogaW5uZXJGb3JtQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGN1c3RvbSAmJiBcImN1c3RvbS1cIiArIHR5cGUpXG4gIH0sIGNoaWxkcmVuIHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjdXN0b20gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgaW5wdXQsIGhhc0xhYmVsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1GaWxlTGFiZWwsIHtcbiAgICBcImRhdGEtYnJvd3NlXCI6IGRhdGFCcm93c2VcbiAgfSwgbGFiZWwpKSA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBoYXNMYWJlbCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtRmlsZUxhYmVsLCBudWxsLCBsYWJlbCksIGlucHV0KSwgKGlzVmFsaWQgfHwgaXNJbnZhbGlkKSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGZWVkYmFjaywge1xuICAgIHR5cGU6IGlzVmFsaWQgPyAndmFsaWQnIDogJ2ludmFsaWQnLFxuICAgIHRvb2x0aXA6IGZlZWRiYWNrVG9vbHRpcFxuICB9LCBmZWVkYmFjaykpKSk7XG59KTtcbkZvcm1GaWxlLmRpc3BsYXlOYW1lID0gJ0Zvcm1GaWxlJztcbkZvcm1GaWxlLklucHV0ID0gRm9ybUZpbGVJbnB1dDtcbkZvcm1GaWxlLkxhYmVsID0gRm9ybUZpbGVMYWJlbDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1GaWxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBhbGwgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvYWxsJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgRmVlZGJhY2sgZnJvbSAnLi9GZWVkYmFjayc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIEZvcm1Db250cm9sID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgYnNDdXN0b21QcmVmaXggPSBfcmVmLmJzQ3VzdG9tUHJlZml4LFxuICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBodG1sU2l6ZSA9IF9yZWYuaHRtbFNpemUsXG4gICAgICBpZCA9IF9yZWYuaWQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIF9yZWYkaXNWYWxpZCA9IF9yZWYuaXNWYWxpZCxcbiAgICAgIGlzVmFsaWQgPSBfcmVmJGlzVmFsaWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpc1ZhbGlkLFxuICAgICAgX3JlZiRpc0ludmFsaWQgPSBfcmVmLmlzSW52YWxpZCxcbiAgICAgIGlzSW52YWxpZCA9IF9yZWYkaXNJbnZhbGlkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNJbnZhbGlkLFxuICAgICAgcGxhaW50ZXh0ID0gX3JlZi5wbGFpbnRleHQsXG4gICAgICByZWFkT25seSA9IF9yZWYucmVhZE9ubHksXG4gICAgICBjdXN0b20gPSBfcmVmLmN1c3RvbSxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9yZWYkYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiYnNDdXN0b21QcmVmaXhcIiwgXCJ0eXBlXCIsIFwic2l6ZVwiLCBcImh0bWxTaXplXCIsIFwiaWRcIiwgXCJjbGFzc05hbWVcIiwgXCJpc1ZhbGlkXCIsIFwiaXNJbnZhbGlkXCIsIFwicGxhaW50ZXh0XCIsIFwicmVhZE9ubHlcIiwgXCJjdXN0b21cIiwgXCJhc1wiXSk7XG5cbiAgdmFyIF91c2VDb250ZXh0ID0gdXNlQ29udGV4dChGb3JtQ29udGV4dCksXG4gICAgICBjb250cm9sSWQgPSBfdXNlQ29udGV4dC5jb250cm9sSWQ7XG5cbiAgdmFyIF9yZWYyID0gY3VzdG9tID8gW2JzQ3VzdG9tUHJlZml4LCAnY3VzdG9tJ10gOiBbYnNQcmVmaXgsICdmb3JtLWNvbnRyb2wnXSxcbiAgICAgIHByZWZpeCA9IF9yZWYyWzBdLFxuICAgICAgZGVmYXVsdFByZWZpeCA9IF9yZWYyWzFdO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KHByZWZpeCwgZGVmYXVsdFByZWZpeCk7XG4gIHZhciBjbGFzc2VzO1xuXG4gIGlmIChwbGFpbnRleHQpIHtcbiAgICB2YXIgX2NsYXNzZXM7XG5cbiAgICBjbGFzc2VzID0gKF9jbGFzc2VzID0ge30sIF9jbGFzc2VzW2JzUHJlZml4ICsgXCItcGxhaW50ZXh0XCJdID0gdHJ1ZSwgX2NsYXNzZXMpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmaWxlJykge1xuICAgIHZhciBfY2xhc3NlczI7XG5cbiAgICBjbGFzc2VzID0gKF9jbGFzc2VzMiA9IHt9LCBfY2xhc3NlczJbYnNQcmVmaXggKyBcIi1maWxlXCJdID0gdHJ1ZSwgX2NsYXNzZXMyKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAncmFuZ2UnKSB7XG4gICAgdmFyIF9jbGFzc2VzMztcblxuICAgIGNsYXNzZXMgPSAoX2NsYXNzZXMzID0ge30sIF9jbGFzc2VzM1tic1ByZWZpeCArIFwiLXJhbmdlXCJdID0gdHJ1ZSwgX2NsYXNzZXMzKTtcbiAgfSBlbHNlIGlmIChDb21wb25lbnQgPT09ICdzZWxlY3QnICYmIGN1c3RvbSkge1xuICAgIHZhciBfY2xhc3NlczQ7XG5cbiAgICBjbGFzc2VzID0gKF9jbGFzc2VzNCA9IHt9LCBfY2xhc3NlczRbYnNQcmVmaXggKyBcIi1zZWxlY3RcIl0gPSB0cnVlLCBfY2xhc3NlczRbYnNQcmVmaXggKyBcIi1zZWxlY3QtXCIgKyBzaXplXSA9IHNpemUsIF9jbGFzc2VzNCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9jbGFzc2VzNTtcblxuICAgIGNsYXNzZXMgPSAoX2NsYXNzZXM1ID0ge30sIF9jbGFzc2VzNVtic1ByZWZpeF0gPSB0cnVlLCBfY2xhc3NlczVbYnNQcmVmaXggKyBcIi1cIiArIHNpemVdID0gc2l6ZSwgX2NsYXNzZXM1KTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY29udHJvbElkID09IG51bGwgfHwgIWlkLCAnYGNvbnRyb2xJZGAgaXMgaWdub3JlZCBvbiBgPEZvcm1Db250cm9sPmAgd2hlbiBgaWRgIGlzIHNwZWNpZmllZC4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBzaXplOiBodG1sU2l6ZSxcbiAgICByZWY6IHJlZixcbiAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgaWQ6IGlkIHx8IGNvbnRyb2xJZCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzLCBpc1ZhbGlkICYmIFwiaXMtdmFsaWRcIiwgaXNJbnZhbGlkICYmIFwiaXMtaW52YWxpZFwiKVxuICB9KSk7XG59KTtcbkZvcm1Db250cm9sLmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sJztcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5hc3NpZ24oRm9ybUNvbnRyb2wsIHtcbiAgRmVlZGJhY2s6IEZlZWRiYWNrXG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgRm9ybUdyb3VwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBjb250cm9sSWQgPSBfcmVmLmNvbnRyb2xJZCxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcmVmJGFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiY29udHJvbElkXCIsIFwiYXNcIl0pO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnZm9ybS1ncm91cCcpO1xuICB2YXIgY29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250cm9sSWQ6IGNvbnRyb2xJZFxuICAgIH07XG4gIH0sIFtjb250cm9sSWRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgfSksIGNoaWxkcmVuKSk7XG59KTtcbkZvcm1Hcm91cC5kaXNwbGF5TmFtZSA9ICdGb3JtR3JvdXAnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUdyb3VwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIERFVklDRV9TSVpFUyA9IFsneGwnLCAnbGcnLCAnbWQnLCAnc20nLCAneHMnXTtcbnZhciBDb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZiggLy8gTmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgXCJhc1wiIGR1cmluZyBwcm9wIGRlc3RydWN0dXJpbmcgdG8gYmUgY29tcGF0aWJsZSB3aXRoIHN0eWxlZC1jb21wb25lbnRzIGdpdGh1Yi5jb20vcmVhY3QtYm9vdHN0cmFwL3JlYWN0LWJvb3RzdHJhcC9pc3N1ZXMvMzU5NVxuZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiRhcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJhc1wiXSk7XG5cbiAgdmFyIHByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2NvbCcpO1xuICB2YXIgc3BhbnMgPSBbXTtcbiAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgREVWSUNFX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKGJya1BvaW50KSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW2Jya1BvaW50XTtcbiAgICBkZWxldGUgcHJvcHNbYnJrUG9pbnRdO1xuICAgIHZhciBzcGFuO1xuICAgIHZhciBvZmZzZXQ7XG4gICAgdmFyIG9yZGVyO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnICYmIHByb3BWYWx1ZSAhPSBudWxsKSB7XG4gICAgICB2YXIgX3Byb3BWYWx1ZSRzcGFuID0gcHJvcFZhbHVlLnNwYW47XG4gICAgICBzcGFuID0gX3Byb3BWYWx1ZSRzcGFuID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BWYWx1ZSRzcGFuO1xuICAgICAgb2Zmc2V0ID0gcHJvcFZhbHVlLm9mZnNldDtcbiAgICAgIG9yZGVyID0gcHJvcFZhbHVlLm9yZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzcGFuID0gcHJvcFZhbHVlO1xuICAgIH1cblxuICAgIHZhciBpbmZpeCA9IGJya1BvaW50ICE9PSAneHMnID8gXCItXCIgKyBicmtQb2ludCA6ICcnO1xuICAgIGlmIChzcGFuKSBzcGFucy5wdXNoKHNwYW4gPT09IHRydWUgPyBcIlwiICsgcHJlZml4ICsgaW5maXggOiBcIlwiICsgcHJlZml4ICsgaW5maXggKyBcIi1cIiArIHNwYW4pO1xuICAgIGlmIChvcmRlciAhPSBudWxsKSBjbGFzc2VzLnB1c2goXCJvcmRlclwiICsgaW5maXggKyBcIi1cIiArIG9yZGVyKTtcbiAgICBpZiAob2Zmc2V0ICE9IG51bGwpIGNsYXNzZXMucHVzaChcIm9mZnNldFwiICsgaW5maXggKyBcIi1cIiArIG9mZnNldCk7XG4gIH0pO1xuXG4gIGlmICghc3BhbnMubGVuZ3RoKSB7XG4gICAgc3BhbnMucHVzaChwcmVmaXgpOyAvLyBwbGFpbiAnY29sJ1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmFwcGx5KHZvaWQgMCwgW2NsYXNzTmFtZV0uY29uY2F0KHNwYW5zLCBjbGFzc2VzKSlcbiAgfSkpO1xufSk7XG5Db2wuZGlzcGxheU5hbWUgPSAnQ29sJztcbmV4cG9ydCBkZWZhdWx0IENvbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IENvbCBmcm9tICcuL0NvbCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29sdW1uOiBmYWxzZSxcbiAgc3JPbmx5OiBmYWxzZVxufTtcbnZhciBGb3JtTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdsYWJlbCcgOiBfcmVmJGFzLFxuICAgICAgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY29sdW1uID0gX3JlZi5jb2x1bW4sXG4gICAgICBzck9ubHkgPSBfcmVmLnNyT25seSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaHRtbEZvciA9IF9yZWYuaHRtbEZvcixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNvbHVtblwiLCBcInNyT25seVwiLCBcImNsYXNzTmFtZVwiLCBcImh0bWxGb3JcIl0pO1xuXG4gIHZhciBfdXNlQ29udGV4dCA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpLFxuICAgICAgY29udHJvbElkID0gX3VzZUNvbnRleHQuY29udHJvbElkO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnZm9ybS1sYWJlbCcpO1xuICB2YXIgY29sdW1uQ2xhc3MgPSAnY29sLWZvcm0tbGFiZWwnO1xuICBpZiAodHlwZW9mIGNvbHVtbiA9PT0gJ3N0cmluZycpIGNvbHVtbkNsYXNzID0gY29sdW1uQ2xhc3MgKyBcIiBcIiArIGNvbHVtbkNsYXNzICsgXCItXCIgKyBjb2x1bW47XG4gIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBzck9ubHkgJiYgJ3NyLW9ubHknLCBjb2x1bW4gJiYgY29sdW1uQ2xhc3MpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbnRyb2xJZCA9PSBudWxsIHx8ICFodG1sRm9yLCAnYGNvbnRyb2xJZGAgaXMgaWdub3JlZCBvbiBgPEZvcm1MYWJlbD5gIHdoZW4gYGh0bWxGb3JgIGlzIHNwZWNpZmllZC4nKSA6IHZvaWQgMDtcbiAgaHRtbEZvciA9IGh0bWxGb3IgfHwgY29udHJvbElkO1xuICBpZiAoY29sdW1uKSByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29sLCBfZXh0ZW5kcyh7XG4gICAgYXM6IFwibGFiZWxcIixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgaHRtbEZvcjogaHRtbEZvclxuICB9LCBwcm9wcykpO1xuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbGFiZWwtaGFzLWZvciwganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3JcbiAgICB9LCBwcm9wcykpXG4gICk7XG59KTtcbkZvcm1MYWJlbC5kaXNwbGF5TmFtZSA9ICdGb3JtTGFiZWwnO1xuRm9ybUxhYmVsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IEZvcm1MYWJlbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBGb3JtVGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG5mdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ3NtYWxsJyA6IF9yZWYkYXMsXG4gICAgICBtdXRlZCA9IF9yZWYubXV0ZWQsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIiwgXCJtdXRlZFwiXSk7XG5cbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdmb3JtLXRleHQnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIG11dGVkICYmICd0ZXh0LW11dGVkJylcbiAgfSkpO1xufSk7XG5Gb3JtVGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtVGV4dCc7XG5leHBvcnQgZGVmYXVsdCBGb3JtVGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNoZWNrIGZyb20gJy4vRm9ybUNoZWNrJztcbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNoZWNrLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiBcInN3aXRjaFwiXG4gIH0pKTtcbn0pO1xuU3dpdGNoLmRpc3BsYXlOYW1lID0gJ1N3aXRjaCc7XG5Td2l0Y2guSW5wdXQgPSBGb3JtQ2hlY2suSW5wdXQ7XG5Td2l0Y2guTGFiZWwgPSBGb3JtQ2hlY2suTGFiZWw7XG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwidmFyIHJIeXBoZW4gPSAvLSguKS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShySHlwaGVuLCBmdW5jdGlvbiAoXywgY2hyKSB7XG4gICAgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgY2FtZWxpemUgZnJvbSAnZG9tLWhlbHBlcnMvY2FtZWxpemUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBwYXNjYWxDYXNlID0gZnVuY3Rpb24gcGFzY2FsQ2FzZShzdHIpIHtcbiAgcmV0dXJuIHN0clswXS50b1VwcGVyQ2FzZSgpICsgY2FtZWxpemUoc3RyKS5zbGljZSgxKTtcbn07XG5cbi8vIFRPRE86IGVtc3RyaWN0ZW4gJiBmaXggdGhlIHR5cGluZyBoZXJlISBgY3JlYXRlV2l0aEJzUHJlZml4PFRFbGVtZW50VHlwZT4uLi5gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVXaXRoQnNQcmVmaXgocHJlZml4LCBfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICBkaXNwbGF5TmFtZSA9IF9yZWYkZGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IHBhc2NhbENhc2UocHJlZml4KSA6IF9yZWYkZGlzcGxheU5hbWUsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLkNvbXBvbmVudCxcbiAgICAgIGRlZmF1bHRQcm9wcyA9IF9yZWYuZGVmYXVsdFByb3BzO1xuXG4gIHZhciBCc0NvbXBvbmVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgcmVmKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IF9yZWYyLmNsYXNzTmFtZSxcbiAgICAgICAgYnNQcmVmaXggPSBfcmVmMi5ic1ByZWZpeCxcbiAgICAgICAgX3JlZjIkYXMgPSBfcmVmMi5hcyxcbiAgICAgICAgVGFnID0gX3JlZjIkYXMgPT09IHZvaWQgMCA/IENvbXBvbmVudCB8fCAnZGl2JyA6IF9yZWYyJGFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcImFzXCJdKTtcblxuICAgIHZhciByZXNvbHZlZFByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgcHJlZml4KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHJlc29sdmVkUHJlZml4KVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xuICBCc0NvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4gIEJzQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIHJldHVybiBCc0NvbXBvbmVudDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1DaGVjayBmcm9tICcuL0Zvcm1DaGVjayc7XG5pbXBvcnQgRm9ybUZpbGUgZnJvbSAnLi9Gb3JtRmlsZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJy4vRm9ybUdyb3VwJztcbmltcG9ydCBGb3JtTGFiZWwgZnJvbSAnLi9Gb3JtTGFiZWwnO1xuaW1wb3J0IEZvcm1UZXh0IGZyb20gJy4vRm9ybVRleHQnO1xuaW1wb3J0IFN3aXRjaCBmcm9tICcuL1N3aXRjaCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG52YXIgRm9ybVJvdyA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnZm9ybS1yb3cnKTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGlubGluZTogZmFsc2Vcbn07XG52YXIgRm9ybUltcGwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBpbmxpbmUgPSBfcmVmLmlubGluZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgdmFsaWRhdGVkID0gX3JlZi52YWxpZGF0ZWQsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdmb3JtJyA6IF9yZWYkYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiaW5saW5lXCIsIFwiY2xhc3NOYW1lXCIsIFwidmFsaWRhdGVkXCIsIFwiYXNcIl0pO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnZm9ybScpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB2YWxpZGF0ZWQgJiYgJ3dhcy12YWxpZGF0ZWQnLCBpbmxpbmUgJiYgYnNQcmVmaXggKyBcIi1pbmxpbmVcIilcbiAgfSkpO1xufSk7XG5Gb3JtSW1wbC5kaXNwbGF5TmFtZSA9ICdGb3JtJztcbkZvcm1JbXBsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkZvcm1JbXBsLlJvdyA9IEZvcm1Sb3c7XG5Gb3JtSW1wbC5Hcm91cCA9IEZvcm1Hcm91cDtcbkZvcm1JbXBsLkNvbnRyb2wgPSBGb3JtQ29udHJvbDtcbkZvcm1JbXBsLkNoZWNrID0gRm9ybUNoZWNrO1xuRm9ybUltcGwuRmlsZSA9IEZvcm1GaWxlO1xuRm9ybUltcGwuU3dpdGNoID0gU3dpdGNoO1xuRm9ybUltcGwuTGFiZWwgPSBGb3JtTGFiZWw7XG5Gb3JtSW1wbC5UZXh0ID0gRm9ybVRleHQ7XG5leHBvcnQgZGVmYXVsdCBGb3JtSW1wbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBERVZJQ0VfU0laRVMgPSBbJ3hsJywgJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ107XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBub0d1dHRlcnM6IGZhbHNlXG59O1xudmFyIFJvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgbm9HdXR0ZXJzID0gX3JlZi5ub0d1dHRlcnMsXG4gICAgICBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiRhcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJub0d1dHRlcnNcIiwgXCJhc1wiXSk7XG5cbiAgdmFyIGRlY29yYXRlZEJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAncm93Jyk7XG4gIHZhciBzaXplUHJlZml4ID0gZGVjb3JhdGVkQnNQcmVmaXggKyBcIi1jb2xzXCI7XG4gIHZhciBjbGFzc2VzID0gW107XG4gIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChicmtQb2ludCkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1ticmtQb2ludF07XG4gICAgZGVsZXRlIHByb3BzW2Jya1BvaW50XTtcbiAgICB2YXIgY29scztcblxuICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgY29scyA9IHByb3BWYWx1ZS5jb2xzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xzID0gcHJvcFZhbHVlO1xuICAgIH1cblxuICAgIHZhciBpbmZpeCA9IGJya1BvaW50ICE9PSAneHMnID8gXCItXCIgKyBicmtQb2ludCA6ICcnO1xuICAgIGlmIChjb2xzICE9IG51bGwpIGNsYXNzZXMucHVzaChcIlwiICsgc2l6ZVByZWZpeCArIGluZml4ICsgXCItXCIgKyBjb2xzKTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5hcHBseSh2b2lkIDAsIFtjbGFzc05hbWUsIGRlY29yYXRlZEJzUHJlZml4LCBub0d1dHRlcnMgJiYgJ25vLWd1dHRlcnMnXS5jb25jYXQoY2xhc3NlcykpXG4gIH0pKTtcbn0pO1xuUm93LmRpc3BsYXlOYW1lID0gJ1Jvdyc7XG5Sb3cuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgUm93OyIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYgIT0gbnVsbDtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGYpIHtcbiAgICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKTtcbiAgICB9XG5cbiAgICBpZiAoYWNjID09PSBudWxsKSByZXR1cm4gZjtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpOyAvLyBAdHMtaWdub3JlXG5cbiAgICAgIGYuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBpc1RyaXZpYWxIcmVmKGhyZWYpIHtcbiAgcmV0dXJuICFocmVmIHx8IGhyZWYudHJpbSgpID09PSAnIyc7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgRHJvcGRvd25JdGVtcywgZXRjLlxuICovXG5cblxudmFyIFNhZmVBbmNob3IgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBfcmVmJGFzID0gX3JlZi5hcyxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkYXMgPT09IHZvaWQgMCA/ICdhJyA6IF9yZWYkYXMsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBvbktleURvd24gPSBfcmVmLm9uS2V5RG93bixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXNcIiwgXCJkaXNhYmxlZFwiLCBcIm9uS2V5RG93blwiXSk7XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB2YXIgaHJlZiA9IHByb3BzLmhyZWYsXG4gICAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuXG4gICAgaWYgKGRpc2FibGVkIHx8IGlzVHJpdmlhbEhyZWYoaHJlZikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGhhbmRsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICBwcm9wcy5yb2xlID0gcHJvcHMucm9sZSB8fCAnYnV0dG9uJzsgLy8gd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgYSBocmVmIGF0dHJpYnV0ZSBvbiB0aGUgbm9kZVxuICAgIC8vIG90aGVyd2lzZSwgdGhlIGN1cnNvciBpbmNvcnJlY3RseSBzdHlsZWQgKGV4Y2VwdCB3aXRoIHJvbGU9J2J1dHRvbicpXG5cbiAgICBwcm9wcy5ocmVmID0gcHJvcHMuaHJlZiB8fCAnIyc7XG4gIH1cblxuICBpZiAoZGlzYWJsZWQpIHtcbiAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xuICAgIHByb3BzWydhcmlhLWRpc2FibGVkJ10gPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLCB7XG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgb25LZXlEb3duOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICB9KSk7XG59KTtcblNhZmVBbmNob3IuZGlzcGxheU5hbWUgPSAnU2FmZUFuY2hvcic7XG5leHBvcnQgZGVmYXVsdCBTYWZlQW5jaG9yOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHZhcmlhbnQ6ICdwcmltYXJ5JyxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xudmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIHZhcmlhbnQgPSBfcmVmLnZhcmlhbnQsXG4gICAgICBzaXplID0gX3JlZi5zaXplLFxuICAgICAgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGJsb2NrID0gX3JlZi5ibG9jayxcbiAgICAgIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICBhcyA9IF9yZWYuYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcInNpemVcIiwgXCJhY3RpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJibG9ja1wiLCBcInR5cGVcIiwgXCJhc1wiXSk7XG5cbiAgdmFyIHByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2J0bicpO1xuICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXgsIGFjdGl2ZSAmJiAnYWN0aXZlJywgdmFyaWFudCAmJiBwcmVmaXggKyBcIi1cIiArIHZhcmlhbnQsIGJsb2NrICYmIHByZWZpeCArIFwiLWJsb2NrXCIsIHNpemUgJiYgcHJlZml4ICsgXCItXCIgKyBzaXplKTtcblxuICBpZiAocHJvcHMuaHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGFzOiBhcyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzZXMsIHByb3BzLmRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gICAgfSkpO1xuICB9XG5cbiAgaWYgKHJlZikge1xuICAgIHByb3BzLnJlZiA9IHJlZjtcbiAgfVxuXG4gIGlmICh0eXBlKSB7XG4gICAgcHJvcHMudHlwZSA9IHR5cGU7XG4gIH0gZWxzZSBpZiAoIWFzKSB7XG4gICAgcHJvcHMudHlwZSA9ICdidXR0b24nO1xuICB9XG5cbiAgdmFyIENvbXBvbmVudCA9IGFzIHx8ICdidXR0b24nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5CdXR0b24uZGlzcGxheU5hbWUgPSAnQnV0dG9uJztcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IGxvZ2luVXNlciB9IGZyb20gJy4uLy4uLy4uL2FjdGlvbnMvYXV0aEFjdGlvbnMnO1xuXG5pbXBvcnQgeyBCdXR0b24sIENvbCwgQ29udGFpbmVyLCBGb3JtLCBSb3cgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuXG5pbXBvcnQgJy4vTG9naW4uY3NzJztcblxuXG5cbmNvbnN0IExvZ2luID0gKHsgaGlzdG9yeSwgYXV0aCwgbG9naW5Vc2VyIH0pID0+IHtcbiAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbZXJyb3JzLCBzZXRFcnJvcnNdID0gdXNlU3RhdGUoe30pO1xuXG4gIGNvbnN0IGdvVG9QYWdlID0gKHJvdXRlKSA9PiB7XG4gICAgaGlzdG9yeS5wdXNoKHJvdXRlKTtcbiAgfTtcblxuICBjb25zdCBvblN1Ym1pdCA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgdXNlckRhdGEgPSB7XG4gICAgICBlbWFpbCxcbiAgICAgIHBhc3N3b3JkLFxuICAgIH07XG5cbiAgICBsb2dpblVzZXIodXNlckRhdGEpO1xuICB9O1xuXG4gIGlmIChhdXRoLmlzQXV0aGVudGljYXRlZCkge1xuICAgIGhpc3RvcnkucHVzaCgnLycpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtdC01XCI+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJwcmltYXJ5LWRhcmtcIj5JbmljaW8gZGUgc2VzacOzbjwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxGb3JtIG9uU3VibWl0PXtvblN1Ym1pdH0+XG4gICAgICAgIDxGb3JtLkdyb3VwIGNvbnRyb2xJZD1cImZvcm1CYXNpY0VtYWlsXCI+XG4gICAgICAgICAgPEZvcm0uTGFiZWwgY2xhc3NOYW1lPVwic2Vjb25kYXJ5LWxpZ2h0XCI+XG4gICAgICAgICAgICBDb3JyZW8gZWxlY3Ryw7NuaWNvIC8gVGVsw6lmb25vXG4gICAgICAgICAgICAgICAgICA8L0Zvcm0uTGFiZWw+XG4gICAgICAgICAgPEZvcm0uQ29udHJvbFxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRFbWFpbChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJwcmltYXJ5LWRhcmtcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJjb3JyZW9AbWFpbC5jb20gLyA0NDQxMjM0NTY3ODlcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicHJpbWFyeS1kYXJrXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L0Zvcm0uR3JvdXA+XG5cbiAgICAgICAgPEZvcm0uR3JvdXAgY29udHJvbElkPVwiZm9ybUJhc2ljUGFzc3dvcmRcIj5cbiAgICAgICAgICA8Rm9ybS5MYWJlbCBjbGFzc05hbWU9XCJzZWNvbmRhcnktbGlnaHRcIj5Db250cmFzZcOxYTwvRm9ybS5MYWJlbD5cbiAgICAgICAgICA8Rm9ybS5Db250cm9sXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJwcmltYXJ5LWRhcmtcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJJbnRyb2R1Y2UgdHUgY29udHJhc2XDsWFcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgPFJvdyBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtYXJvdW5kXCI+XG4gICAgICAgICAgPENvbCBsZz17MTJ9IHNtPXsxMn0gY2xhc3NOYW1lPVwianVzdGlmeS1jb250ZW50LWNlbnRlciBkLWZsZXggbXQtMlwiPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiIHR5cGU9XCJzdWJtaXRcIj5cbiAgICAgICAgICAgICAgSW5pY2lhciBTZXNpw7NuXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQ29sPlxuICAgICAgICA8L1Jvdz5cbiAgICAgIDwvRm9ybT5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKTtcbn07XG5cbkxvZ2luLnByb3BUeXBlcyA9IHtcbiAgbG9naW5Vc2VyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBhdXRoOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGVycm9yczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxufTtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiAoe1xuICBhdXRoOiBzdGF0ZS5hdXRoLFxuICBlcnJvcnM6IHN0YXRlLmVycm9ycyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgeyBsb2dpblVzZXIgfSkoTG9naW4pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IHJlZ2lzdGVyVXNlciwgY2xlYXJSZWdpc3RlciB9IGZyb20gJy4uLy4uLy4uL2FjdGlvbnMvYXV0aEFjdGlvbnMnO1xuXG5pbXBvcnQgc3dhbCBmcm9tICdAc3dlZXRhbGVydC93aXRoLXJlYWN0JztcblxuaW1wb3J0IHsgQnV0dG9uLCBDb250YWluZXIsIENvbCwgRm9ybSwgUm93IH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcblxuaW1wb3J0ICcuL1JlZ2lzdGVyLmNzcyc7XG5cbmNvbnN0IFJlZ2lzdGVyID0gKHsgaGlzdG9yeSwgYXV0aCwgcmVnaXN0ZXJVc2VyIH0pID0+IHtcbiAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbbGFzdE5hbWUsIHNldExhc3ROYW1lXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwaG9uZSwgc2V0UGhvbmVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkMiwgc2V0UGFzc3dvcmQyXSA9IHVzZVN0YXRlKCcnKTtcblxuICBpZiAoYXV0aC5pc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICBoaXN0b3J5LnB1c2goJy8nKTtcbiAgfVxuXG4gIGlmKGF1dGgucmVnaXN0ZXJEb25lKSB7XG4gICAgY2xlYXJSZWdpc3RlcigpO1xuICAgIFxuICAgIHN3YWwoe1xuICAgICAgdGl0bGU6ICdUdSByZWdpc3RybyBmdWUgZXhpdG9zbycsXG4gICAgICB0ZXh0OiBcIkFob3JhIHB1ZWRlcyBpbmljaWFyIHNlc2nDs25cIixcbiAgICAgIGljb246ICdzdWNjZXNzJyxcbiAgICB9KTtcblxuICAgIGhpc3RvcnkucHVzaCgnL2xvZ2luJyk7XG4gIH1cblxuICBjb25zdCBvblN1Ym1pdCA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgbmV3VXNlciA9IHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBsYXN0X25hbWU6IGxhc3ROYW1lLFxuICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgdGVsZXBob25lOiBwaG9uZSxcbiAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uOiBwYXNzd29yZDIsXG4gICAgfTtcblxuICAgIHJlZ2lzdGVyVXNlcihuZXdVc2VyLCBoaXN0b3J5KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxDb250YWluZXI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgbXQtNVwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInByaW1hcnktZGFya1wiPk51ZXZvIFVzdWFyaW88L2gxPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJpbWFyeS1kYXJrXCI+Q29tcGxldGEgbG9zIHNpZ3VpZW50ZXMgZGF0b3M8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Rm9ybSBvblN1Ym1pdD17b25TdWJtaXR9PlxuICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICA8Q29sPlxuICAgICAgICAgICAgICA8Rm9ybS5Hcm91cCBjb250cm9sSWQ9XCJmb3JtTmFtZVwiPlxuICAgICAgICAgICAgICAgIDxGb3JtLkxhYmVsPk5vbWJyZShzKTwvRm9ybS5MYWJlbD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Db250cm9sXG4gICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkp1YW4gQ2FybG9zXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByaW1hcnktZGFya1wiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0TmFtZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICA8Q29sPlxuICAgICAgICAgICAgICA8Rm9ybS5Hcm91cCBjb250cm9sSWQ9XCJmb3JtTGFzdE5hbWVcIj5cbiAgICAgICAgICAgICAgICA8Rm9ybS5MYWJlbD5BcGVsbGlkb3M8L0Zvcm0uTGFiZWw+XG4gICAgICAgICAgICAgICAgPEZvcm0uQ29udHJvbFxuICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicHJpbWFyeS1kYXJrXCJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXBlbGxpZG8gcGF0ZXJubywgbWF0ZXJub1wiXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldExhc3ROYW1lKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICA8Um93PlxuICAgICAgICAgICAgPENvbD5cbiAgICAgICAgICAgICAgPEZvcm0uR3JvdXAgY29udHJvbElkPVwiZm9ybUhlaWdodFwiPlxuICAgICAgICAgICAgICAgIDxGb3JtLkxhYmVsPkVtYWlsPC9Gb3JtLkxhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtLkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByaW1hcnktZGFya1wiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImVqZW1wbG9AbWFpbC5jb21cIlxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRFbWFpbChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICA8Q29sPlxuICAgICAgICAgICAgICA8Rm9ybS5Hcm91cCBjb250cm9sSWQ9XCJmb3JtV2VpZ2h0XCI+XG4gICAgICAgICAgICAgICAgPEZvcm0uTGFiZWw+VGVsw6lmb25vPC9Gb3JtLkxhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtLkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByaW1hcnktZGFya1wiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIigxMjMpIDQ1NiA2Nzg5XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0UGhvbmUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICA8Q29sPlxuICAgICAgICAgICAgICA8Rm9ybS5Hcm91cCBjb250cm9sSWQ9XCJmb3JtSGVpZ2h0XCI+XG4gICAgICAgICAgICAgICAgPEZvcm0uTGFiZWw+Q29udHJhc2XDsWE8L0Zvcm0uTGFiZWw+XG4gICAgICAgICAgICAgICAgPEZvcm0uQ29udHJvbFxuICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByaW1hcnktZGFya1wiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIioqKioqKioqKioqXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0UGFzc3dvcmQoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgICAgPENvbD5cbiAgICAgICAgICAgICAgPEZvcm0uR3JvdXAgY29udHJvbElkPVwiZm9ybVdlaWdodFwiPlxuICAgICAgICAgICAgICAgIDxGb3JtLkxhYmVsPkNvbmZpcm1hIHR1IGNvbnRyYXNlw7FhPC9Gb3JtLkxhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtLkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwcmltYXJ5LWRhcmtcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIqKioqKioqKioqKlwiXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhc3N3b3JkMihlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgPC9Sb3c+XG4gICAgICAgICAgXG4gICAgICAgICAgPFJvdz5cbiAgICAgICAgICAgIDxDb2wgY2xhc3NOYW1lPVwidGV4dC1yaWdodFwiPlxuICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdW1iaXRcIj5DcmVhciBVc3VhcmlvPC9CdXR0b24+XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgPC9Gb3JtPlxuXG4gICAgPC9Db250YWluZXI+XG4gIClcbn07XG5cblJlZ2lzdGVyLnByb3BUeXBlcyA9IHtcbiAgcmVnaXN0ZXJVc2VyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBhdXRoOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGVycm9yczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxufTtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiAoe1xuICBhdXRoOiBzdGF0ZS5hdXRoLFxuICBlcnJvcnM6IHN0YXRlLmVycm9ycyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgeyByZWdpc3RlclVzZXIgfSkod2l0aFJvdXRlcihSZWdpc3RlcikpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQnV0dG9uLCBDb250YWluZXIgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBsb2dvdXRVc2VyIH0gZnJvbSAnLi4vLi4vLi4vYWN0aW9ucy9hdXRoQWN0aW9ucyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5jb25zdCBEYXNoYm9hcmQgPSAoeyBsb2dvdXRVc2VyIH0pID0+IHtcblxuICAgIGNvbnN0IGxvZ291dCA9ICgpID0+IHtcbiAgICAgICAgbG9nb3V0VXNlcigpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDb250YWluZXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIG10LTVcIj5cbiAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwicHJpbWFyeS1kYXJrXCI+VGllbmVzIHVuYSBzZXNpw7NuIGFjdGl2YTwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXgtNSBtdC0zXCI+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtsb2dvdXR9PkxvZ291dDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuXG4gICAgKTtcbn07XG5cbkRhc2hib2FyZC5wcm9wVHlwZXMgPSB7XG4gICAgbG9nb3V0VXNlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBhdXRoOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZXJyb3JzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+ICh7XG4gICAgYXV0aDogc3RhdGUuYXV0aCxcbiAgICBlcnJvcnM6IHN0YXRlLmVycm9ycyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgeyBsb2dvdXRVc2VyIH0pKERhc2hib2FyZCk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm91dGUsIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgUHJpdmF0ZVJvdXRlID0gKHsgY29tcG9uZW50OiBDb21wb25lbnQsIGF1dGgsIC4uLnJlc3QgfSkgPT4gKFxuICA8Um91dGVcbiAgICB7Li4ucmVzdH1cbiAgICByZW5kZXI9eyhwcm9wcykgPT5cbiAgICAgIGF1dGguaXNBdXRoZW50aWNhdGVkID09PSB0cnVlID8gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+IDogPFJlZGlyZWN0IHRvPVwiL2xvZ2luXCIgLz5cbiAgICB9XG4gIC8+XG4pO1xuXG5Qcml2YXRlUm91dGUucHJvcFR5cGVzID0ge1xuICBhdXRoOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+ICh7XG4gIGF1dGg6IHN0YXRlLmF1dGgsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFByaXZhdGVSb3V0ZSk7XG4iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCB7IFNFVF9DVVJSRU5UX1VTRVIsIFVTRVJfTE9BRElORywgU0VUX1NVQ0NFU1NGVUxfUkVHSVNURVIsIENMRUFSX1JFR0lTVEVSIH0gZnJvbSAnLi4vYWN0aW9ucy90eXBlcyc7XG5cbmNvbnN0IGlzRW1wdHkgPSByZXF1aXJlKCdpcy1lbXB0eScpO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGlzQXV0aGVudGljYXRlZDogZmFsc2UsXG4gIHVzZXI6IHt9LFxuICBsb2FkaW5nOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNFVF9DVVJSRU5UX1VTRVI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaXNBdXRoZW50aWNhdGVkOiAhaXNFbXB0eShhY3Rpb24ucGF5bG9hZCksXG4gICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgfTtcbiAgICBjYXNlIFVTRVJfTE9BRElORzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgfTtcblxuICAgIGNhc2UgU0VUX1NVQ0NFU1NGVUxfUkVHSVNURVI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcmVnaXN0ZXJEb25lOiB0cnVlXG4gICAgICB9XG4gICAgY2FzZSBDTEVBUl9SRUdJU1RFUjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICByZWdpc3RlckRvbmU6IG51bGxcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHRVRfRVJST1JTIH0gZnJvbSAnLi4vYWN0aW9ucy90eXBlcyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBHRVRfRVJST1JTOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IHJvb3RSZWR1Y2VyIGZyb20gJy4vcmVkdWNlcnMnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7fTtcblxuY29uc3QgbWlkZGxld2FyZSA9IFt0aHVua107XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gIHJvb3RSZWR1Y2VyLFxuICBpbml0aWFsU3RhdGUsXG4gIGNvbXBvc2UoXG4gICAgYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmUpLFxuICAgICh3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fICYmXG4gICAgICB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fKCkpIHx8XG4gICAgICBjb21wb3NlXG4gIClcbik7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IGF1dGhSZWR1Y2VyIGZyb20gJy4vYXV0aFJlZHVjZXInO1xuaW1wb3J0IGVycm9yUmVkdWNlciBmcm9tICcuL2Vycm9yUmVkdWNlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIGF1dGg6IGF1dGhSZWR1Y2VyLFxuICBlcnJvcnM6IGVycm9yUmVkdWNlcixcbn0pO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgU3dpdGNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IGp3dF9kZWNvZGUgZnJvbSAnand0LWRlY29kZSc7XG5pbXBvcnQgc2V0QXV0aFRva2VuIGZyb20gJy4vdXRpbHMvc2V0QXV0aFRva2VuJztcblxuaW1wb3J0IHsgc2V0Q3VycmVudFVzZXIsIGxvZ291dFVzZXIgfSBmcm9tICcuL2FjdGlvbnMvYXV0aEFjdGlvbnMnO1xuXG5pbXBvcnQgTG9naW4gZnJvbSAnLi9jb21wb25lbnRzL2F1dGgvTG9naW4vTG9naW4nO1xuaW1wb3J0IFJlZ2lzdGVyIGZyb20gJy4vY29tcG9uZW50cy9hdXRoL1JlZ2lzdGVyL1JlZ2lzdGVyJztcblxuaW1wb3J0IERhc2hib2FyZCBmcm9tICcuL2NvbXBvbmVudHMvRGFzaGJvYXJkL0Rhc2hib2FyZCc7XG5cbmltcG9ydCBQcml2YXRlUm91dGUgZnJvbSAnLi9jb21wb25lbnRzL1ByaXZhdGVSb3V0ZSc7XG5cbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJztcblxuaW1wb3J0ICcuL0FwcC5jc3MnO1xuXG4vLyBDaGVjayBmb3IgdG9rZW4gdG8ga2VlcCB1c2VyIGxvZ2dlZCBpblxuaWYgKGxvY2FsU3RvcmFnZS5qd3RUb2tlbikge1xuICAvLyBTZXQgYXV0aCB0b2tlbiBoZWFkZXIgYXV0aFxuICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5qd3RUb2tlbjtcbiAgc2V0QXV0aFRva2VuKHRva2VuKTtcbiAgLy8gRGVjb2RlIHRva2VuIGFuZCBnZXQgdXNlciBpbmZvIGFuZCBleHBcbiAgY29uc3QgZGVjb2RlZCA9IGp3dF9kZWNvZGUodG9rZW4pO1xuICAvLyBTZXQgdXNlciBhbmQgaXNBdXRoZW50aWNhdGVkXG4gIHN0b3JlLmRpc3BhdGNoKHNldEN1cnJlbnRVc2VyKGRlY29kZWQpKTtcbiAgLy8gQ2hlY2sgZm9yIGV4cGlyZWQgdG9rZW5cbiAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpIC8gMTAwMDsgLy8gdG8gZ2V0IGluIG1pbGxpc2Vjb25kc1xuICBpZiAoZGVjb2RlZC5leHAgPCBjdXJyZW50VGltZSkge1xuICAgIC8vIExvZ291dCB1c2VyXG4gICAgc3RvcmUuZGlzcGF0Y2gobG9nb3V0VXNlcigpKTtcblxuICAgIC8vIFJlZGlyZWN0IHRvIGxvZ2luXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLi9sb2dpbic7XG4gIH1cbn1cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgPFJvdXRlcj5cbiAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9yZWdpc3RlclwiIGNvbXBvbmVudD17UmVnaXN0ZXJ9IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbG9naW5cIiBjb21wb25lbnQ9e0xvZ2lufSAvPlxuICAgICAgICAgIFxuICAgICAgICAgIDxQcml2YXRlUm91dGUgZXhhY3QgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0Rhc2hib2FyZH0vPlxuICAgICAgICA8L1N3aXRjaD5cbiAgICAgIDwvUm91dGVyPlxuICAgIDwvUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIvLyBUaGlzIG9wdGlvbmFsIGNvZGUgaXMgdXNlZCB0byByZWdpc3RlciBhIHNlcnZpY2Ugd29ya2VyLlxuLy8gcmVnaXN0ZXIoKSBpcyBub3QgY2FsbGVkIGJ5IGRlZmF1bHQuXG5cbi8vIFRoaXMgbGV0cyB0aGUgYXBwIGxvYWQgZmFzdGVyIG9uIHN1YnNlcXVlbnQgdmlzaXRzIGluIHByb2R1Y3Rpb24sIGFuZCBnaXZlc1xuLy8gaXQgb2ZmbGluZSBjYXBhYmlsaXRpZXMuIEhvd2V2ZXIsIGl0IGFsc28gbWVhbnMgdGhhdCBkZXZlbG9wZXJzIChhbmQgdXNlcnMpXG4vLyB3aWxsIG9ubHkgc2VlIGRlcGxveWVkIHVwZGF0ZXMgb24gc3Vic2VxdWVudCB2aXNpdHMgdG8gYSBwYWdlLCBhZnRlciBhbGwgdGhlXG4vLyBleGlzdGluZyB0YWJzIG9wZW4gb24gdGhlIHBhZ2UgaGF2ZSBiZWVuIGNsb3NlZCwgc2luY2UgcHJldmlvdXNseSBjYWNoZWRcbi8vIHJlc291cmNlcyBhcmUgdXBkYXRlZCBpbiB0aGUgYmFja2dyb3VuZC5cblxuLy8gVG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgYmVuZWZpdHMgb2YgdGhpcyBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0b1xuLy8gb3B0LWluLCByZWFkIGh0dHA6Ly9iaXQubHkvQ1JBLVBXQVxuXG5jb25zdCBpc0xvY2FsaG9zdCA9IEJvb2xlYW4oXG4gIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHxcbiAgICAvLyBbOjoxXSBpcyB0aGUgSVB2NiBsb2NhbGhvc3QgYWRkcmVzcy5cbiAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdbOjoxXScgfHxcbiAgICAvLyAxMjcuMC4wLjEvOCBpcyBjb25zaWRlcmVkIGxvY2FsaG9zdCBmb3IgSVB2NC5cbiAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUubWF0Y2goXG4gICAgICAvXjEyNyg/OlxcLig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykpezN9JC9cbiAgICApXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIoY29uZmlnKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmICdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAvLyBUaGUgVVJMIGNvbnN0cnVjdG9yIGlzIGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNXLlxuICAgIGNvbnN0IHB1YmxpY1VybCA9IG5ldyBVUkwocHJvY2Vzcy5lbnYuUFVCTElDX1VSTCwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGlmIChwdWJsaWNVcmwub3JpZ2luICE9PSB3aW5kb3cubG9jYXRpb24ub3JpZ2luKSB7XG4gICAgICAvLyBPdXIgc2VydmljZSB3b3JrZXIgd29uJ3Qgd29yayBpZiBQVUJMSUNfVVJMIGlzIG9uIGEgZGlmZmVyZW50IG9yaWdpblxuICAgICAgLy8gZnJvbSB3aGF0IG91ciBwYWdlIGlzIHNlcnZlZCBvbi4gVGhpcyBtaWdodCBoYXBwZW4gaWYgYSBDRE4gaXMgdXNlZCB0b1xuICAgICAgLy8gc2VydmUgYXNzZXRzOyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHAvaXNzdWVzLzIzNzRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHN3VXJsID0gYCR7cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0vc2VydmljZS13b3JrZXIuanNgO1xuXG4gICAgICBpZiAoaXNMb2NhbGhvc3QpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBydW5uaW5nIG9uIGxvY2FsaG9zdC4gTGV0J3MgY2hlY2sgaWYgYSBzZXJ2aWNlIHdvcmtlciBzdGlsbCBleGlzdHMgb3Igbm90LlxuICAgICAgICBjaGVja1ZhbGlkU2VydmljZVdvcmtlcihzd1VybCwgY29uZmlnKTtcblxuICAgICAgICAvLyBBZGQgc29tZSBhZGRpdGlvbmFsIGxvZ2dpbmcgdG8gbG9jYWxob3N0LCBwb2ludGluZyBkZXZlbG9wZXJzIHRvIHRoZVxuICAgICAgICAvLyBzZXJ2aWNlIHdvcmtlci9QV0EgZG9jdW1lbnRhdGlvbi5cbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbigoKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAnVGhpcyB3ZWIgYXBwIGlzIGJlaW5nIHNlcnZlZCBjYWNoZS1maXJzdCBieSBhIHNlcnZpY2UgJyArXG4gICAgICAgICAgICAgICd3b3JrZXIuIFRvIGxlYXJuIG1vcmUsIHZpc2l0IGh0dHA6Ly9iaXQubHkvQ1JBLVBXQSdcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElzIG5vdCBsb2NhbGhvc3QuIEp1c3QgcmVnaXN0ZXIgc2VydmljZSB3b3JrZXJcbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBjb25maWcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKSB7XG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyXG4gICAgLnJlZ2lzdGVyKHN3VXJsKVxuICAgIC50aGVuKChyZWdpc3RyYXRpb24pID0+IHtcbiAgICAgIHJlZ2lzdHJhdGlvbi5vbnVwZGF0ZWZvdW5kID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmc7XG4gICAgICAgIGlmIChpbnN0YWxsaW5nV29ya2VyID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFsbGluZ1dvcmtlci5vbnN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChpbnN0YWxsaW5nV29ya2VyLnN0YXRlID09PSAnaW5zdGFsbGVkJykge1xuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIHVwZGF0ZWQgcHJlY2FjaGVkIGNvbnRlbnQgaGFzIGJlZW4gZmV0Y2hlZCxcbiAgICAgICAgICAgICAgLy8gYnV0IHRoZSBwcmV2aW91cyBzZXJ2aWNlIHdvcmtlciB3aWxsIHN0aWxsIHNlcnZlIHRoZSBvbGRlclxuICAgICAgICAgICAgICAvLyBjb250ZW50IHVudGlsIGFsbCBjbGllbnQgdGFicyBhcmUgY2xvc2VkLlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAnTmV3IGNvbnRlbnQgaXMgYXZhaWxhYmxlIGFuZCB3aWxsIGJlIHVzZWQgd2hlbiBhbGwgJyArXG4gICAgICAgICAgICAgICAgICAndGFicyBmb3IgdGhpcyBwYWdlIGFyZSBjbG9zZWQuIFNlZSBodHRwOi8vYml0Lmx5L0NSQS1QV0EuJ1xuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIC8vIEV4ZWN1dGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcub25VcGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25maWcub25VcGRhdGUocmVnaXN0cmF0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgZXZlcnl0aGluZyBoYXMgYmVlbiBwcmVjYWNoZWQuXG4gICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGFcbiAgICAgICAgICAgICAgLy8gXCJDb250ZW50IGlzIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuXCIgbWVzc2FnZS5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS4nKTtcblxuICAgICAgICAgICAgICAvLyBFeGVjdXRlIGNhbGxiYWNrXG4gICAgICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLm9uU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5vblN1Y2Nlc3MocmVnaXN0cmF0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOicsIGVycm9yKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIoc3dVcmwsIGNvbmZpZykge1xuICAvLyBDaGVjayBpZiB0aGUgc2VydmljZSB3b3JrZXIgY2FuIGJlIGZvdW5kLiBJZiBpdCBjYW4ndCByZWxvYWQgdGhlIHBhZ2UuXG4gIGZldGNoKHN3VXJsKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgLy8gRW5zdXJlIHNlcnZpY2Ugd29ya2VyIGV4aXN0cywgYW5kIHRoYXQgd2UgcmVhbGx5IGFyZSBnZXR0aW5nIGEgSlMgZmlsZS5cbiAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgICAgaWYgKFxuICAgICAgICByZXNwb25zZS5zdGF0dXMgPT09IDQwNCB8fFxuICAgICAgICAoY29udGVudFR5cGUgIT0gbnVsbCAmJiBjb250ZW50VHlwZS5pbmRleE9mKCdqYXZhc2NyaXB0JykgPT09IC0xKVxuICAgICAgKSB7XG4gICAgICAgIC8vIE5vIHNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9iYWJseSBhIGRpZmZlcmVudCBhcHAuIFJlbG9hZCB0aGUgcGFnZS5cbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbigocmVnaXN0cmF0aW9uKSA9PiB7XG4gICAgICAgICAgcmVnaXN0cmF0aW9uLnVucmVnaXN0ZXIoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvY2VlZCBhcyBub3JtYWwuXG4gICAgICAgIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gaW50ZXJuZXQgY29ubmVjdGlvbiBmb3VuZC4gQXBwIGlzIHJ1bm5pbmcgaW4gb2ZmbGluZSBtb2RlLicpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3RlcigpIHtcbiAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKChyZWdpc3RyYXRpb24pID0+IHtcbiAgICAgIHJlZ2lzdHJhdGlvbi51bnJlZ2lzdGVyKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgJy4vaW5kZXguY3NzJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0ICogYXMgc2VydmljZVdvcmtlciBmcm9tICcuL3NlcnZpY2VXb3JrZXInO1xuXG5jb25zdCBhcHAgPSAoXG4gIDxCcm93c2VyUm91dGVyPlxuICAgIDxBcHAgLz5cbiAgPC9Ccm93c2VyUm91dGVyPlxuKTtcblxuUmVhY3RET00ucmVuZGVyKGFwcCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cbi8vIElmIHlvdSB3YW50IHlvdXIgYXBwIHRvIHdvcmsgb2ZmbGluZSBhbmQgbG9hZCBmYXN0ZXIsIHlvdSBjYW4gY2hhbmdlXG4vLyB1bnJlZ2lzdGVyKCkgdG8gcmVnaXN0ZXIoKSBiZWxvdy4gTm90ZSB0aGlzIGNvbWVzIHdpdGggc29tZSBwaXRmYWxscy5cbi8vIExlYXJuIG1vcmUgYWJvdXQgc2VydmljZSB3b3JrZXJzOiBodHRwOi8vYml0Lmx5L0NSQS1QV0FcbnNlcnZpY2VXb3JrZXIudW5yZWdpc3RlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==